def versions_to_generate = []

def computeGenerateVersions(String versions, String existingFiles, String regenerate) {
    def versionList = versions.readLines()
    def regenerateAll = regenerate.toBoolean()
    if (!regenerateAll) {
        def fileList = existingFiles.readLines()
        for (file in fileList) {
            def matcher = file =~ /generatedOnline-(\d+(\.\d+){3,5}).json/
            def fileVersion = matcher[0][1]
            println('fileVersion = ' + fileVersion)
            versionList.remove(fileVersion)
        }
    }
    versions_to_generate = versionList
    print('versions_to_generate = ' + versions_to_generate)
}

def haveVersionsToBuild() {
    return !versions_to_generate.isEmpty()
}

def getComputedVersions() {
    return versions_to_generate
}

pipeline {
    agent any
    parameters {
        booleanParam(name: 'REGENERATE_ALL', defaultValue: false,
                     description: 'Regenerate files for all versions')
    }
    environment {
        oci_cli_exe = '/usr/bin/oci'
        oci_profile_name = 'WDTBUILD'
        ocir_repo_name = 'wdt/jenkins-alias-test-slave'
        ocir_compartment_id = 'ocid1.tenancy.oc1..aaaaaaaahmcbb5mp2h6toh4vj7ax526xtmihrneoumyat557rvlolsx63imq'

        oci_os_namespace_name = "${env.WDT_ALIAS_TEST_TENANCY}"
        oci_os_bucket_name = 'wdt-alias-test-files'
        oci_os_prefix = 'generatedOnline'

        downstream_job_name = 'wdt-alias-test-generate-child'
    }
    stages {
        stage ('Environment') {
            tools {
                maven 'maven-3.6.0'
                jdk 'jdk8'
            }
            steps {
                sh 'env|sort'
            }
        }
        stage ('Compute Versions') {
            environment {
                ocir_versions = sh(script: "${oci_cli_exe} artifacts container image list --profile ${oci_profile_name} --repository-name ${ocir_repo_name} --compartment-id ${ocir_compartment_id} --is-versioned true | jq -r '.data.items[].version'", returnStdout: true).trim()
                oci_files = sh(script: "${oci_cli_exe} os object list --profile ${oci_profile_name} --bucket-name ${oci_os_bucket_name} --namespace ${oci_os_namespace_name} --prefix ${oci_os_prefix} | jq -r '.data[].name'", returnStdout: true).trim()
            }
            steps {
                computeGenerateVersions("${ocir_versions}", "${oci_files}", "${params.REGENERATE_ALL}")
            }
        }
        stage ('Build') {
            when {
                equals(actual: haveVersionsToBuild(), expected: true)
            }
            tools {
                maven 'maven-3.6.0'
                jdk 'jdk8'
            }
            steps {
                sh 'mvn clean install -DskipTests'
                sh "cp ${WORKSPACE}/installer/target/weblogic-deploy.zip ${WORKSPACE}/"
                archiveArtifacts 'weblogic-deploy.zip'
            }
        }
        stage ('Call Child Process') {
            when {
                equals(actual: haveVersionsToBuild(), expected: true)
            }
            steps {
                script {
                    def versions = getComputedVersions()
                    echo "computed versions = ${versions}"
                    for (String version in versions) {
                        echo "Calling ${downstream_job_name} for WebLogic Server version ${version}"
                        build job: "${downstream_job_name}", parameters: [
                            string(name: "parent_git_commit", value: "${GIT_COMMIT}"),
                            string(name: "parent_job_name", value: "${JOB_NAME}"),
                            string(name: "parent_job_number", value: "${BUILD_NUMBER}"),
                            string(name: "wls_version", value: "${version}")
                        ]
                    }
                }
            }
        }
    }
    post {
        failure {
            slackSend channel: '#wkt-build-failure-notifications',
                      botUser: false, color: 'danger',
                      message: "Build <${env.BUILD_URL}|${env.JOB_NAME}:${env.BUILD_NUMBER}> failed"
        }
    }
}
