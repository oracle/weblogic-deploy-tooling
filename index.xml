<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebLogic Deploy Tooling</title>
    <link>https://oracle.github.io/weblogic-deploy-tooling/</link>
    <description>Recent content on WebLogic Deploy Tooling</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Jan 2023 15:27:38 -0500</lastBuildDate><atom:link href="https://oracle.github.io/weblogic-deploy-tooling/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create Domain Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/create/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/create/</guid>
      <description>The Create Domain Tool uses a model and WLST offline to create a domain. To use the tool, at a minimum, the model must specify the domain&amp;rsquo;s administrative password in the domainInfo section of the model, as shown below.
domainInfo: AdminPassword: welcome1 Using the model above, simply run the createDomain tool, specifying the type of domain to create and where to create it.
$ weblogic-deploy\bin\createDomain.cmd -oracle_home c:\wls12213 -domain_type WLS -domain_parent d:\demo\domains -model_file MinimalDemoDomain.</description>
    </item>
    
    <item>
      <title>Customizing the Administration Server</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/adminserver-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/adminserver-model/</guid>
      <description>Administration Server configuration The Create Domain Tool lets you configure the Administration Server using a domain model. These examples show how some common configurations can be represented in the model.
Using the default Administration Server configuration When the Create Domain Tool is run, the templates associated with your domain type will automatically create an Administration Server named AdminServer, with default values for all the attributes. If you don&amp;rsquo;t need to change any of these attributes, such as ListenAddress or ListenPort, or any of the sub-folders, such as SSL or ServerStart, nothing needs to be added to the model.</description>
    </item>
    
    <item>
      <title>Install WDT</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/install/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/install/</guid>
      <description>Download and install the software The WebLogic Deploy Tooling project repository is located at https://github.com/oracle/weblogic-deploy-tooling.
You can download binary distributions of the weblogic-deploy.zip installer from the GitHub Releases page.
 To install the software, simply unzip the weblogic-deploy.zip installer on a machine that has the desired versions of WebLogic Server installed. After being unzipped, the software is ready to use, just set the JAVA_HOME environment variable to point to a Java 7 or higher JDK and the shell scripts are ready to run.</description>
    </item>
    
    <item>
      <title>Metadata Model</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/concepts/model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/concepts/model/</guid>
      <description>Contents  Overview Top-level sections Simple example Model names Model tokens Model semantics Declaring named MBeans to delete Using multiple models Upgrading from WDT 1.x to WDT 2.x YAML files  Overview The metadata model (or model, for short) is a version-independent description of a WebLogic Server domain configuration. The tools are designed to support a sparse model so that the model need only describe what is required for the specific operation without describing other artifacts.</description>
    </item>
    
    <item>
      <title>Model filters</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/model_filters/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/model_filters/</guid>
      <description>WebLogic Deploy Tooling supports the use of model filters to manipulate the domain model. The Create Domain, Update Domain, and Deploy Applications Tools apply filters to the model after it is read, before it is validated and applied to the domain. The Discover Domain Tool applies filters to the model after it has been discovered, before the model is validated and written.
Model filters are written in Jython, and must be compatible with the version used in the corresponding version of WLST.</description>
    </item>
    
    <item>
      <title>Project structure</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/developer/project-structure/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/developer/project-structure/</guid>
      <description>This project is structured using the Standard Directory Layout for Maven projects, with two child modules, core, alias-test, system-test, and installer. In addition, there is a documentation directory containing project documentation.
The core module contains the main source code for the project. core includes Jython modules and Java classes, as well as typedef files, alias definitions, and the message bundle.
The system-test and alias-test modules contain test suites for verifying pull requests and nightly regression testing.</description>
    </item>
    
    <item>
      <title>Archive File</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/concepts/archive/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/concepts/archive/</guid>
      <description>The archive file is used to deploy binaries and other file resources to the target domain. The archive is a ZIP file with a specific directory structure. Any file resources referenced in the model that are not already on the target system must be stored in the correct location in the archive, and the model must reflect the path into the archive.
Note that file resources that already exist on the target system need not be included in the archive, provided that the model specifies the correct location on the target system.</description>
    </item>
    
    <item>
      <title>Domain type definitions</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/domain_def/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/domain_def/</guid>
      <description>WebLogic Deploy Tooling has an extensible domain type system. The three built-in domain types (WLS, RestrictedJRF, and JRF) are defined in JSON files of the same name in the WLSDEPLOY_HOME/lib/typedefs directory. For example, the JRF domain type is defined in the WLSDEPLOY_HOME/lib/typedefs/JRF.json file with similar content, as shown below.
{ &amp;#34;copyright&amp;#34;: &amp;#34;Copyright (c) 2017, 2020, Oracle Corporation and/or its affiliates.&amp;#34;, &amp;#34;license&amp;#34;: &amp;#34;Licensed under the Universal Permissive License v 1.0 as shown at https://oss.</description>
    </item>
    
    <item>
      <title>Feature implementation</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/developer/feature-impl/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/developer/feature-impl/</guid>
      <description>This document describes how specific features of WebLogic Deploy Tooling are implemented in the source code.
Creator and Deployer class hierarchies The creation of individual folders and attributes within the topology section of the domain model is accomplished using subclasses of the Jython class Creator, in the module wlsdeploy.tool.create.creator.py. The Creator class provides base methods to recurse through nested folders in the domain model, create or update those folders, and set or update their attributes.</description>
    </item>
    
    <item>
      <title>Modeling a configured cluster</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/cluster-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/cluster-model/</guid>
      <description>This WDT domain model sample has a typical configuration for a configured cluster with a single managed server, including connection information, logging setup, and other details.
topology: Cluster: cluster-1: ClientCertProxyEnabled: true AutoMigrationTableName: MIGRATION_1 DataSourceForAutomaticMigration: jdbc-1 ClusterMessagingMode: unicast FrontendHost: frontend.com FrontendHTTPPort: 9001 FrontendHTTPSPort: 9002 MigrationBasis: database NumberOfServersInClusterAddress: 5 WeblogicPluginEnabled: true Server: server-1: Cluster: cluster-1  # this server belongs to cluster-1 ListenAddress: 127.0.0.1 ListenPort: 8001 Machine: machine-1 Log: DomainLogBroadcastSeverity: Error FileCount: 7 FileMinSize: 5000 FileName: logs/AdminServer.</description>
    </item>
    
    <item>
      <title>Target environments</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/target_env/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/target_env/</guid>
      <description>Contents  Overview Specifying a target environment Pre-configured target environments Using secret credentials in the model Merging content from the WDT model Target configuration files  Overview The Discover Domain and Prepare Model Tools allow you to customize the model and other files produced to be compatible with a specific target environment. Options for a target environment may include:
 Using model tokens for some attributes in the model. For more details, see Model tokens.</description>
    </item>
    
    <item>
      <title>Update Domain Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/update/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/update/</guid>
      <description>The Update Domain Tool uses a model, the archive, and WLST to update the configuration of an existing WebLogic Server domain, and to deploy applications and resources into the domain in either WLST online or offline mode. The Update Domain Tool will add or re-configure elements from the topology section of the model, and deploy applications and resources from the resources and appDeployments sections, as described in the Deploy Applications Tool.</description>
    </item>
    
    <item>
      <title>Modeling a WTC configuration</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/wtc-model/</link>
      <pubDate>Mon, 01 Nov 2021 10:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/wtc-model/</guid>
      <description>This sample shows the WDT model for configuring WebLogic Tuxedo Connector (WTC) for both importing services from Tuxedo and exporting EJB methods to Tuxedo as services.
resources: # A logical WLS server name for the WLS configuration found on the console under interoperability WTCServer: myWTCServer: Target: admin # Exported EJB services to be consumed by Tuxedo services. WTCExport: WTCExportedService-1: # The remote name of this service. ResourceName: QaWls2Conv2 # The name used to identify an exported service RemoteName: QaWls2Conv2 EJBName: tuxedo.</description>
    </item>
    
    <item>
      <title>Alias definitions</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/developer/alias-definitions/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/developer/alias-definitions/</guid>
      <description>WebLogic Deploy Tool uses a set of JSON configuration files to map folders and attributes in the model to the corresponding WLST MBeans and their attributes. These mappings are referred as &amp;lsquo;aliases&amp;rsquo; throughout the project code and documentation. Each element in the alias definition file has detailed properties that assist in this mapping.
The model&amp;rsquo;s folder and attribute names usually match the names of the corresponding elements in WLST. For cases where the names of WLST elements may change across WebLogic Server releases, the names should match the names in the 12.</description>
    </item>
    
    <item>
      <title>Connect to a Database</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/database/connect-db/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/database/connect-db/</guid>
      <description>Specifying RCU connection information in the model When creating a JRF domain, you can provide all the RCU connection information in a section RCUDbInfo under the domainInfo section in the model. It provides you with more flexibility over the basic command-line arguments of -rcu_db and -rcu_prefix. Use this when the connection string is more complex and requires extra options.
Background on JRF domain RCU tables A JRF domain creates several data sources from the JRF domain template.</description>
    </item>
    
    <item>
      <title>Custom configuration</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/custom_config/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/custom_config/</guid>
      <description>WDT allows you to create or extend the pre-installed type definitions, model filters, variable injectors, and target environments. Starting with WDT 1.10.0, these additional configuration files can be stored outside the $WLSDEPLOY_HOME/lib directory. This allows the files to remain in place if the WDT installation is moved or upgraded to a new version.
To use a separate configuration directory, set the WDT_CUSTOM_CONFIG environment variable to the directory to be used for configuration.</description>
    </item>
    
    <item>
      <title>Deploy Applications Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/deploy/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/deploy/</guid>
      <description>The Deploy Applications Tool uses a model, the archive, and WLST to deploy applications and resources into an existing WebLogic Server domain in either WLST online or offline mode. When deploying applications and resources from a model, the Deploy Applications Tool focuses primarily on the resources and appDeployments sections of the model. There are exceptions for the domainInfo and topology sections, where those configuration elements are deemed to be &amp;ldquo;application-related.&amp;rdquo; For example, the servers&#39; ServerStart folder has an Arguments and a ClassPath attribute that change the server environment (when started by the Node Manager) that applications may rely on to function properly.</description>
    </item>
    
    <item>
      <title>Modeling a JDBC data source</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/jdbc-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/jdbc-model/</guid>
      <description>This WDT domain model sample section has a typical configuration for a JDBC data source, including targeting information, connection pool parameters, and other details.
resources: JDBCSystemResource: datasource-1: Target: AdminServer,cluster-1 JdbcResource: DatasourceType: GENERIC JDBCConnectionPoolParams: ConnectionReserveTimeoutSeconds: 10 InitialCapacity: 0 MaxCapacity: 5 MinCapacity: 0 TestConnectionsOnReserve: true TestTableName: SQL ISVALID JDBCDriverParams: DriverName: oracle.jdbc.OracleDriver PasswordEncrypted: &amp;#39;@@PROP:jdbc.password@@&amp;#39; URL: jdbc:oracle:thin:@//localhost:1521/myDB Properties: user: Value: scott There are additional sub-folders and attributes available for more configuration options. These can be determined using the Model Help Tool.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/logging/</link>
      <pubDate>Fri, 04 Feb 2022 17:18:00 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/logging/</guid>
      <description>The WebLogic Deploy Tooling has a built-in logging framework based on java.util.logging. Its logging configuration is specified in $WDT_HOME/etc/logging.properties. By default, the logging framework writes to both the console and a log file.
Log file By default, WDT tools write their log files to the $WDT_HOME/logs directory and the log file name reflects the name of the tool. For example, if you run the validateModel tool then the log file will be $WDT_HOME/logs/validateModel.</description>
    </item>
    
    <item>
      <title>Build WebLogic Deploy Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/developer/buildwdt/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/developer/buildwdt/</guid>
      <description>Prerequisites You will need the following software installed in your local build environment:
 Oracle WebLogic Server installation version 12.2.1 and later JDK version 8 Maven 3 and later  Specify the WLST location Execution of the unit tests requires a WebLogic Server installation, because the tests must be run within WLST.
The WLST directory can be specified in one of two ways:
  Specify the -Dunit-test-wlst-dir=&amp;lt;wlst-directory&amp;gt; on the mvn command line.</description>
    </item>
    
    <item>
      <title>Discover Domain Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/discover/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/discover/</guid>
      <description>The Discover Domain Tool provides a bootstrapping mechanism to creating a model and archive file by inspecting an existing domain and gathering configuration and binaries from it. Note that the model file produced by the tool is not directly usable by the Create Domain Tool or the Deploy Applications Tool because the Discover Domain Tool does not discover the passwords from the existing domain. Instead, it puts a --FIX ME-- placeholder for passwords it finds.</description>
    </item>
    
    <item>
      <title>Limitations</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/limitations/limitations/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/limitations/limitations/</guid>
      <description>The following sections describe known limitations for WebLogic Deploy Tooling. Each issue may contain a workaround or an associated issue number.
Discover Domain Tool SEVERE messages ISSUE: The discoverDomain STDOUT contains many SEVERE messages about cd() and ls() when it is run against a 12.2.1.0 domain. The Discover Domain Tool navigates through the domain MBeans using WLST to determine which MBeans are present in a domain. When it tests an MBean that is not present, an error message is logged by WLST.</description>
    </item>
    
    <item>
      <title>Modeling a Work Manager</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/workmanager-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/workmanager-model/</guid>
      <description>This WDT domain model sample section has typical configurations for a Work Manager and its related request classes and constraints. These elements are configured in the SelfTuning folder in the resources section of the model.
resources: SelfTuning: Capacity: capacity40: Target: cluster-1 Count: 40 MaxThreadsConstraint: threeMax: Target: cluster-1 Count: 3 MinThreadsConstraint: twoMin: Target: cluster-1 Count: 2 FairShareRequestClass: appFairShare: Target: cluster-1 FairShare: 50 highFairshare: Target: cluster-1 FairShare: 80 lowFairshare: Target: cluster-1 FairShare: 20 ResponseTimeRequestClass: fiveSecondResponse: Target: cluster-1 GoalMs: 5000 ContextRequestClass: appContextRequest: Target: cluster-1 ContextCase: Case1: GroupName: Administrators RequestClassName: highFairshare Target: cluster-1 Case2: UserName: weblogic RequestClassName: lowFairshare Target: cluster-1 WorkManager: myWorkManager: Capacity: capacity40 ContextRequestClass: appContextRequest # FairShareRequestClass: appFairShare IgnoreStuckThreads: true MaxThreadsConstraint: threeMax MinThreadsConstraint: twoMin # ResponseTimeRequestClass: fiveSecondResponse Target: cluster-1 In this sample, assignments for FairShareRequestClass and ResponseTimeRequestClass are included as comments under myWorkManager.</description>
    </item>
    
    <item>
      <title>Tool property file</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/tool_prop/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/tool_prop/</guid>
      <description>You can configure or tune WebLogic Deploy Tooling tools using the tool property file. This property file is installed as &amp;lt;weblogic-deploy&amp;gt;/lib/tool.properties. You may change the value of any of the properties in this file to tune the WDT tool. Another option is to configure the tool properties in a Custom Configuration directory. Create the tool.properties file in the $WDT_CUSTOM_CONFIG directory.
If a property is removed from the file, or a property value is incorrectly formatted, a WARNING message is logged and an internal default value used instead of the missing or bad value.</description>
    </item>
    
    <item>
      <title>Encrypt Model Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/encrypt/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/encrypt/</guid>
      <description>To meet Oracle&amp;rsquo;s security standards, the encryption algorithms require JDK 8 to run.
 Models contain WebLogic Server domain configuration. Certain types of resources and other configurations require passwords; for example, a JDBC data source requires the password for the user establishing the database connection. When creating or configuring a resource that requires a password, that password must be specified either in the model directly or in the variable file.</description>
    </item>
    
    <item>
      <title>Modeling security providers</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/securityproviders-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/securityproviders-model/</guid>
      <description>WebLogic Server security configuration requires special handling and causes the need for the model semantics to differ from other folders. Because provider ordering is important, and to make sure that the ordering is correctly set in the newly created domain, the Create Domain Tool and Update Domain Tool require that all providers be specified in the model for any provider type that will be created or altered. For example, if you want to change one of the providers in the provider type AuthenticationProvider, your model must specify all of the AuthenticationProvider providers and any non-default attributes for those providers.</description>
    </item>
    
    <item>
      <title>WDT project release process</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/developer/releaseprocess/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/developer/releaseprocess/</guid>
      <description>This document describes the process that should be followed to create a WebLogic Deploy Tooling (WDT) release.
Prerequisites  A local installation of WebLogic Server 12.2.1.x must be available. The person running the release process must have admin privileges on the WebLogic Deploy Tooling GitHub repo because the release process pushes to the master branch directly. The person running the release process needs to create a GitHub Personal Access Token for the repository with (at least) the repo:status, repo_deployment, public_repo, and security_events privileges.</description>
    </item>
    
    <item>
      <title>Contribute to WDT</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/developer/contribute/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/developer/contribute/</guid>
      <description>Oracle welcomes contributions to this repository from anyone.
If you want to submit a pull request to fix a bug or enhance an existing feature, first open an issue and link to that issue when you submit your pull request.
If you have any questions about a possible submission, feel free to open an issue too.
Contributing to the WebLogic Deploy repository Pull requests can be made under The Oracle Contributor Agreement (OCA).</description>
    </item>
    
    <item>
      <title>Modeling Oracle Platform Security Services</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/opss-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/opss-model/</guid>
      <description>The OPSSInitialization section of the WDT model can be used to initialize credentials needed by upper-stack Fusion Middleware products. These credentials can only be applied at domain creation time.
Initializing Oracle Identity Governance This example shows how to configure OPSS credentials for use by Oracle Identity Governance.
domainInfo: AdminUserName: &amp;#39;@@PROP:adminUser@@&amp;#39; AdminPassword: &amp;#39;@@PROP:adminPass@@&amp;#39; OPSSInitialization: Credential: oim: TargetKey: keystore: Username: keystore Password: &amp;#39;@@PROP:keystorePass@@&amp;#39; OIMSchemaPassword: # database schema prefix + _OIM Username: PREFIX_OIM # database schema password Password: &amp;#39;@@PROP:dbSchemaPass@@&amp;#39; sysadmin: Username: xelsysadm Password: &amp;#39;@@PROP:sysAdminPass@@&amp;#39; WeblogicAdminKey: # match to WLS admin credentials Username: &amp;#39;@@PROP:adminUser@@&amp;#39; Password: &amp;#39;@@PROP:adminPass@@&amp;#39; Initializing Oracle Data Integrator This example shows how to configure OPSS credentials for use by Oracle Data Integrator.</description>
    </item>
    
    <item>
      <title>Modeling WebLogic users, groups, and roles</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/usersgroups-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/usersgroups-model/</guid>
      <description>WebLogic Server has the ability to establish a set of users, groups, and global roles as part of the WebLogic domain creation. The WebLogic global roles become part of the WebLogic role mapper (for example, XACMLRoleMapper) and are specified under domainInfo in the WLSRoles section. The users and groups become part of the Embedded LDAP server (for example, DefaultAuthenticator) and are specified under topology in the Security section.
WebLogic global roles The model allows for the definition of WebLogic roles that can augment the well known WebLogic global roles (for example, Admin, Deployer, Monitor, &amp;hellip;) in addition to defining new roles.</description>
    </item>
    
    <item>
      <title>Validate Model Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/validate/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/validate/</guid>
      <description>When working with a metadata model that drives tooling, it is critical to make it easy both to validate that the model and its related artifacts are well-formed and to provide help on the valid attributes and subfolders for a particular model location. The Validate Model Tool provides both validation and help for model authors as a standalone tool. In addition, the tool is integrated with the createDomain and deployApps tools to catch validation errors early, before any actions are performed on the domain.</description>
    </item>
    
    <item>
      <title>Compare Model Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/compare/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/compare/</guid>
      <description>When working with a domain model, sometimes it is useful to know the differences between different models. The Compare Model Tool compares two model files and generates a model that shows the differences between them.
To use the Compare Model Tool, simply run the compareModel shell script with the correct arguments. To see the list of valid arguments, simply run the shell script with the -help option (or with no arguments) for usage information.</description>
    </item>
    
    <item>
      <title>Modeling WebLogic user password credential mapping</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/pwcredentialmap-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/pwcredentialmap-model/</guid>
      <description>The Create Domain Tool can be used to create user password credential mappings for use with the DefaultCredentialMapper security provider. Information in the model will be used to create a credential mapping file that will be imported the first time the Administration Server is started. This example shows how mappings are represented in the model:
domainInfo: WLSUserPasswordCredentialMappings: CrossDomain: map1: RemoteDomain: otherDomain RemoteUser: otherUser RemotePassword: &amp;#39;@@PROP:other.pwd@@&amp;#39; RemoteResource: map2: Protocol: http RemoteHost: remote.</description>
    </item>
    
    <item>
      <title>Configuring Oracle Diagnostic Logging</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/odl-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/odl-model/</guid>
      <description>Oracle Diagnostic Logging (ODL) can be configured and updated with Create Domain, Update Domain, and Deploy Applications Tools, starting with WDT release 1.5.2. ODL configuration is supported only for offline mode in WDT. ODL configuration is not added when a model is created using the Discover Domain Tool. This example shows how some common configuration elements can be represented in the model.
resources: ODLConfiguration: config1: Servers: m1, m2 AddJvmNumber: true HandlerDefaults: abc: r123 xyz: k890 Handler: my-handler: Class: com.</description>
    </item>
    
    <item>
      <title>Prepare Model Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/prepare/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/prepare/</guid>
      <description>The Prepare Model Tool prepares WDT model files for deploying to specific target environments. These customizations include:
 Removing sections from the model that are not compatible with the environment Removing files from the archive that are not compatible with the environment Updating model file(s) to set parameters required by the environment Replacing credential and attribute values with WDT macros Generating a UNIX shell script that will help with creating any required Kubernetes secrets Generating a variable properties file to customize attribute values Generating any additional configuration files to configure the target environment  To use the Prepare Model Tool, simply run the prepareModel shell script with the correct arguments.</description>
    </item>
    
    <item>
      <title>Configuring Oracle HTTP Server</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/ohs-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/ohs-model/</guid>
      <description>Starting with WDT 1.8.0, you can configure and update Oracle HTTP Server (OHS) using the Create Domain, Update Domain, and Deploy Applications Tools, in offline mode only. To discover the OHS configuration, use the Discover Domain Tool, in offline mode only.
Prerequisites In order to configure and use OHS, it must be installed in the Oracle Home directory used to create the domain. You can download OHS here.
The OHS template must be present in the WDT domain type definition file used to create or update the domain.</description>
    </item>
    
    <item>
      <title>Extract Domain Resource Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/kubernetes/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/kubernetes/</guid>
      <description>Using WDT with WebLogic Kubernetes Operator You can use the Extract Domain Resource Tool to create resource files for use with the WebLogic Kubernetes Operator or Verrazzano. This allows the domain configuration and the Kubernetes container configuration to be specified in a single model file.
This is especially useful when making configuration changes to the domain that also need to be reflected in the resource file. For example, adding a cluster to the domain only requires that it be added to the topology section of the WDT model, then a new resource file can be generated to apply to Kubernetes.</description>
    </item>
    
    <item>
      <title>Targeting server groups</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/targetservers-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/targetservers-model/</guid>
      <description>To create more complex domains with clusters of different types, it is necessary to control the targeting of server groups to managed servers. By default, all server groups in the domain type definition are targeted to all managed servers. To create a SOA domain with SOA and OSB clusters, simply add the OSB template and server group to the SOA domain definition, as shown below.
{ &amp;#34;name&amp;#34;: &amp;#34;SOA&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;SOA type domain definitions&amp;#34;, &amp;#34;versions&amp;#34;: { &amp;#34;12.</description>
    </item>
    
    <item>
      <title>Variable Injector Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/variable_injection/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/variable_injection/</guid>
      <description>The Variable Injector Tool is used to tokenize a model with variables. The values for these variables are assigned using an external property file. This facilitates using the same domain model to create new domains in different environments. The Variable Injector Tool can be run as an option in the Discover Domain Tool, or from the standalone command-line interface.
To enable the Variable Injector Tool during the Discover Domain Tool run, create a variable injector configuration by placing a JSON file named model_variable_injector.</description>
    </item>
    
    <item>
      <title>Model Help Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/model_help/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/model_help/</guid>
      <description>The Model Help Tool provides information about the folders and attributes that are valid for sections and folders of a domain model. This is useful when creating a new domain model, or expanding an existing model, including discovered models.
The Model Help Tool is new in WebLogic Deploy Tooling 1.8. The -model_sample argument is deprecated starting with WebLogic Deploy Tooling 1.9.2, when model sample became the default output format.
 Here is a simple example using the Model Help Tool:</description>
    </item>
    
    <item>
      <title>Using WDT with WebLogic Kubernetes Operator</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/wko-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/wko-model/</guid>
      <description>For details, see the Extract Domain Resource Tool.</description>
    </item>
    
    <item>
      <title>Archive Helper Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/archive_helper/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/archive_helper/</guid>
      <description>With the Archive Helper Tool, you can display the contents of an archive file, add, update, extract, and remove files, as needed.
Use the Archive Helper Tool -help option to display its commands. Each command takes a subcommand, which may require one or more command-line options.
archiveHelper commands    Command Description     add Add items to the archive file.   extract Extract items from the archive file.</description>
    </item>
    
    <item>
      <title>Release Notes 3.2.5</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.5/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.5/</guid>
      <description>Changes in Release 3.2.5  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes None
Bug Fixes #1506 - Fixed an issue with online discovery of the JMS ErrorDestination attribute (GitHub #1494). #1507 - Added documentation for the WDT Discover Domain tool&amp;rsquo;s limitation regarding users and groups in the DefaultAuthenticator (GitHub #1493). #1508 - Fixed an issue with Update Domain that was causing the Oracle JDBC driver to throw FileNotFoundException when using a JRF domain with an ATP database.</description>
    </item>
    
    <item>
      <title>Release Notes 3.2.4</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.4/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.4/</guid>
      <description>Changes in Release 3.2.4  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes  #1503 - Added the EnableJMSStoreDBPersistence and EnableJTATLogDBPersistence attributes to domainInfo, which allow JRF domains to automatically convert template-defined JMS and JTA stores from File stores to Database stores during domain creation. This feature was added in support of Oracle Identity Governance domain creation.  Bug Fixes None
Known Issues </description>
    </item>
    
    <item>
      <title>Release Notes 3.2.3</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.3/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.3/</guid>
      <description>Changes in Release 3.2.3  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes  #1496 - Added a post-createDomain script element to the typedef file definitions to accommodate extra offline work required for Oracle Identity Governance domain creation. #1499 - Added updated translation bundle files.  Bug Fixes  #1486 - Fixed JSON parser issue in handling escaped newlines. #1488 - Worked around a Jython 2.</description>
    </item>
    
    <item>
      <title>Release Notes 3.2.2</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.2/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.2/</guid>
      <description>Changes in Release 3.2.2  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes  #1475 - Added support for upcoming SAML2 data initialization files in the archive file. #1476 - Added support for upcoming SAML2 data initialization files in the Discover Domain, Create Domain, and Update Domain tools.  Bug Fixes  #1482 - Fixed an issue related to secret naming that was causing the generated secret names to overlap in locations with multiple credential or password fields.</description>
    </item>
    
    <item>
      <title>Release Notes 3.2.1</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.1/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.1/</guid>
      <description>Changes in Release 3.2.1  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes  #1465 - Initial, limited i18n translation bundles added.  Bug Fixes  #1466 - Updated Server and ServerTemplate aliases to add new 14.1.2 offline attributes. #1467 - Updated CoherenceSystemResource aliases to add new 14.1.2 SecuredProduction online attribute. #1468 - Fixed an error related to tool initialization with WebLogic Server versions earlier than 12.</description>
    </item>
    
    <item>
      <title>Release Notes 3.2.0</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.0/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.0/</guid>
      <description>Changes in Release 3.2.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes  #1450 - Added alias updates for April 2023 PSUs for 12.2.1.3, 12.2.1.4, and 14.1.1. #1454 - Added aliases for new fields introduced 14.1.2. #1457 - Deprecated system-elements section of typedef files and replaced it with a new discover-filters section that supports filtering named elements in most top-level folders. #1458 - Updated Model and Archive documentation to reflect the current state of the code.</description>
    </item>
    
    <item>
      <title>Release Notes 3.1.0</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.1.0/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.1.0/</guid>
      <description>Changes in Release 3.1.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes  #1431 - Added new OPSSInitialization section to domainInfo in order to support ODI and OIG domain creation. #1432 - Added database connectivity check to validate RCU database connection details prior to creating a domain using RCU schemas when not running RCU. #1434 - Added JSON output of restart and non-dynamic change information (#1154) #1438 - Deprecated the use of all RCU-related arguments that provide database connectivity information with the Create Domain tool.</description>
    </item>
    
    <item>
      <title>Release 3.0.4</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.4/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.4/</guid>
      <description>Changes in Release 3.0.4  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes None
Bug Fixes  #1422: Fixed a bug in online discovery of the Cluster attribute of ServerTemplate. #1425: Fixed a bug for online remote discovery causing SSL cipher suites to show up in 14.1.1 even when it was set to the default value.  Known Issues </description>
    </item>
    
    <item>
      <title>Release Notes 3.0.3</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.3/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.3/</guid>
      <description>Changes in Release 3.0.3  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes None
Bug Fixes  #1412: Fixed a bug in the Prepare Model integration with WKTUI. #1413: Fixed a number of internationalization message-related issues. #1414: Fixed a bug with wallet collection during discovery of a Proxy data source. #1416: Fixed a bug in the handling of mail session properties with credentials that was causing a Jython AttributeError (Issue #1415).</description>
    </item>
    
    <item>
      <title>Release Notes 3.0.2</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.2/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.2/</guid>
      <description>Changes in Release 3.0.2  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes None
Bug Fixes  #1405: Corrected some issues with the Windows shell scripts where they were not properly handling paths with spaces. #1409: Corrected a bug where a wallet deprecation message was still being logged as a warning. #1411: Corrected a bug where wallet extraction handling with multiple archive files was happening in the wrong order.</description>
    </item>
    
    <item>
      <title>Release 3.0.1</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.1/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.1/</guid>
      <description>Changes in Release 3.0.1  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes None
Bug Fixes  #1396: Added additional validation to the RCUDbInfo section. #1398: Corrected a bug introduced in 3.0.0 that broke validation of sparse models with dynamic clusters.  Known Issues  When running discoverDomain with the -remote flag, there are several MBeans that are not being properly handled that will result in INFO level messages that look similar to the example shown below.</description>
    </item>
    
    <item>
      <title>Release 3.0.0</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.0/</link>
      <pubDate>Fri, 22 Feb 2019 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.0/</guid>
      <description>Changes in Release 3.0.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features  #1355: Added -remote option to the deployApps tool that supports deploying applications and shared libraries from a remote machine. (Issue #1312) #1355: Added -remote option to the updateDomain tool that allows configuration changes not requiring archive file changes (except for applications and shared libraries) to be made from a remote machine. (Issue #1167) #1365: Added new verrazzano section of the model that can be used to augment/override the YAML files generated by the Verrazzano-related -target options.</description>
    </item>
    
    <item>
      <title>Release 2.4.4</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.4/</link>
      <pubDate>Fri, 20 Jan 2023 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.4/</guid>
      <description>Changes in Release 2.4.4  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes None
Bug Fixes  #1361: Resolved issue where the custom Coherence configuration file was not placed in the WebLogic Server domain&amp;rsquo;s expected location.  Known Issues  Due to the changes made for WDT-663 in WDT 2.4.0, the resulting remotely discovered model contains extra fields that would not normally be there.</description>
    </item>
    
    <item>
      <title>Release 2.4.3</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.3/</link>
      <pubDate>Fri, 13 Jan 2023 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.3/</guid>
      <description>Changes in Release 2.4.3  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes None
Bug Fixes  #1356: Resolved Issue where the new ATP Database URL format was causing connections to fail.  Known Issues  Due to the changes made for WDT-663 in WDT 2.4.0, the resulting remotely discovered model contains extra fields that would not normally be there. This is an area of ongoing work to clean up the online aliases to not depend on these extra remote calls to produce a clean model.</description>
    </item>
    
    <item>
      <title>Release 2.4.2</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.2/</link>
      <pubDate>Thu, 10 Nov 2022 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.2/</guid>
      <description>Changes in Release 2.4.2  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None
Other Changes None
Bug Fixes  #1241: Resolved Issue #1240 that was causing a NullPointerException with discoverDomain. #1252: Reworked the unicode handling to resolve customer issues with 14.1.1 when using non-ASCII characters.  Known Issues  Due to the changes made for WDT-663 in WDT 2.4.0, the resulting remotely discovered model contains extra fields that would not normally be there.</description>
    </item>
    
    <item>
      <title>Release 2.4.1</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.1/</link>
      <pubDate>Thu, 03 Nov 2022 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.1/</guid>
      <description>Changes in Release 2.4.1  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features  None  Other Changes None
Bug Fixes  #1237: Resolved an issue where the tools supporting the -target parameter were doing target-related work even if the parameter was not specified.  Known Issues  Due to the changes made for WDT-663 in WDT 2.4.0, the resulting remotely discovered model contains extra fields that would not normally be there.</description>
    </item>
    
    <item>
      <title>Release 2.4.0</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.0/</link>
      <pubDate>Wed, 02 Nov 2022 15:27:38 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.0/</guid>
      <description>Changes in Release 2.4.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features  None  Other Changes  #1193 - Added support for changing the RCU Data Source type during JRF domain creation (WDT-636). #1210 - Improved the speed of remote discovery by bypassing remote calls to determine if a field was set (WDT-663). #1218 - Added -target support for WebLogic Kubernetes Operator 4.0 to generate the domain and cluster schema resources.</description>
    </item>
    
  </channel>
</rss>
