[
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/create/",
	"title": "Create Domain Tool",
	"tags": [],
	"description": "Creates a domain and populates the domain with all the resources and applications specified in the model.",
	"content": "The Create Domain Tool uses a model and WLST offline to create a domain. To use the tool, at a minimum, the model must specify the domain\u0026rsquo;s administrative password in the domainInfo section of the model, as shown below.\ndomainInfo: AdminPassword: welcome1 Using the model above, simply run the createDomain tool, specifying the type of domain to create and where to create it.\n$ weblogic-deploy\\bin\\createDomain.cmd -oracle_home c:\\wls12213 -domain_type WLS -domain_parent d:\\demo\\domains -model_file MinimalDemoDomain.yaml  Clearly, creating an empty domain with only the template-defined servers is not very interesting, but this example just reinforces how sparse the model can be. When running the Create Domain Tool, the model must be provided either inside the archive file or as a standalone file. If both the archive and model files are provided, the model file outside the archive will take precedence over any that might be inside the archive. If the archive file is not provided, the Create Domain Tool will create the topology section only (using the domainInfo section) of the model in the domain. This is because the resources and appDeployments sections of the model can reference files from the archive so to create the domain with the model-defined resources and applications, an archive file must be provided\u0026ndash;even if the model does not reference anything in the archive. At some point in the future, this restriction may be relaxed to require the archive only if it is actually needed.\nThe Create Domain Tool understands three domain types: WLS, RestrictedJRF, and JRF. When specifying the domain type, the Oracle Home must match the requirements for the domain type. Both RestrictedJRF and JRF require an Oracle Home with the FMW Infrastucture (also known as JRF) installed. When creating a JRF domain, the RCU database information must be provided in the domainInfo section\u0026rsquo;s RCUDbInfo section of the model. Note that the tool will prompt for any passwords required. Optionally, they can be piped to standard input (for example, stdin) of the script, to make the script run without user input. For example, the command to create a JRF domain looks like the one below. Note that this requires the user to have run RCU prior to running the command and have the following section in the model.\n$ weblogic-deploy\\bin\\createDomain.cmd -oracle_home c:\\jrf12213 -domain_type JRF -domain_parent d:\\demo\\domains -model_file DemoDomain.yaml  domainInfo: RCUDbInfo: rcu_db_conn_string: mydb.example.com:1539/PDBORCL rcu_prefix: DEMO To have the Create Domain Tool run RCU, add the following fields to the model and simply add the -run_rcu argument to the previous command line and the RCU schemas will be automatically created. Be aware that when the tool runs RCU, it will automatically drop any conflicting schemas that already exist with the same RCU prefix prior to creating the new schemas!\nIt is also possible to specify the connection information in the model instead of using the command-line arguments. This is especially easier for databases that require a complex database connection string and extra parameters, such as RAC or Oracle Autonomous Transaction Processing Cloud Service database. For information on how to use it, refer to Specifying RCU connection information in the model.\nTo create more complex domains, it may be necessary to create a custom domain type. This is useful for cases where the domain has custom templates, or templates for other Oracle products. For more information, refer to Domain type definitions.\nUsing an encrypted model If the model or variables file contains passwords encrypted with the WDT Encryption tool, decrypt the passwords during creation with the -use_encryption flag on the command line to tell the Create Domain Tool that encryption is being used and to prompt for the encryption passphrase. As with the database passwords, the tool can also read the passphrase from standard input (for example, stdin) to allow the tool to run without any user input. You can bypass the stdin prompt with two other options: store the passphrase in an environment variable, and use the environment variable name with the command-line option -passphrase_env or create a file with the single value of the passphrase. Provide the name of the file with the command-line option -passphrase_file. The passphrase will be read by the tool from the file.\nUsing multiple models The Create Domain Tool supports the use of multiple models, as described in Using multiple models.\nDevelopment domain and boot.properties When creating a development domain, WDT provides the convenience of making a boot.properties file for each of the servers in the domain. The boot.properties file will contain encrypted values of the Administration Server user name and password. When the Administration Server or Managed Server is started, WebLogic Server will bypass the prompt for credentials, and instead use the credentials from the boot.properties file.\nA domain is in production mode if the ServerStartMode option is set to prod or the domain ProductionModeEnabled is set to true. The default value for both of these attributes is development mode.\nThe boot.properties file is stored in the domain home on the machine where WDT runs. It is stored for each server as \u0026lt;domain_home\u0026gt;/servers/\u0026lt;server_name\u0026gt;/security/boot.properties.\nThe following is a model example with both attributes explicitly set to development mode.\ndomainInfo: AdminUserName: weblogic AdminPassword: welcome1 ServerStartMode: dev topology: Name: my-domain AdminServerName: admin-server ProductionModeEnabled: false Parameter table for createDomain    Parameter Definition Default     -archive_file The path to the archive file to use. If the -model_file argument is not specified, the model file in this archive will be used. This can also be specified as a comma-separated list of archive files. The overlapping contents in each archive take precedence over previous archives in the list.    -domain_home Required if -domain_parent is not used. The full directory and name where the domain should be created.    -domain_parent Required if -domain_home is not used. The parent directory where the domain should be created. The name is the domain name in the model.    -domain_type The type of domain (for example, WLS, JRF). WLS   -java_home The Java home to use for the new domain. If not specified, it defaults to the value of the JAVA_HOME environment variable.    -model_file The location of the model file. This can also be specified as a comma-separated list of model locations, where each successive model layers on top of the previous ones.    -oracle_home Home directory of the Oracle WebLogic installation. Required if the ORACLE_HOME environment variable is not set.    -opss_wallet The location of the Oracle wallet containing the domain\u0026rsquo;s encryption key required to reconnect to an existing set of RCU schemas.    -opss_wallet_passphrase_env An alternative to entering the OPSS wallet passphrase at a prompt. The value is an environment variable name that WDT will use to retrieve the passphrase.    -opss_wallet_passphrase_file An alternative to entering the OPSS wallet passphrase at a prompt. The value is the name of a file with a string value which WDT will read to retrieve the passphrase.    -passphrase_env An alternative to entering the encryption passphrase at a prompt. The value is an environment variable name that WDT will use to retrieve the passphrase.    -passphrase_file An alternative to entering the encryption passphrase at a prompt. The value is the name of a file with a string value which WDT will read to retrieve the passphrase.    -rcu_db (deprecated) The RCU database connect string.    -rcu_prefix (deprecated) The RCU prefix to use.    -rcu_db_user (deprecated) The RCU dbUser to use. sys   -run_rcu Run RCU to create the database schemas specified by the domain type using the specified RCU prefix. Running RCU will drop any existing schemas with the same RCU prefix if they exist prior to trying to create them.    -use_encryption One or more of the passwords in the model or variables file(s) are encrypted and must be decrypted. Java 8 or later required for this feature.    -variable_file The location of the property file containing the values for variables used in the model. This can also be specified as a comma-separated list of property files, where each successive set of properties layers on top of the previous ones.     "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/adminserver-model/",
	"title": "Customizing the Administration Server",
	"tags": [],
	"description": "Configure the Administration Server using a domain model.",
	"content": "Administration Server configuration The Create Domain Tool lets you configure the Administration Server using a domain model. These examples show how some common configurations can be represented in the model.\nUsing the default Administration Server configuration When the Create Domain Tool is run, the templates associated with your domain type will automatically create an Administration Server named AdminServer, with default values for all the attributes. If you don\u0026rsquo;t need to change any of these attributes, such as ListenAddress or ListenPort, or any of the sub-folders, such as SSL or ServerStart, nothing needs to be added to the model.\nCustomizing the Administration Server configuration To customize the configuration of the default Administration Server, you will need to add a server with the default name AdminServer. Because you are not changing the name of the Administration Server, there is no need to specify the AdminServerName attribute under the topology section. This example shows some attributes and sub-folders:\ntopology: Server: AdminServer: ListenPort: 9071 RestartDelaySeconds: 10 ListenAddress: my-host-1 Log: FileCount: 9 LogFileSeverity: Info FileMinSize: 5000 SSL: HostnameVerificationIgnored: true JSSEEnabled: true ListenPort: 9072 Enabled: true The most common problem with this type of configuration is to misspell the name of the folder under Server, when it should be AdminServer. This will result in the creation of an Administration Server with the default name, and an additional Managed Server with the misspelled name.\nConfiguring the Administration Server with a different name If you want the Administration Server to have a name other than the default AdminServer, you will need to specify that name in the AdminServerName attribute, and use that name in the Server section. This example uses the name my-admin-server:\ntopology: AdminServerName: my-admin-server Server: \u0026#39;my-admin-server\u0026#39;: ListenPort: 9071 RestartDelaySeconds: 10 ListenAddress: my-host-1 Log: FileCount: 9 LogFileSeverity: Info FileMinSize: 5000 SSL: HostnameVerificationIgnored: true JSSEEnabled: true ListenPort: 9072 Enabled: true The most common problem with this type of configuration is to mismatch the AdminServerName attribute with the name in the Server folder. This will change the name of the default Administration Server to the value of AdminServerName, and the folder under Server to be created as an additional Managed Server.\nThe name of the Administration Server cannot be changed after domain creation, so any changes to the AdminServerName attribute will be ignored by the Update Domain Tool.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/install/",
	"title": "Install WDT",
	"tags": [],
	"description": "",
	"content": "Download and install the software The WebLogic Deploy Tooling project repository is located at https://github.com/oracle/weblogic-deploy-tooling.\nYou can download binary distributions of the weblogic-deploy.zip installer from the GitHub Releases page.\n To install the software, simply unzip the weblogic-deploy.zip installer on a machine that has the desired versions of WebLogic Server installed. After being unzipped, the software is ready to use, just set the JAVA_HOME environment variable to point to a Java 7 or higher JDK and the shell scripts are ready to run.  Supported WLS versions The following table specifies the supported WebLogic Server versions, along with the JDK versions, that must be used to run the WDT tool. You must set the JAVA_HOME environment variable to specify a JDK version different from the system default version.\nTo create a domain with the proper JDK (particularly if the JAVA_HOME is different from the one which will be used by the target domain), set the domain JavaHome attribute in the domain model.\nThe Encryption Model Tool used to encrypt and decrypt clear-text passwords in the model and variable files, requires WDT to run with a minimum JDK version of 1.8.\n    WebLogic Server Version Tool JDK Version     10.3.6 1.7   12.1.1 1.7, 1.8   12.1.2 [1][2] 1.7, 1.8   12.1.3 1.7, 1.8   12.2.1 [3] 1.8   12.2.1.1 [4] 1.8   12.2.1.2 1.8   12.2.1.3 1.8   12.2.1.4 [5] 1.8   14.1.1 1.8, 1.11    1 First release dynamic clusters are supported\n2 First release Coherence clusters are supported\n3 First release WLS roles are supported\n4 First release multitenancy is supported\n5 Last release multitenancy is supported\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/concepts/model/",
	"title": "Metadata Model",
	"tags": [],
	"description": "",
	"content": "Contents  Overview Top-level sections Simple example Model names Model tokens Model semantics Declaring named MBeans to delete Using multiple models Upgrading from WDT 1.x to WDT 2.x YAML files  Overview The metadata model (or model, for short) is a version-independent description of a WebLogic Server domain configuration. The tools are designed to support a sparse model so that the model need only describe what is required for the specific operation without describing other artifacts. For example, to deploy an application that depends on a JDBC data source into an existing domain that may contain other applications or data sources, the model needs to describe only the application and the data source in question. If the data source was previously created, the deployApps tool will not try to recreate it but may update part of that data source\u0026rsquo;s configuration if the model description is different from the existing values. If the application was previously deployed, the deployApps tool will compare the binaries to determine if the application needs to be redeployed or not.\nThe model structure, and its folder and attribute names, are based on the WLST 12.2.1.3 offline structure and names with redundant folders removed to keep the model simple. For example, the WLST path to the URL for a JDBC data source is /JDBCSystemResource/\u0026lt;data-source-name\u0026gt;/JdbcResource/\u0026lt;data-source-name\u0026gt;/JDBCDriverParams/NO_NAME_0/URL. In the model, it is resources:/JDBCSystemResource/\u0026lt;data-source-name\u0026gt;/JdbcResource/JDBCDriverParams/URL (where resources is the top-level model section where all WebLogic Server resources/services are described).\nThe model is written in YAML (or optionally, JSON). The YAML parser, based on Snake YAML, is strict with regard to the specification and is fully YAML 1.1 compliant. For example, YAML does not support tabs as indent characters so the parser will generate parse errors if the model file contains leading tabs used for indentation purposes. In general, names and values can be specified without quotes except when the content contains one of the restricted characters in a location that causes the YAML parser to consider it to be a markup character instead of text. For example, a key may contain an embedded hyphen without needing to be quoted; however, if the key starts with a hyphen, the parser may consider it to be the start of a YAML list element. See the YAML 1.1 specification for more information.\nTop-level model sections The tooling has five top-level model sections:\n domainInfo - The location where special information not represented in WLST is specified (for example, the libraries that go in $DOMAIN_HOME/lib). topology - The location where servers, clusters, machines, server templates, and other domain-level configuration is specified. resources - The location where resources and services are specified (for example, data sources, JMS, WLDF). appDeployments - The location where shared libraries and applications are specified. kubernetes - The location where the WebLogic Kubernetes Operator domain configuration is specified. verrazzano - The location where the Verrazzano WebLogic Workload component and application configuration is specified.  Simple example Here is a simple example of a model to deploy an application and its data source:\nresources: JDBCSystemResource: MyDataSource: Target: \u0026#39;@@PROP:myjcs.cluster1.name@@\u0026#39; JdbcResource: JDBCDataSourceParams: JNDIName: jdbc/generic1 JDBCDriverParams: DriverName: oracle.jdbc.OracleDriver URL: jdbc:oracle:thin:@//@@PROP:dbcs1.url@@ PasswordEncrypted: \u0026#39;@@PROP:dbcs1.password@@\u0026#39; Properties: user: Value: \u0026#39;@@PROP:dbcs1.user@@\u0026#39; oracle.net.CONNECT_TIMEOUT: Value: 5000 JDBCConnectionPoolParams: MaxCapacity: 50 appDeployments: Application: simpleear : SourcePath: wlsdeploy/applications/simpleear.ear Target: \u0026#39;@@PROP:myjcs.cluster1.name@@\u0026#39; ModuleType: ear Library: \u0026#39;jsf#2.0\u0026#39;: SourcePath: \u0026#39;@@WL_HOME@@/common/deployable-libraries/jsf-2.0.war\u0026#39; Target: \u0026#39;@@PROP:myjcs.cluster1.name@@\u0026#39; ModuleType: war The above example shows two important features of the framework. First, notice that the URL, PasswordEncrypted, user property Value and all Target fields contain values that have a @@PROP:\u0026lt;name\u0026gt;@@ pattern. This indicates a variable placeholder whose value is specified at runtime using a variables file. For more information about this and other token types, see Model tokens.\nSecond, notice that the jsf#2.0 shared library SourcePath attribute value starts with @@WL_HOME@@. This is a path token that can be used to specify that the location is relative to the location of the WebLogic Server home directory on the target environment. For more information and a list of available path tokens, see Model tokens.\nThe example above shows the attribute SourcePath of the simpleear application with a value of wlsdeploy/applications/simpleear.ear. The prefix wlsdeploy/ indicates that the resource is located in the archive file in the specified location, and will be deployed to that directory within the domain, in this case \u0026lt;domain-home\u0026gt;/wlsdeploy/applications/simpleear.ear. See the Archive file for more details about using the archive file.\nUsers can create further directory structures underneath the above locations to organize the files and directories as they see fit. Note that any binary that already exists on the target system need not be included in the archive provided that the model specified the correct location on the target system.\nOne final note is that the framework is written in such a way to allow the model to be extended for use by other tools. Adding other top-level sections to the model is supported and the existing tooling and framework will simply ignore them, if present. For example, it would be possible to add a soaComposites section to the model where SOA composite applications are described, and a location within the archive file where those binaries can be stored, so that a tool that understands SOA composites and how to deploy them could be run against the same model and archive files.\nModel names The WebLogic Deploy Tooling handles names of WebLogic Server configuration artifacts in a very prescribed way. To understand how names are handled, users first need a basic understanding of WLST offline naming. In WLST offline, there are two general categories of configuration artifacts:\n Artifacts that can hold zero or more references to another configuration artifact type. Artifacts that can hold zero or one reference to another configuration artifact.  For example, a domain can contain zero or more JDBCSystemResource or AppDeployment instances but can only contain a single SecurityConfiguration artifact. When working with configuration artifacts like JDBCSystemResource, the name is always modeled as a sub-element of the JDBCSystemResource element, as shown below.\nresources: JDBCSystemResource: MyDataSource: Target: mycluster ... YourDataSource: Target: yourcluster ... In the example above, the model has two instances of JDBCSystemResource: one named MyDataSource and one named YourDataSource. For anyone familiar with WLST, this should seem somewhat familiar because the WLST offline path to the MyDataSource configuration will always start with /JDBCSystemResource/MyDataSource. What might not seem familiar is that in this WLST folder, there is a Name attribute that is also set to MyDataSource. The WebLogic Deploy Tooling requires that modelers set the JDBCSystemRTesource name using the folder semantics as shown in the example. It is not possible to set the Name using the Name attribute inside the folder and any attempts to do so, will not work; in this case, the Name attribute is redundant because the name was already specified as the folder name.\nWhen working with artifacts like SecurityConfiguration or JMX, there is never more than one instance of these artifacts in a domain because they are just configuration containers and their names generally have no semantic meaning. As such, the WebLogic Deploy Tooling does not expose these names in the model, as shown below:\ntopology: SecurityConfiguration: NodeManagerUsername: weblogic NodeManagerPasswordEncrypted: welcome1 As the example above shows, the SecurityConfiguration element has no named sub-element, as there is with JDBCSystemResource, even though the WLST path to the SecurityConfiguration attributes is /SecurityConfiguration/\u0026lt;domain-name\u0026gt;. The WebLogic Deploy Tooling has built-in rules and a knowledge base that controls how these names are handled so that it can complete the configuration of these artifacts. As with the previous class of configuration artifact, the folder almost always contains a  Name attribute that, in WLST, could be used to change the name. As with the previous class of artifact, the WebLogic Deploy Tooling does not support the use of the Name attribute in these folders and any attempt to set the Name attribute will not be honored. In general, the only model location that uses the Name attribute is the top-level topology section, because this maps to where WLST stores the domain name.\nModel tokens The model allows the use of tokens that are substituted with text values as the model is processed. This section describes several types of tokens.\nVariable tokens are declared with the syntax @@PROP:\u0026lt;variable\u0026gt;@@. This type of token represents a value that is resolved at runtime using a variables file in a standard Java properties file format. Variables can be used for any value and for some names. For example, to automate standing up an environment with one or more applications in the Oracle Java Cloud Service, service provisioning does not allow the provisioning script to specify the server names. For example, if the application being deployed immediately following provisioning needs to tweak the Server Start arguments to specify a Java system property, the model can use a variable placeholder in place of the server name and populate the variable file with the provisioned server names dynamically between provisioning and application deployment.\nFile tokens are declared with the syntax @@FILE:\u0026lt;filename\u0026gt;@@. This type of token is similar to a variable token, but it references a single value that is read from the specified file. For example, the model may reference a password attribute as follows:\nPasswordEncrypted: \u0026#39;@@FILE:/home/me/dbcs1.txt@@\u0026#39; The file /home/me/dbcs1.txt would then contain this single line:\npassword#123 As the model is processed, the value for the PasswordEncrypted would resolve to password#123. It is also possible to combine file placeholders with other types of tokens, to allow for variations in the name and location of the file, such as:\nPasswordEncrypted: \u0026#39;@@FILE:/dir/@@PROP:name@@.txt@@\u0026#39; PasswordEncrypted: \u0026#39;@@FILE:@@ORACLE_HOME@@/dir/name.txt@@\u0026#39; Environment tokens are declared with the syntax @@ENV:\u0026lt;name\u0026gt;@@. This type of token is resolved by looking up the system environment variable \u0026lt;name\u0026gt;, and substituting that value for the token.\nSecret tokens are declared with the syntax @@SECRET:\u0026lt;name\u0026gt;:\u0026lt;key\u0026gt;@@. This type of token is resolved by determining the location of a Kubernetes secret file, and reading the first line from that file. That line is substituted for the token.\nThere are two methods for deriving the location of the Kubernetes secret file. The first method involves using one or more configured root directories, and looking for the secret file in the path \u0026lt;root-directory\u0026gt;/\u0026lt;name\u0026gt;/\u0026lt;key\u0026gt;.\nThe root directories are configured as a comma-separated list of directories, using the environment variable WDT_MODEL_SECRETS_DIRS. For example, if WDT_MODEL_SECRETS_DIRS is set to /etc/my-secrets,/etc/your-secrets, then the token @@SECRET:secrets:the-secret@@ will search the following locations:\n/etc/my-secrets/secrets/the-secret /etc/your-secrets/secrets/the-secret If either of these files is found, the secret is read from that file and substituted in the model.\nThe second method for locating the Kubernetes secret file is to use the environment variable WDT_MODEL_SECRETS_NAME_DIR_PAIRS to map \u0026lt;name\u0026gt; values to specific directory locations. For example, if WDT_MODEL_SECRETS_NAME_DIR_PAIRS is set to my-root=/etc/my-secrets,your-root=/etc/your-secrets, then the token @@SECRET:your-root:the-secret@@ will look for the secrets file at:\n/etc/your-secrets/the-secret If the \u0026lt;name\u0026gt; value has a corresponding mapped directory in WDT_MODEL_SECRETS_NAME_DIR_PAIRS, then that directory will take precedence over any roots specified in WDT_MODEL_SECRETS_DIRS.\nIt is important that the secrets directories contain only secrets files, because those files are examined to create a list of available name/key pairs.\n Path tokens are tokens that reference known values, and can be used to make the model more portable. For example, a model may reference a WebLogic library source path as:\nSourcePath: \u0026#39;@@WL_HOME@@/common/deployable-libraries/jsf-2.0.war\u0026#39; Using the path token @@WL_HOME@@ allows the model to be used across multiple environments, even if the WebLogic installation directory is different. Path tokens can be used at any location in the model that specifies a file or directory location. The supported tokens are:\n @@ORACLE_HOME@@ - The location where WebLogic Server and any other FMW products are installed (in older versions, this was known as the MW_HOME). @@WL_HOME@@ - The location within the Oracle Home where WebLogic Server is installed (for example, the $ORACLE_HOME/wlserver directory in 12.1.2+). @@DOMAIN_HOME@@ - The location of the domain home directory on which the tool is working. @@PWD@@ - The current working directory from which the tool was invoked. @@TMP@@ - The location of the temporary directory, as controlled by the java.io.tmpdir system property.  Model semantics When modeling configuration attributes that can have multiple values, the WebLogic Deploy Tooling tries to make this as painless as possible. For example, the Target attribute on resources can have zero or more clusters and/or servers specified. When specifying the value of such list attributes, the user has freedom to specify them as a list or as a comma-delimited string (comma is the only recognized delimiter for lists). For attributes where the values can legally contain commas, the items must be specified as a list. Examples of each are shown below.\nresources: JDBCSystemResource: MyStringDataSource: Target: AdminServer,mycluster JdbcResource: JDBCDataSourceParams: JNDIName: jdbc/generic1, jdbc/special1 ... MyListDataSource: Target: [ AdminServer, mycluster ] JdbcResource: JDBCDataSourceParams: JNDIName: [ jdbc/generic2, jdbc/special2 ] ... WLDFSystemResource: MyWldfModule: Target: mycluster WLDFResource: Harvester: HarvestedType: weblogic.management.runtime.ServerRuntimeMBean: Enabled: true HarvestedInstance: [ \u0026#39;com.bea:Name=AdminServer,Type=ServerRuntime\u0026#39;, \u0026#39;com.bea:Name=m1,Type=ServerRuntime\u0026#39; ] ... In the example above, the Target attribute is specified three different ways, as a comma-separated string, as a list, and as a single string in the case of where there is only a single target. The JNDIName attribute is specified as a comma-separated string and as a list (a single string also works). On the other hand, the HarvestedInstances attribute had to be specified as a list because each element contains commas.\nOne of the primary goals of the WebLogic Deploy Tooling is to support a sparse model where the user can specify just the configuration needed for a particular situation. What this implies varies somewhat between the tools but, in general, this implies that the tools are using an additive model. That is, the tools add to what is already there in the existing domain or domain templates (when creating a new domain) rather than making the domain conform exactly to the specified model. Where it makes sense, a similar, additive approach is taken when setting the value of multi-valued attributes. For example, if the model specified the cluster mycluster as the target for an artifact, the tooling will add mycluster to any existing list of targets for the artifact. While the development team has tried to mark attributes that do not make sense to merge accordingly in our knowledge base, this behavior can be disabled on an attribute-by-attribute basis, by adding an additional annotation in the knowledge base data files. The development team is already thinking about how to handle situations that require a non-additive, converge-to-the-model approach, and how that might be supported, but this still remains a wish list item. Users with these requirements should raise an issue for this support.\nDeclaring named MBeans to delete With WebLogic Deploy Tooling, you can specify named items in the model to be deleted using the Create Domain, Update Domain, and Deploy Applications Tools. Named items are those that have multiple instances that are distinguished by user-provided names, such as managed servers, data sources, and security realms. Items to be deleted are prepended with an exclamation point (!) in the model.\nIn this example, the managed server obsoleteServer will be deleted, and newServer will be created:\nNote that the exclamation point, along with the name, should be inside quotation marks:\nServer: \u0026#39;!obsoleteServer\u0026#39;: newServer: ListenAddress: 127.0.0.1 ListenPort: 9005 This feature can also remove items that were created by WebLogic Server templates. For example, the base template creates a default security realm called myrealm. If a user chooses to declare a custom realm, myrealm is no longer needed. In this example, myrealm will be deleted, and the custom realm newrealm will be created, and declared as the default realm:\nSecurityConfiguration: DefaultRealm: newrealm Realm: \u0026#39;!myrealm\u0026#39;: newrealm: AuthenticationProvider: ... This feature does not apply to named security providers within a realm. These items follow a special set of rules that are required to maintain their ordering. See Modeling security providers for detailed information.\nThis feature can be used to undeploy applications or remove libraries.\nDeclaring list items to delete In addition to deleting named mbeans, you can remove items from a list. Most practically, this would be within a Target list.\nJMSSystemResource: BPMJMSModule: Target: soa_cluster,\u0026#39;!AdminServer\u0026#39; In this example, the BPMJMSModule has the AdminServer target removed from the target list.\nUsing multiple models The Create Domain, Update Domain, Deploy Applications, and Validate Model Tools allow the specification of multiple models on the command line. For example:\n$ weblogic-deploy\\bin\\createDomain.cmd -model_file modelOne,modelTwo,modelThree ...  In this case, the models are merged into a single model before being applied. Each successive model is added to the previous model. In cases where entities exist in both models, the attributes are combined and attribute values from successive models prevail. The resulting model is then verified before being applied. For example, if Model 1 looks like:\ntopology: Server: m1: ListenPort: 7000 Notes: Server 1 m2: ListenPort: 9000 and Model 2 looks like:\ntopology: Server: m1: ListenAddress: myhostname ListenPort: 8000 m3: ListenPort: 10000 The attributes for server m1 are merged, server m2 is left unchanged, and server m3 is added. The resulting model would be:\ntopology: Server: m1: ListenAddress: myhostname ListenPort: 8000 Notes: Server 1 m2: ListenPort: 9000 m3: ListenPort: 10000 If variable properties are used in element names, such as @@PROP:my-server@@, the names in both models will be resolved and matching elements will be merged.\nMultiple models and delete notation A named element using delete notation will completely delete an element with a matching name and no delete notation in a previous model. For example, if Model 1 looks like:\ntopology: Server: m1: ListenPort: 7000 Notes: Server 1 m2: ListenPort: 9000 and Model 2 looks like:\ntopology: Server: \u0026#39;!m2\u0026#39;: The resulting model would be:\ntopology: Server: m1: ListenPort: 7000 Notes: Server 1 Similarly, an element without delete notation will completely replace an element with a matching name that has delete notation in a previous model. For example, if Model 1 looks like:\ntopology: Server: \u0026#39;!m1\u0026#39;: and Model 2 looks like:\ntopology: Server: m1: ListenPort: 7000 Notes: Server 1 The resulting model would be:\ntopology: Server: m1: ListenPort: 7000 Notes: Server 1 Upgrading from WDT 1.x to WDT 2.x YAML files Beginning in 2.0, WebLogic Deploy Tooling now incorporates the SnakeYAML parser for reading and writing model files. This may require some changes to existing models in order to be parsed correctly.\n Model elements that use delete notation need to be escaped in single or double quotation marks.  topology: Server: \u0026#39;!ms1\u0026#39;: ms2:  Model elements under the same parent should be indented to the exact same level. The previous YAML parser did not enforce this restriction, but it is standard for YAML. In this example, each cluster is indented four spaces.  topology: Cluster: cluster1: ClientCertProxyEnabled: True cluster2: WeblogicPluginEnabled: true   Object lists in the kubernetes section of the model now should be specified in a hyphenated list format, similar to how they appear in the domain resource file produced for\n  WebLogic Kubernetes Operator.\nclusters: - clusterName: \u0026#39;cluster1\u0026#39; allowReplicasBelowMinDynClusterSize: true - clusterName: \u0026#39;cluster2\u0026#39; allowReplicasBelowMinDynClusterSize: true  The \u0026ldquo;named object list\u0026rdquo; format is deprecated now, and will cause warning messages to be displayed.  clusters: \u0026#39;cluster1\u0026#39;: allowReplicasBelowMinDynClusterSize: true \u0026#39;cluster2\u0026#39;: allowReplicasBelowMinDynClusterSize: true   The deprecated argument -model_sample has been removed from the Model Help Tool. The Model Help Tool has used model sample format, by default, since release 1.9.2.\n  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/model_filters/",
	"title": "Model filters",
	"tags": [],
	"description": "",
	"content": "WebLogic Deploy Tooling supports the use of model filters to manipulate the domain model. The Create Domain, Update Domain, and Deploy Applications Tools apply filters to the model after it is read, before it is validated and applied to the domain. The Discover Domain Tool applies filters to the model after it has been discovered, before the model is validated and written.\nModel filters are written in Jython, and must be compatible with the version used in the corresponding version of WLST. A filter must implement the method filter_model(model), which accepts as a single argument the domain model as a Jython dictionary. This method can make any adjustments to the domain model that are required. Filters can be stored in any directory, as long as they can be accessed by WebLogic Deploy Tooling.\nThe following filter example (fix-password.py) sets the password for two attributes in the SecurityConfiguration WLST folder.\ndef filter_model(model): if model and \u0026#39;topology\u0026#39; in model: if \u0026#39;SecurityConfiguration\u0026#39; in model[\u0026#39;topology\u0026#39;]: model[\u0026#39;topology\u0026#39;][\u0026#39;SecurityConfiguration\u0026#39;][\u0026#39;CredentialEncrypted\u0026#39;] = \u0026#39;welcome1\u0026#39; model[\u0026#39;topology\u0026#39;][\u0026#39;SecurityConfiguration\u0026#39;][\u0026#39;NodeManagerPasswordEncrypted\u0026#39;] = \u0026#39;welcome1\u0026#39; print \u0026#39;Replaced SecurityConfiguration password\u0026#39; else: print \u0026#39;SecurityConfiguration not in the model\u0026#39; Model filters are configured by creating a model_filters.json file in the WLSDEPLOY_HOME/lib directory. This file has separate sections for filters to be applied for specific tools.\nAnother option is to configure model filters in a Custom configuration directory. Create the model_filters.json file in the $WDT_CUSTOM_CONFIG directory.\nThis example configures two filters for the Create Domain Tool: fix-password.py and no-mail.py, and one filter for the Discover Domain tool.\n{ \u0026#34;create\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;fixPassword\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/home/user/fix-password.py\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;noMail\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/home/user/no-mail.py\u0026#34; } ], \u0026#34;deploy\u0026#34;: [ ], \u0026#34;discover\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;noMail\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/home/user/no-mail.py\u0026#34; } ], \u0026#34;update\u0026#34;: [ ] } Internal Filters Internal filters are provided by WebLogic Deploy Tooling to perform modifications to the domain model. They are referenced by ID in the target configuration file. This example shows the use of the internal filter wko_filter and a user-defined filter fix-password for use with the Create Domain Tool.\n{ \u0026#34;create\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;fixPassword\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/home/user/fix-password.py\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;wko_filter\u0026#34; } ] } Internal filters cannot be copied or modified like other types of filters.\nInternal filter wko_filter This filter prepares the domain model for use with WebLogic Kubernetes Operator. It performs the following modifications:\n Removes any attributes that can only be deployed in online mode Sets the CalculatedListenPorts attribute to false for dynamic clusters Warns if servers in a static cluster have different listen ports  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/project-structure/",
	"title": "Project structure",
	"tags": [],
	"description": "",
	"content": "This project is structured using the Standard Directory Layout for Maven projects, with two child modules, core, alias-test, system-test, and installer. In addition, there is a documentation directory containing project documentation.\nThe core module contains the main source code for the project. core includes Jython modules and Java classes, as well as typedef files, alias definitions, and the message bundle.\nThe system-test and alias-test modules contain test suites for verifying pull requests and nightly regression testing.\nAlias definitions are discussed in more detail here.\nThe installer module builds the final installer ZIP file. installer includes the assembly definitions, start scripts for each tool for Linux and Windows platforms, and configurations for variable injection and logging.\nTwo installer files are built under the WLSDEPLOY_HOME/installer/target directory, one ZIP file for all platforms, and one tar.gz file for those that prefer the tar.gz format on UNIX systems.\nThere are detailed instructions for building the project here.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": "Concepts "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/",
	"title": "WDT Tools",
	"tags": [],
	"description": "",
	"content": "  Create Domain Tool  Creates a domain and populates the domain with all the resources and applications specified in the model.\n Update Domain Tool  Updates an existing domain and populates the domain with all the resources and applications specified in the model, either in offline or online mode.\n Deploy Applications Tool  Adds resources and applications to an existing domain, either in offline or online mode.\n Discover Domain Tool  Introspects an existing domain and creates a model file describing the domain and an archive file of the binaries deployed to the domain.\n Encrypt Model Tool  Encrypts the passwords in a model (or its variable file) using a user-provided passphrase.\n Validate Model Tool  Provides both standalone validation of a model as well as model usage information to help users write or edit their models.\n Compare Model Tool  Compares two model files.\n Prepare Model Tool  Prepares model files for deploying to WebLogic Kubernetes Operator environment.\n Extract Domain Resource Tool  Generates YAML resource files for use with the WebLogic Kubernetes Operator or Verrazzano.\n Variable Injector Tool  Adds token to a model with variables.\n Model Help Tool  Provides information about the folders and attributes that are valid for sections and folders of a domain model.\n Archive Helper Tool  Helps you create and modify archive files.\n "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/concepts/archive/",
	"title": "Archive File",
	"tags": [],
	"description": "",
	"content": "The archive file is used to deploy binaries and other file resources to the target domain. The archive is a ZIP file with a specific directory structure. Any file resources referenced in the model that are not already on the target system must be stored in the correct location in the archive, and the model must reflect the path into the archive.\nNote that file resources that already exist on the target system need not be included in the archive, provided that the model specifies the correct location on the target system.\nContents  Example Archive structure Using multiple archive files  Example This example shows an application with a SourcePath value referencing an EAR file resource contained in the archive.\nappDeployments: Application: simpleear: SourcePath: wlsdeploy/applications/simpleear.ear Target: my-cluster ModuleType: ear The example shows the attribute SourcePath of the simpleear application with a value of wlsdeploy/applications/simpleear.ear. The prefix wlsdeploy/ indicates that the resource is located in the archive file in the specified location, and will be deployed to that directory in the domain, in this case \u0026lt;domain-home\u0026gt;/wlsdeploy/applications/simpleear.ear.\nArchive structure These are the paths within the archive that are used for different types of resources. You can create further directory structures underneath some of these locations to organize the files and directories as you see fit. The Archive Helper Tool makes it easy to add, update, and remove entries from the archive file.\nwlsdeploy/applications The root directory under which applications and their deployment plans are stored. Applications can be stored in the archive as EAR, WAR, or JAR files, or as an exploded directory at this location.\nA sample expanded WAR application might have these entries:\nwlsdeploy/applications/myApp/index.jsp wlsdeploy/applications/myApp/META-INF/MANIFEST.MF wlsdeploy/applications/myApp/WEB-INF/classes/MyClass.class wlsdeploy/applications/myApp/WEB-INF/web.xml wlsdeploy/applications/myApp/WEB-INF/weblogic.xml wlsdeploy/classpathLibraries The root directory under which JARs/directories used for server classpaths are stored. Every file resource under this directory is extracted, even those not referenced in the model.\nwlsdeploy/coherence The root directory under which Coherence config files and/or empty directories for Coherence persistent stores.\nwlsdeploy/config The directory where a MIME mapping property file can be stored.\nwlsdeploy/custom This is the root directory where your custom files and directories can be stored and extracted from the archive. These files are not collected by the Discover Domain Tool. Every file resource under this directory is extracted during createDomain and updateDomain.\nThis location is particularly useful when handling files that live outside an application; for example, a property file used to configure the application. The general steps to make applications that use such files work when provisioning them with WDT are:\n Place the file in the required location inside the wlsdeploy/custom folder inside the archive; for example, wlsdeploy/custom/com/mycompany/myapp/myapp-config.properties. Make sure the application is locating the file by CLASSPATH; for example, using ClassLoader.getResourceAsStream(\u0026quot;com/mycompany/myapp/myapp-config.properties\u0026quot;). Make sure that the server\u0026rsquo;s CLASSPATH includes the $DOMAIN_HOME/wlsdeploy/custom directory. One way to achieve this would be to add a setUserOverrides.sh that includes this directory in the PRE_CLASSPATH environment variable to the wlsdeploy/domainBin location in the archive file. Don\u0026rsquo;t forget to add setUserOverrides.sh to the domainInfo/domainBin of the model so that it gets extracted.  wlsdeploy/dbWallets/\u0026lt;wallet-name\u0026gt; The directory where named database wallets can be stored for use with the Oracle database. The rcu name is used as the default location to store a wallet for RCU data sources. The wallet placed into the archive can be either a ZIP file or a set of one or more files. If it is a ZIP file, that ZIP file will be expanded in place when running WDT tools like the Create Domain or Update Domain tools.\nwlsdeploy/domainBin The root directory under which $DOMAIN_HOME/bin scripts are stored. Only scripts referenced in the domainInfo/domainBin section of the model are extracted, as shown in the example.\ndomainInfo: domainBin: - wlsdeploy/domainBin/setUserOverrides.sh wlsdeploy/domainLibraries The root directory under which $DOMAIN_HOME/lib libraries are stored. Domain libraries must be stored as JAR files. Only libraries referenced in the domainInfo/domainLibraries section of the model are extracted, as shown in the example.\ndomainInfo: domainLibraries: - wlsdeploy/domainLibraries/myLibrary.jar wlsdeploy/jms/foreignServer/\u0026lt;jms-foreign-server-name\u0026gt; The directory under which a JMS Foreign Server binding file is stored.\nwlsdeploy/nodeManager The root directory under which Node Manager keystore files are stored.\nwlsdeploy/opsswallet The directory where a wallet can be stored for use with Oracle Platform Security Services. The wallet placed into the archive can be either a ZIP file or a set of one or more files. If it is a ZIP file, that ZIP file will be expanded in place when running WDT tools like the Create Domain or Update Domain tools.\nwlsdeploy/scripts The root directory under which script files are stored. These can include JDBC create scripts and WLDF action scripts.\nwlsdeploy/security/saml2 The directory under which initialization files can be stored for use with the SAML2 Identity Asserter. These files can include saml2idppartner.properties and saml2sppartner.properties, and any XML metadata files they reference. These files are added to the archive by the Discover Domain Tool, and extracted by the Create Domain and Update Domain Tools.\nInitialization files and their metadata files are not deployed if a corresponding \u0026lt;filename\u0026gt;.initialized file is present in the domain\u0026rsquo;s \u0026lt;domain\u0026gt;/security directory. This indicates that existing initialization files have already been processed. To overwrite an existing initialization file, remove the corresponding \u0026lt;filename\u0026gt;.initialized file, and restart the server to reinitialize the SAML2 Identity Asserter.\nwlsdeploy/servers/\u0026lt;server-name\u0026gt; The root directory under which server keystore files are stored. These are organized by server name, such as wlsdeploy/server/AdminServer/mykey.jks.\nwlsdeploy/sharedLibraries The root directory under which shared libraries and their deployment plans are stored. Shared libraries can be stored in the archive as EAR, WAR, or JAR files, or as an exploded directory at this location.\nwlsdeploy/stores The root directory under which empty directories must exist for FileStore elements in the model.\nwlsdeploy/structuredApplications The root directory under which \u0026ldquo;structured\u0026rdquo; applications are stored; the WebLogic Server documentation refers to them as application installation directories. Applications inside the specified directory structure can be stored in the archive as EAR or WAR files, or as an exploded directory.\nA sample \u0026ldquo;structured\u0026rdquo; application might have these entries:\nwlsdeploy/structuredApplications/myApp/app/webapp.war wlsdeploy/structuredApplications/myApp/plan/plan.xml wlsdeploy/structuredApplications/myApp/plan/WEB-INF/weblogic.xml wlsdeploy/structuredApplications/myApp/plan/AppFileOverrides/updated.properties Using multiple archive files The Create Domain, Update Domain, Deploy Applications, and Validate Model Tools allow the specification of multiple archive files on the command line. For example:\n$ weblogic-deploy\\bin\\createDomain.cmd -archive_file one.zip,two.zip,three.zip ...  File resources can be present in any of these archives. Resources in each archive will supersede resources found in previous archives.\nWhen the model references a resource that is present in multiple archives, the latest in the list takes precedence. For example, if the model references wlsdeploy/applications/myapp.ear, and that resource is present in archives one.zip and two.zip, the resource in two.zip will be used.\nA similar rule applies for resources that have an assumed location, but are not specifically called out in the model. For example, if archive two.zip has a wallet in location atpwallet/wallet2.zip, and three.zip has a wallet in location atpwallet/wallet3.zip, the wallet atpwallet/wallet3.zip will be used.\nResources that are extracted without being referenced directly are extracted from the archives in the order specified in the archive_file argument. For example, if one.zip and two.zip have resources under wlsdeploy/classpathLibraries, the resources in one.zip will be extracted to \u0026lt;domain-home\u0026gt;/wlsdeploy/classpathLibraries, then the resources of two.zip will be extracted to the same location, overwriting any overlapping files.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/domain_def/",
	"title": "Domain type definitions",
	"tags": [],
	"description": "",
	"content": "WebLogic Deploy Tooling has an extensible domain type system. The three built-in domain types (WLS, RestrictedJRF, and JRF) are defined in JSON files of the same name in the WLSDEPLOY_HOME/lib/typedefs directory. For example, the JRF domain type is defined in the WLSDEPLOY_HOME/lib/typedefs/JRF.json file with similar content, as shown below.\n{ \u0026#34;copyright\u0026#34;: \u0026#34;Copyright (c) 2017, 2020, Oracle Corporation and/or its affiliates.\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;JRF\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;JRF type domain definitions\u0026#34;, \u0026#34;versions\u0026#34;: { \u0026#34;12.1.2\u0026#34;: \u0026#34;JRF_1212\u0026#34;, \u0026#34;12.1.3\u0026#34;: \u0026#34;JRF_1213\u0026#34;, \u0026#34;12.2.1.0\u0026#34;: \u0026#34;JRF_12CR2\u0026#34;, \u0026#34;12.2.1.1\u0026#34;: \u0026#34;JRF_12C_DYN\u0026#34;, \u0026#34;12.2.1.2\u0026#34;: \u0026#34;JRF_12C_DYN\u0026#34;, \u0026#34;12.2.1.3\u0026#34;: \u0026#34;JRF_12C_DYN\u0026#34;, \u0026#34;12.2.1.4\u0026#34;: \u0026#34;JRF_12214\u0026#34; }, \u0026#34;definitions\u0026#34;: { \u0026#34;JRF_1212\u0026#34; : { \u0026#34;baseTemplate\u0026#34;: \u0026#34;@@WL_HOME@@/common/templates/wls/wls.jar\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.jrf_template_12.1.2.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.jrf.ws.async_template_12.1.2.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.wsmpm_template_12.1.2.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/em/common/templates/wls/oracle.em_wls_template_12.1.2.jar\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34; : [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34; ] }, \u0026#34;JRF_1213\u0026#34; : { \u0026#34;baseTemplate\u0026#34;: \u0026#34;@@WL_HOME@@/common/templates/wls/wls.jar\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.jrf_template_12.1.3.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.jrf.ws.async_template_12.1.3.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.wsmpm_template_12.1.3.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/em/common/templates/wls/oracle.em_wls_template_12.1.3.jar\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34; : [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34; ] }, \u0026#34;JRF_12CR2\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;Oracle JRF WebServices Asynchronous services\u0026#34;, \u0026#34;Oracle WSM Policy Manager\u0026#34;, \u0026#34;Oracle Enterprise Manager\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34; ] }, \u0026#34;JRF_12C-DYN\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;Oracle JRF WebServices Asynchronous services\u0026#34;, \u0026#34;Oracle WSM Policy Manager\u0026#34;, \u0026#34;Oracle Enterprise Manager\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34; ], \u0026#34;dynamicClusterServerGroupsToTarget\u0026#34;: [ \u0026#34;WSMPM-DYN-CLUSTER\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;WLS\u0026#34;, \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34; ] }, \u0026#34;JRF_12214\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;Oracle JRF WebServices Asynchronous services\u0026#34;, \u0026#34;Oracle WSM Policy Manager\u0026#34;, \u0026#34;Oracle Enterprise Manager\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34; ], \u0026#34;dynamicClusterServerGroupsToTarget\u0026#34;: [ \u0026#34;WSMPM-DYN-CLUSTER\u0026#34;, \u0026#34;WSM-CACHE-DYN-CLUSTER\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;WLS\u0026#34;, \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34; ] } } } This file tells the Create Domain Tool which templates to use to create the domain, which server groups to target, and even which RCU schemas to create, all based on the installed version of WebLogic Server.\nNew domain types can be defined by creating a new JSON file with the same structure in the WLSDEPLOY_HOME/lib/typedefs directory.\nAnother option is to create this file in the Custom configuration directory $WDT_CUSTOM_CONFIG/typedefs.\nFor example, to define a SOA domain type for 12.2.1.3, add the typedefs/SOA.json file with similar content, as shown below.\n{ \u0026#34;name\u0026#34;: \u0026#34;SOA\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SOA type domain definitions\u0026#34;, \u0026#34;versions\u0026#34;: { \u0026#34;12.2.1.3\u0026#34;: \u0026#34;SOA_12213\u0026#34; }, \u0026#34;definitions\u0026#34;: { \u0026#34;SOA_12213\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;Oracle SOA Suite\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34;, \u0026#34;SOA-MGD-SVRS\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;STB\u0026#34;, \u0026#34;WLS\u0026#34;, \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34;, \u0026#34;UCSUMS\u0026#34;, \u0026#34;SOAINFRA\u0026#34; ] } } } After the new domain typedef file exists, simply specify the new domain type name to the createDomain script, being sure to reference an Oracle Home with the required components installed. For pre-12.2.1 versions, the -wlst_path argument must be used to point to the product home where the appropriate WLST shell script exists; for example, for SOA 12.1.3, add -wlst_path \u0026lt;ORACLE_HOME\u0026gt;/soa so that the tool uses the WLST shell script with the proper environment for SOA domains. In 12.2.1 and later, this is no longer necessary because the WLST shell script in the standard \u0026lt;ORACLE_HOME\u0026gt;oracle_common/common/bin directory will automatically load all components in the Oracle Home. Using the new domain type, simply run the following command to run RCU and create the SOA domain with all of its resources and applications deployed.\n weblogic-deploy\\bin\\createDomain.cmd -oracle_home d:\\SOA12213 -domain_type SOA -domain_parent d:\\demo\\domains -model_file DemoDomain.yaml -archive_file DemoDomain.zip -variable_file DemoDomain.properties -run_rcu  Custom extension templates The customExtensionTemplates attribute can be used to specify custom extension templates to be applied to the domain. These should be specified as absolute file paths, and can use tokens.\n{ \u0026#34;name\u0026#34;: \u0026#34;MyCustom\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;My custom type domain definitions\u0026#34;, \u0026#34;versions\u0026#34;: { \u0026#34;12.2.1.3\u0026#34;: \u0026#34;My_12213\u0026#34; }, \u0026#34;definitions\u0026#34;: { \u0026#34;My_12213\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ ], \u0026#34;customExtensionTemplates\u0026#34;: [ \u0026#34;/user/me/templates/my-template.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/user_templates/other-template.jar\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;MY-MAN-SVR\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ ] } } } If there are any server groups in the custom template that should be targeted to managed servers, they should be specified in the serverGroupsToTarget attribute, similar to MY_MAN_SVR in the example above.\nUsing compact profile The topologyProfile field can be used to create a domain using a specific profile for each of the templates. This partial example will apply the compact profile for each of the specified templates.\n{ \u0026#34;copyright\u0026#34;: \u0026#34;Copyright (c) 2022, Oracle Corporation and/or its affiliates. All rights reserved.\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;JRF-Compact\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;JRF type domain with a compact profile definitions\u0026#34;, \u0026#34;topologyProfile\u0026#34;: \u0026#34;Compact\u0026#34;, ... } WebLogic Deploy Tooling provides the JRF-Compact.json type definition file that can be used to create a JRF domain using the compact profile.\nTargeting in earlier WebLogic Server versions Templates in WebLogic Server versions prior to 12.2.1 may require the use of the applyJRF WLST command to correctly target resources to the correct clusters and servers. The default behavior for WebLogic Deploy Tooling is to invoke applyJRF only when the extensionTemplates list includes JRF templates.\nA custom type definition file can require applyJRF to be invoked after the templates are added. This is done by setting the targeting attribute to APPLY_JRF, as in this example:\n{ \u0026#34;name\u0026#34;: \u0026#34;MyCustom\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;My custom type domain definitions\u0026#34;, \u0026#34;versions\u0026#34;: { \u0026#34;10.3.6\u0026#34;: \u0026#34;My_11G\u0026#34; }, \u0026#34;definitions\u0026#34;: { \u0026#34;My_11G\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;@@WL_HOME@@/common/templates/wls/wls.jar\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;/user/me/templates/my-template.jar\u0026#34; ], \u0026#34;targeting\u0026#34;: \u0026#34;APPLY_JRF\u0026#34;, \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;MY-MAN-SVR\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ ] } } } The targeting attribute is not valid for WebLogic Server versions 12.2.1 and later.\nUsing the typedef file to exclude template installed resources from the model and archive The Discover Domain Tool attempts to provide a sparse model by employing strategies such as not including attributes that are default values. It is important to not install template resources through the model. First, the templates will install the same resources in the target domain. Second, if you install resources from a on-premises domain into a target domain that is a later WebLogic version, it could cause conflicts. The Discover Domain Tool uses the discover-filters section of the typedef file to filter out discovered objects and exclude them from the model and archive files.\nThe list contains an entry for each type of resource to exclude, along with a list of names or regular expressions that are used to match the name of the specified type to exclude.\nThe following example is the discover-filters list in the JRF.json typedef file. Note that the key is the model name starting from the top-level folder (and excluding the grouping construct names topology, resources, and appDeployments).\n\u0026#34;discover-filters\u0026#34;: { \u0026#34;/Application\u0026#34;: [ \u0026#34;^coherence-transaction-rar$\u0026#34;, \u0026#34;^DMS Application.*\u0026#34;, \u0026#34;^em$\u0026#34;, \u0026#34;^FMW Welcome Page Application.*\u0026#34;, \u0026#34;^opss-rest$\u0026#34;, \u0026#34;^state-management-provider-memory-rar.*\u0026#34;, \u0026#34;^wsil-wls.*\u0026#34;, \u0026#34;^wsm-pm$\u0026#34; ], \u0026#34;/CoherenceClusterSystemResource\u0026#34;: [ \u0026#34;^defaultCoherenceCluster$\u0026#34; ], \u0026#34;/JDBCSystemResource\u0026#34;: [ \u0026#34;.*LocalSvcTblDataSource$\u0026#34;, \u0026#34;.*mds-owsm$\u0026#34;, \u0026#34;.*opss-audit-DBDS$\u0026#34;, \u0026#34;.*opss-audit-viewDS$\u0026#34;, \u0026#34;.*opss-data-source$\u0026#34;, \u0026#34;.*opss-ds$\u0026#34;, \u0026#34;.*WLSSchemaDataSource$\u0026#34; ], \u0026#34;/FileStore\u0026#34;: [ \u0026#34;^JRFWSAsyncFileStore$\u0026#34;, \u0026#34;^mds-owsm$\u0026#34; ], \u0026#34;/JMSSystemResource\u0026#34;: [ \u0026#34;^JRFWSAsyncJmsModule$\u0026#34; ], \u0026#34;/JMSServer\u0026#34;: [ \u0026#34;^JRFWSAsyncJmsServer$\u0026#34; ], \u0026#34;/Library\u0026#34;: [ \u0026#34;^adf\\\\.oracle\\\\.businesseditor.*\u0026#34;, \u0026#34;^adf\\\\.oracle\\\\.domain.*\u0026#34;, \u0026#34;^adf\\\\.oracle\\\\.domain\\\\.webapp.*\u0026#34;, \u0026#34;^em_common.*\u0026#34;, \u0026#34;^em_core_ppc_pojo_jar$\u0026#34;, \u0026#34;^em_error.*\u0026#34;, \u0026#34;^em_sdkcore_ppc_public_pojo_jar$\u0026#34;, \u0026#34;^emagentsdk_jar.*\u0026#34;, \u0026#34;^emagentsdkimpl_jar.*\u0026#34;, \u0026#34;^emagentsdkimplpriv_jar.*\u0026#34;, \u0026#34;^emas$\u0026#34;, \u0026#34;^emcore$\u0026#34;, \u0026#34;^emcore_jar$\u0026#34;, \u0026#34;^emcoreclient_jar$\u0026#34;, \u0026#34;^emcorecommon_jar$\u0026#34;, \u0026#34;^emcoreconsole_jar$\u0026#34;, \u0026#34;^emcoreintsdk_jar.*\u0026#34;, \u0026#34;^emcorepbs_jar$\u0026#34;, \u0026#34;^emcoresdk_jar.*\u0026#34;, \u0026#34;^emcoresdkimpl_jar.*\u0026#34;, \u0026#34;^jsf.*\u0026#34;, \u0026#34;^jstl.*\u0026#34;, \u0026#34;^log4j_jar.*\u0026#34;, \u0026#34;^odl\\\\.clickhistory.*\u0026#34;, \u0026#34;^odl\\\\.clickhistory\\\\.webapp.*\u0026#34;, \u0026#34;^ohw-rcf.*\u0026#34;, \u0026#34;^ohw-uix.*\u0026#34;, \u0026#34;^oracle\\\\.adf\\\\.dconfigbeans.*\u0026#34;, \u0026#34;^oracle\\\\.adf\\\\.desktopintegration.*\u0026#34;, \u0026#34;^oracle\\\\.adf\\\\.desktopintegration\\\\.model.*\u0026#34;, \u0026#34;^oracle\\\\.adf\\\\.management.*\u0026#34;, \u0026#34;^oracle\\\\.bi\\\\.adf\\\\.model\\\\.slib.*\u0026#34;, \u0026#34;^oracle\\\\.bi\\\\.adf\\\\.view\\\\.slib.*\u0026#34;, \u0026#34;^oracle\\\\.bi\\\\.adf\\\\.webcenter\\\\.slib.*\u0026#34;, \u0026#34;^oracle\\\\.bi\\\\.composer.*\u0026#34;, \u0026#34;^oracle\\\\.bi\\\\.jbips.*\u0026#34;, \u0026#34;^oracle\\\\.dconfig-infra.*\u0026#34;, \u0026#34;^oracle\\\\.jrf\\\\.system\\\\.filter$\u0026#34;, \u0026#34;^oracle\\\\.jsp\\\\.next.*\u0026#34;, \u0026#34;^oracle\\\\.pwdgen.*\u0026#34;, \u0026#34;^oracle\\\\.sdp\\\\.client.*\u0026#34;, \u0026#34;^oracle\\\\.sdp\\\\.messaging.*\u0026#34;, \u0026#34;^oracle\\\\.webcenter\\\\.composer.*\u0026#34;, \u0026#34;^oracle\\\\.webcenter\\\\.skin.*\u0026#34;, \u0026#34;^oracle\\\\.wsm\\\\.console.*\u0026#34;, \u0026#34;^oracle\\\\.wsm\\\\.idmrest.*\u0026#34;, \u0026#34;^oracle\\\\.wsm\\\\.seedpolicies.*\u0026#34;, \u0026#34;^orai18n-adf.*\u0026#34;, \u0026#34;^owasp\\\\.esapi.*\u0026#34;, \u0026#34;^UIX.*\u0026#34; ], \u0026#34;/ShutdownClass\u0026#34;: [ \u0026#34;^DMSShutdown$\u0026#34;, \u0026#34;^JOC-Shutdown$\u0026#34; ], \u0026#34;/StartupClass\u0026#34;: [ \u0026#34;^JMX Framework Startup Class$\u0026#34;, \u0026#34;^JOC-Startup$\u0026#34;, \u0026#34;^JPS Startup Class$\u0026#34;, \u0026#34;^JPS Startup Post-Activation Class$\u0026#34;, \u0026#34;^WSM Startup Class$\u0026#34;, \u0026#34;^Web Services Startup Class$\u0026#34;, \u0026#34;^JRF Startup Class$\u0026#34;, \u0026#34;^ODL-Startup$\u0026#34;, \u0026#34;^DMS-Startup$\u0026#34;, \u0026#34;^AWT Application Context Startup Class$\u0026#34; ], \u0026#34;/WLDFSystemResource\u0026#34;: [ \u0026#34;^Module-FMWDFW$\u0026#34; ] } This mechanism also supports other named top-level fields; for example, /JDBCStore and /MailSession. It can also be used to exclude self-tuning-related resources that are nested. For example:\n\u0026#34;discover-filters\u0026#34;: { \u0026#34;/SelfTuning/WorkManager\u0026#34;: [ \u0026#34;^wm/SOAWorkManager$\u0026#34;, \u0026#34;^SOA_Default_WM$\u0026#34;, \u0026#34;^SOA_DataSourceBound_WM$\u0026#34;, \u0026#34;^SOA_Notification_WM$\u0026#34;, \u0026#34;^SOA_Request_WM$\u0026#34;, \u0026#34;^SOA_EDN_WM$\u0026#34; ] } "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/feature-impl/",
	"title": "Feature implementation",
	"tags": [],
	"description": "",
	"content": "This document describes how specific features of WebLogic Deploy Tooling are implemented in the source code.\nCreator and Deployer class hierarchies The creation of individual folders and attributes within the topology section of the domain model is accomplished using subclasses of the Jython class Creator, in the module wlsdeploy.tool.create.creator.py. The Creator class provides base methods to recurse through nested folders in the domain model, create or update those folders, and set or update their attributes. Each subclass can override these methods to account for variations in behavior for different functional areas.\nFor example, the SecurityProviderCreator subclass overrides the method _create_named_subtype_mbeans with special processing to remove all existing security providers, and re-create them from the data in the model.\nThe update of folders and attributes in the resources section of the domain model follows a similar pattern, but the base class for these modules is Deployer in the module wlsdeploy.tool.deploy.deployer.py.\nThe class TopologyUpdater is a special subclass of Deployer that is used to update elements in the topology section after their initial creation.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/cluster-model/",
	"title": "Modeling a configured cluster",
	"tags": [],
	"description": "A domain model with a typical configuration for a configured cluster.",
	"content": "This WDT domain model sample has a typical configuration for a configured cluster with a single managed server, including connection information, logging setup, and other details.\ntopology: Cluster: cluster-1: ClientCertProxyEnabled: true AutoMigrationTableName: MIGRATION_1 DataSourceForAutomaticMigration: jdbc-1 ClusterMessagingMode: unicast FrontendHost: frontend.com FrontendHTTPPort: 9001 FrontendHTTPSPort: 9002 MigrationBasis: database NumberOfServersInClusterAddress: 5 WeblogicPluginEnabled: true Server: server-1: Cluster: cluster-1  # this server belongs to cluster-1 ListenAddress: 127.0.0.1 ListenPort: 8001 Machine: machine-1 Log: DomainLogBroadcastSeverity: Error FileCount: 7 FileMinSize: 5000 FileName: logs/AdminServer.log LogFileSeverity: Info MemoryBufferSeverity: Notice NumberOfFilesLimited: true RotateLogOnStartup: true RotationType: bySize SSL: Enabled: true ListenPort: 8002 ServerStart: Arguments: -Dosgi=true -Dtangosol.coherence.management=all ClassPath: /foo/bar,wlsdeploy/classpathLibraries/mylib.jar There are additional sub-folders and attributes available for more configuration options. These can be determined using the Model Help Tool. For example, this command will list the attributes and sub-folders for the Server folder:\n$ ${WDT_HOME}/bin/modelHelp.sh -oracle_home /tmp/oracle topology:/Server For this sample, the machine named machine-1 and the data source named jdbc-1 should be defined elsewhere within this model, or should already exist in a domain that is being updated.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/target_env/",
	"title": "Target environments",
	"tags": [],
	"description": "",
	"content": "Contents  Overview Specifying a target environment Pre-configured target environments Using secret credentials in the model Merging content from the WDT model Target configuration files  Overview The Discover Domain and Prepare Model Tools allow you to customize the model and other files produced to be compatible with a specific target environment. Options for a target environment may include:\n Using model tokens for some attributes in the model. For more details, see Model tokens. Using Kubernetes secrets for credentials in the model. For more details, see Using secret credentials in the model. Applying filters to the model. For more details, see Model filters. Creating additional configuration files for the target system.  Specifying a target environment Each tool specifies a target environment using the command-line argument -target \u0026lt;target-name\u0026gt;, where \u0026lt;target-name\u0026gt; refers to a pre-configured target environment, or a user-defined environment. In addition, the -output_dir \u0026lt;output-directory\u0026gt; argument specifies where the files for the target environment will be stored.\nThis command line shows how you can use these arguments with the Discover Domain Tool:\n$ $WLSDEPLOY_HOME/bin/discoverDomain.sh ... -target k8s -output_dir /etc/files This example would apply the k8s target type to the discovery result, and place those files in /etc/files.\nIf a variable file is specified on the tool\u0026rsquo;s command line using the -variable_file argument, any injected variables will be added to that file. If no variable file is specified, injected variables will be written to the file \u0026lt;output-directory\u0026gt;/\u0026lt;target_name\u0026gt;_variable.properties.\nPre-configured target environments These target environment configurations are included in the WebLogic Deploy Tooling installation.\nThe WebLogic Kubernetes Operator targets You can use these targets to customize the model and create a domain resource file for use with WebLogic Kubernetes Operator. There are three targets for specific domain home source types:\n wko and wko4 for Model in Image deployments wko-dii and wko4-dii for Domain in Image deployments wko-pvand wko4-pv for Domain in PV deployments  Targets beginning with wko are for use with WebLogic Kubernetes Operator versions 3.*, and those beginning with wko4 are for use with versions 4.0.0 and later.\nEach of these targets provides this additional processing:\n The wko_filter filter will be applied to remove model elements that are not compatible with the Kubernetes environment, and adjust some attribute values Variables will be injected into the model for port, host, and URL attributes lax validation will be applied for the resulting model An additional Kubernetes resource file, wko-domain.yaml, will be produced, with cluster and naming information derived from the model  In addition, the wko target will replace credentials in the model with references to Kubernetes secrets, and produce a script to create those secrets. The wko-dii and wko-pv targets will replace credentials in the model with variable references.\nThe Verrazzano targets You can use these targets to customize the model and create a Kubernetes resource file for use with Verrazzano. There are three targets for specific domain home source types:\n vz for Model in Image deployments vz-dii for Domain in Image deployments vz-pv for Domain in PV deployments  Each of these targets provides this additional processing:\n The vz_filter filter will be applied to remove model elements that are not compatible with the Kubernetes environment, and adjust some attribute values Variables will be injected into the model for port, host, and URL attributes lax validation will be applied for the resulting model An additional Kubernetes resource file, vz-application.yaml, will be produced, with cluster and data source information derived from the model  In addition, the vz target will replace credentials in the model with references to Kubernetes secrets, and produce a script to create those secrets. The vz-dii and vz-pv targets will replace credentials in the model with variable references.\nGeneric Kubernetes target You can apply this target environment by providing the command-line argument -target k8s. It will provide this additional processing:\n The k8s_filter filter will be applied to remove model elements that are not compatible with the Kubernetes environment, and adjust some attribute values Variables will be injected into the model for port, host, and URL attributes lax validation will be applied for the resulting model Credentials in the model will be replaced with references to Kubernetes secrets, and a script to create those secrets will be produced  Using secret credentials in the model If a target environment is configured to use Kubernetes secrets for credential attribute values, each of those values is replaced with a token using the format @@SECRET:@@ENV:DOMAIN_UID@@\u0026lt;secret-suffix\u0026gt;:\u0026lt;key\u0026gt;. For example:\nPasswordEncrypted: \u0026#39;@@SECRET:@@ENV:DOMAIN_UID@@-jdbc-generic1:password@@\u0026#39; When a domain is created or updated using a model with these tokens, the environment variable DOMAIN_UID should be set to the domain\u0026rsquo;s UID, and secrets with corresponding names should have been created. For more details about using secret tokens, see Model Tokens.\nFor some target environments, the WebLogic admin credentials use a variation of this token format. For example:\ndomainInfo: AdminUserName: \u0026#39;@@SECRET:__weblogic-credentials__:username@@\u0026#39; AdminPassword: \u0026#39;@@SECRET:__weblogic-credentials__:password@@\u0026#39; In this case, the token __weblogic-credentials__ allows these attributes to reference secrets in a specific location. The WDT_MODEL_SECRETS_NAME_DIR_PAIRS environment variable should be set to associate __weblogic-credentials__ to this location. For example:\nWDT_MODEL_SECRETS_NAME_DIR_PAIRS=__weblogic-credentials__=/etc/my-secrets For more details about using the WDT_MODEL_SECRETS_NAME_DIR_PAIRS environment variable, see Model Tokens .\nIn WebLogic Kubernetes Operator Model in Image environments, the environment variable DOMAIN_UID is automatically set from the value in the domain resource file. The variable WDT_MODEL_SECRETS_NAME_DIR_PAIRS is automatically set to the directory containing WebLogic admin credentials.\nThe create secrets script For target environments that use Kubernetes secret tokens, a shell script is created to generate the required secrets. The script is named create_k8s_secrets.sh, and is created in the target output directory. The script has commands to create each secret, for example:\n# Update \u0026lt;user\u0026gt; and \u0026lt;password\u0026gt; for weblogic-credentials create_paired_k8s_secret weblogic-credentials \u0026lt;user\u0026gt; \u0026lt;password\u0026gt; The script should be updated with correct \u0026lt;user\u0026gt; and \u0026lt;password\u0026gt; values as required. It may be necessary to change the NAMESPACE and DOMAIN_UID variables at the top of the script if they are different in the target environment.\nThe script performs a check to determine if any generated secret names are more than 63 characters in length, because that will prevent them from being mounted correctly in the Kubernetes environment. If any secret names exceed this limit, they will need to be shortened in this script, in the model files, and in the Kubernetes resource file. Each shortened name should be distinct from other secret names.\nMerging content from the WDT model When a Kubernetes custom resource definition (CRD) file is created for a target environment, content from the corresponding section of the WDT model will be merged into the resulting output, if that section is present.\nFor example, when the -target wko option is used, content from the kubernetes section of the WDT model will be merged into the resulting CRD, if that section is present. For example, you can define this section in the model:\nkubernetes: spec: domainHome: /etc/domainHome image: my-image clusters: - clusterName: my-cluster replicas: 4 - clusterName: other-cluster replicas: 6 These fields will override the values in the output file, and the file would be rewritten with the revised values. List values in the model will be combined with existing values in the output file. For example, if my-cluster was in the original output file, the model content for my-cluster would be merged with it, overriding the replicas value. If my-cluster was not in the original output file, it would be added to the list of clusters.\nWhen creating a resource file for WebLogic Kubernetes Operator version 4.0.0 and later, the kubernetes section of the model has to be structured differently. This is because there are multiple documents in the resource file for those versions. This example uses domain and cluster folders that will merge with the corresponding documents in the resource file:\nkubernetes: domain: spec: domainHome: /etc/domainHome image: my-image clusters: - spec: clusterName: my-cluster replicas: 4 - spec: clusterName: other-cluster replicas: 6 When creating a CRD for Verrazzano, content from the verrazzano section of the WDT model will be merged into the resulting output, similar to the previous examples. Each of the three subsections in the verrazzano section will be merged with the corresponding document in the CRD. This example shows the verrazzano section of the WDT model with its three subsections:\nverrazzano: application: spec: components: - componentName: mydomain-mycomponent traits: - trait: apiVersion: oam.verrazzano.io/v1alpha1 kind: LoggingTrait spec: imagePullPolicy: NEVER weblogic: spec: workload: spec: template: spec: domainHome: /u01/mydomain clusters: - name: cluster2 clusters: - spec: clusterName: cluster2 replicas: 1102 configmap: spec: workload: data: wdt_jdbc.yaml: |resources: JDBCSystemResource: myDs: JdbcResource: JDBCDriverParams: URL: \u0026#34;jdbc:oracle:thin:@myhost:1521/pdborcl\u0026#34; Target environment configuration files A target environment is configured in a JSON file at this location:\n$WLSDEPLOY_HOME/lib/targets/\u0026lt;target-name\u0026gt;/target.json The \u0026lt;target-name\u0026gt; value corresponds to the value of the -target argument on the tool\u0026rsquo;s command line. The WLS installation includes pre-defined targets for these environments:\n WebLogic Kubernetes Operator Verrazzano Kubernetes  You can define a new or extended target environment with a new target-name in the above location, or using a Custom configuration directory, such as $WDT_CUSTOM_CONFIG/target/\u0026lt;my-target-name\u0026gt;/target.json.\nYou can customize existing template files for specific environments. The recommended method is to copy the original template to a custom configuration directory as described above, such as $WDT_CUSTOM_CONFIG/target/\u0026lt;target-name\u0026gt;/model.yaml. The copied file can then be edited as needed, while maintaining the original for reference.\nHere is an example of a target environment file:\n{ \u0026quot;model_filters\u0026quot; : { \u0026quot;discover\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;vz_prep\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;@@TARGET_CONFIG_DIR@@/vz_filter.py\u0026quot; }, { \u0026quot;id\u0026quot;: \u0026quot;wko_filter\u0026quot; } ] }, \u0026quot;variable_injectors\u0026quot; : {\u0026quot;PORT\u0026quot;: {},\u0026quot;HOST\u0026quot;: {},\u0026quot;URL\u0026quot;: {}}, \u0026quot;validation_method\u0026quot; : \u0026quot;lax\u0026quot;, \u0026quot;credentials_method\u0026quot; : \u0026quot;secrets\u0026quot;, \u0026quot;exclude_domain_bin_contents\u0026quot;: true, \u0026quot;wls_credentials_name\u0026quot; : \u0026quot;__weblogic-credentials__\u0026quot;, \u0026quot;use_persistent_volume\u0026quot; : true, \u0026quot;additional_secrets\u0026quot;: \u0026quot;runtime-encryption-secret\u0026quot;, \u0026quot;additional_output\u0026quot; : \u0026quot;vz-application.yaml\u0026quot; } Each of the fields in this example is optional, and you can customize them.\nmodel_filters This field specifies the filters to be applied to the resulting model. This follows the same format and rules as the Model filters configuration. The discover type should always be used here.\nYou can use the @@TARGET_CONFIG_DIR@@ token to indicate that the specified filter is in the same directory as the target configuration file.\nvariable_injectors This field specifies the variable injectors to be applied to the resulting model. This follows the same format and rules as the Variable injectors configuration.\nvalidation_method You can use this field to set the validation level for the resulting model. Only the value laxis currently supported. With lax validation, variables and Kubernetes secrets referenced in the resulting model do not need to be available when the model is created.\ncredentials_method This field specifies how credentials in the model should be handled. There are two values available:\n secrets - the credentials in the model are replaced with references to Kubernetes secrets, and a UNIX script to create those secrets is produced. config_override_secrets - the credentials in the model are replaced with placeholder values, such as password1, and a UNIX script to create corresponding Kubernetes secrets is produced.  In both these cases, the script to create the Kubernetes secrets is written to \u0026lt;output-directory\u0026gt;/create_k8s_secrets.sh. You will need to update this script with credential values before executing\nexclude_domain_bin_contents This field specifies how the domain\u0026rsquo;s bin directory contents should be handled. If set to true, then discovery will skip over the domain\u0026rsquo;s bin directory resulting in a model and archive file without any references to any scripts that might typically be collected (for example, setUserOverrides.sh).\nwls_credentials_name This field specifies a name for use with the WDT_MODEL_SECRETS_NAME_DIR_PAIRS environment variable to identify administration credential Secrets for the domain. This is useful when those Secrets are stored in a directory that does not follow the \u0026lt;directory\u0026gt;/\u0026lt;name\u0026gt;/\u0026lt;key\u0026gt; convention. For more information about using the WDT_MODEL_SECRETS_NAME_DIR_PAIRS environment variable, see Model tokens.\nuse_persistent_volume This field specifies if the domain is to be created for the Domain in PV domain home source type. If set to true, volume information will be added to the Kubernetes resource file that is generated.\nadditional_secrets This field specifies a comma-separated list of secret types that are to be included in the Kubernetes resource file and the create secrets script. There is one secret type available:\n runtime-encryption-secret - this will add a runtimeEncryptionSecret attribute to the Kubernetes resource file with the value \u0026lt;DOMAIN_UID\u0026gt;-runtime-encryption-secret, and that secret name will be added to the create secrets script.  additional_output You can use this field to create additional output for use in the target environment. The value is a comma-separated list of template files in the $WLSDEPLOY_HOME/lib/targets/templates directory. These templates are populated with information derived from the model, and written to a file with the same name in the specified output directory.\nNote: Prior to release 2.0.1, template files were stored in the $WLSDEPLOY_HOME/lib/targets/\u0026lt;target-name\u0026gt; directory.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/update/",
	"title": "Update Domain Tool",
	"tags": [],
	"description": "Updates an existing domain and populates the domain with all the resources and applications specified in the model, either in offline or online mode.",
	"content": "The Update Domain Tool uses a model, the archive, and WLST to update the configuration of an existing WebLogic Server domain, and to deploy applications and resources into the domain in either WLST online or offline mode. The Update Domain Tool will add or re-configure elements from the topology section of the model, and deploy applications and resources from the resources and appDeployments sections, as described in the Deploy Applications Tool.\nThe Update Domain Tool will only add or update elements in the specified model. It will not attempt to remove any missing elements that were present in a previous model.\nRunning the Update Domain Tool in WLST offline mode is very similar to running the Create Domain Tool; simply provide the domain location and archive file, and separate model and variable files, if needed. For example:\n$ weblogic-deploy\\bin\\updateDomain.cmd -oracle_home c:\\wls12213 -domain_type WLS -domain_home domains\\DemoDomain -archive_file DemoDomain.zip -model_file DemoDomain.yaml -variable_file DemoDomain.properties  You can use online mode either on the admin server or from a remote machine. If you are running from the admin server, you can specify domain home directory -domain_home location.\nIf you are running from a remote machine, then you do not need to specify the domain home directory -domain_home option, but there is are limitations:\n Any attribute in the model that referenced a path into the archive file unless the path begins with wlsdeploy/applications or wlsdeploy/sharedLibraries will result in an error, as the tool cannot remotely create such directory or file. For example, if you specify a domainBin: [ wlsdeploy/domainBin/setUserOverrides.sh] which references a file entry in the archive file wlsdeploy/domainBin/setUserOverrides.sh, the tool will fail with an error. Exploded format application specified in the archive is not supported  In WLST online mode, simply add the information on how to connect to the WebLogic Server Administration Server, for example:\n$ weblogic-deploy\\bin\\updateDomain.cmd -oracle_home c:\\wls12213 -domain_type WLS -domain_home domains\\DemoDomain -archive_file DemoDomain.zip -model_file DemoDomain.yaml -variable_file DemoDomain.properties -admin_url t3://127.0.0.1:7001 -admin_user weblogic  or from a remote machine\n$ weblogic-deploy\\bin\\updateDomain.cmd -oracle_home c:\\wls12213 -domain_type WLS -remote -archive_file DemoDomain.zip -model_file DemoDomain.yaml -variable_file DemoDomain.properties -admin_url t3://127.0.0.1:7001 -admin_user weblogic  As usual, the tool will prompt for the password (it can also be supplied by piping it to standard input of the tool). To bypass the prompt, you can use one of two options. Store the password in an environment variable, and use the variable name with command-line option -admin_pass_env. Store the password in a file. Provide the file name with command-line option -admin_pass_file.\nUnlike the Create Domain Tool, the full domain home directory is specified, rather than the domain\u0026rsquo;s parent directory, because the domain has already been established.\nThe Update Domain Tool will not attempt to recreate or add schemas for the RCU database, for domain types that use RCU.\nWhen running the tool in WLST online mode, the update operation may require server restarts or a domain restart to pick up the changes. The update operation can also encounter situations where it cannot complete its operation until the domain is restarted. To communicate these conditions to scripts that may be calling the Update Domain Tool, the shell scripts have two special, non-zero exit codes to communicate these states:\n 103 - The entire domain needs to be restarted. 104 - The domain changes have been canceled because the changes in the model requires a domain restart and -cancel_changes_if_restart_required is specified.  Online update for shared libraries   When updating shared library online, it is recommended to deploy a new version of the library by updating the version(s) in the MANIFEST.MF file and update the deployment descriptor of any application that wants to upgrade to use the new library, this avoids complicated issues like in-place update of shared library.\n  In-place update of shared library online is not supported - if you only update the library contents without updating the version(s) of the library in the MANIFEST.MF file. You will get an error from WebLogic Server indicating the library is referenced by applications and cannot be undeployed. You must undeploy all applications referencing the shared library first before proceeding; this is the same behavior when using the WebLogic Server console. Also, a shared library can potentially be referenced by another shared library module which in turns used by other applications, currently there is no capability within WebLogic Server to handle automating undeploy and deploy of an application that uses shared library when the library is updated in-place.\n  Using output files If the -output_dir command-line argument is specified, the tool will generate output files that provide information about servers and resources that need to be restarted. These files are only applicable for online deployments.\nThe file restart.file contains a list of servers and resources that need to be restarted. Here is an example:\n:AdminServer:Generic1:JDBCSystemResource :AdminServer:: The file non_dynamic_changes.file contains text describing the attributes that will require a restart in order for new values to be applied. Here is an example:\nServer re-start is REQUIRED for the set of changes in progress. The following non-dynamic attribute(s) have been changed on MBeans that require server re-start: MBean Changed : com.bea:Name=AdminServer,Type=Log,Server=AdminServer Attributes changed : RedirectStderrToServerLogEnabled, RedirectStdoutToServerLogEnabled MBean Changed : com.bea:Name=MailSession-0,Type=MailSession Attributes changed : SessionPasswordEncrypted The file results.json contains information about servers and resources need to be restarted, and attribute values that require a restart in order for new values to be applied.\n{ \u0026#34;nonDynamicChanges\u0026#34; : { \u0026#34;com.bea:Name=MailSession-0,Type=MailSession\u0026#34; : [ \u0026#34;SessionPasswordEncrypted\u0026#34; ], \u0026#34;com.bea:Name=AdminServer,Type=Log,Server=AdminServer\u0026#34; : [ \u0026#34;RedirectStderrToServerLogEnabled\u0026#34;, \u0026#34;RedirectStdoutToServerLogEnabled\u0026#34; ] }, \u0026#34;nonDynamicChangesText\u0026#34; : [ \u0026#34;\u0026#34;, \u0026#34;Server re-start is REQUIRED for the set of changes in progress.\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;The following non-dynamic attribute(s) have been changed on MBeans\u0026#34;, \u0026#34;that require server re-start:\u0026#34;, \u0026#34;MBean Changed : com.bea:Name=AdminServer,Type=Log,Server=AdminServer\u0026#34;, \u0026#34;Attributes changed : RedirectStderrToServerLogEnabled, RedirectStdoutToServerLogEnabled\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;MBean Changed : com.bea:Name=MailSession-0,Type=MailSession\u0026#34;, \u0026#34;Attributes changed : SessionPasswordEncrypted\u0026#34;, \u0026#34;\u0026#34; ], \u0026#34;restarts\u0026#34; : [ { \u0026#34;server\u0026#34; : \u0026#34;AdminServer\u0026#34;, \u0026#34;resourceName\u0026#34; : \u0026#34;Generic1\u0026#34;, \u0026#34;resourceType\u0026#34; : \u0026#34;JDBCSystemResource\u0026#34; }, { \u0026#34;server\u0026#34; : \u0026#34;AdminServer\u0026#34; } ] } Using an encrypted model If the model or variables file contains passwords encrypted with the WDT Encryption tool, decrypt the passwords during create with the -use_encryption flag on the command line to tell the Update Domain Tool that encryption is being used and to prompt for the encryption passphrase. As with the database passwords, the tool can also read the passphrase from standard input (for example, stdin) to allow the tool to run without any user input. You can bypass the stdin prompt with two other options. Store the passphrase in an environment variable, and use the environment variable name with command-line option -passphrase_env. Another option is to create a file containing the passphrase value. Pass this filename with the command-line option -passphrase_file.\nUsing multiple models The Update Domain Tool supports the use of multiple models, as described in Using multiple models.\nParameter table for updateDomain    Parameter Definition Default     -admin_pass_env An alternative to entering the admin password at a prompt. The value is an environment variable name that WDT will use to retrieve the password.    -admin_pass_file An alternative to entering the admin password at a prompt. The value is a the name of a file that contains a password string that the tool will read to retrieve the password.    -admin_url The admin server URL for online update.    -admin_user The admin user name for online update.    -archive_file The path to the archive file to use. If the -model_file argument is not specified, the model file in this archive will be used. This can also be specified as a comma-separated list of archive files. The overlapping contents in each archive take precedence over previous archives in the list.    -cancel_changes_if_restart_required Cancel the changes if the update requires domain restart.    -discard_current_edit Discard all existing domain edits before the update.    -domain_home (Required) The location of the existing domain home.    -domain_type The type of domain. (for example, WLS, JRF) WLS   -model_file The location of the model file. This can also be specified as a comma-separated list of model locations, where each successive model layers on top of the previous ones.    -oracle_home Home directory of the Oracle WebLogic installation. Required if the ORACLE_HOME environment variable is not set.    -passphrase_env An alternative to entering the encryption passphrase at a prompt. The value is an environment variable name that WDT will use to retrieve the passphrase.    -passphrase_file An alternative to entering the encryption passphrase at a prompt. The value is a the name of a file with a string value which WDT will read to retrieve the passphrase.    -update_dir If specified, files containing restart information are written to this directory, including restart.file, non_dynamic_changes.file, and results.json.    -use_encryption One or more of the passwords in the model or variables file(s) are encrypted and must be decrypted. Java 8 or later required for this feature.    -variable_home The location of the property file containing the values for variables used in the model. This can also be specified as a comma-separated list of property files, where each successive set of properties layers on top of the previous ones.    -wait_for_edit_lock Skip checks for active edit sessions and pending changes before trying to acquire the WLST online edit lock to modify domain configuration.    -remote Update the domain from a remote machine.     "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/",
	"title": "User Guide",
	"tags": [],
	"description": "",
	"content": "User Guide The User Guide provides detailed information about installing and using WebLogic Deploy Tools.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/wtc-model/",
	"title": "Modeling a WTC configuration",
	"tags": [],
	"description": "A domain model with a typical configuration for a WebLogic Tuxedo Connector.",
	"content": "This sample shows the WDT model for configuring WebLogic Tuxedo Connector (WTC) for both importing services from Tuxedo and exporting EJB methods to Tuxedo as services.\nresources: # A logical WLS server name for the WLS configuration found on the console under interoperability WTCServer: myWTCServer: Target: admin # Exported EJB services to be consumed by Tuxedo services. WTCExport: WTCExportedService-1: # The remote name of this service. ResourceName: QaWls2Conv2 # The name used to identify an exported service RemoteName: QaWls2Conv2 EJBName: tuxedo.services.QaTux2wlsConvHome # The name of the local access point that exports this service. LocalAccessPoint: LocalAccessPoint2 WTCExportedService-2: ResourceName: QaWls1Conv2 RemoteName: QaWls1Conv2 EJBName: tuxedo.services.QaTux2wlsConvHome LocalAccessPoint: LocalAccessPoint WTCExportedService-3: ResourceName: QaWlsConvSvc RemoteName: QaWlsConvSvc EJBName: tuxedo.services.QaTux2wlsConvHome LocalAccessPoint: LocalAccessPoint # Imported Tuxedo services to be consumed by WLS services. WTCImport: WTCImportedService-1: # The name used to identify this imported service. ResourceName: CONVSVC # The remote name of this service. RemoteName: CONVSVC # The comma-separated failover list that identifies the remote domain access points through which resources are imported. RemoteAccessPointList: RemoteAccessPoint # The name of the local access point that offers this service. Matches the Tuxedo domain LocalAccessPoint: LocalAccessPoint WTCImportedService-2: ResourceName: QaTux1Conv2 RemoteName: QaTux1Conv2 RemoteAccessPointList: RemoteAccessPoint LocalAccessPoint: LocalAccessPoint WTCImportedService-3: ResourceName: QaTux1Conv3 RemoteName: QaTux1Conv3 RemoteAccessPointList: RemoteAccessPoint LocalAccessPoint: LocalAccessPoint # Local access points so that Tuxedo services can act as a client to WLS services. WTCLocalTuxDom: LocalAccessPoint: # The local listen address on the WLS side NWAddr: //access-host:2510 # A logical and unique name to identify this local Tuxedo access point AccessPoint: LocalAccessPoint # The connection principal name used to identify this local Tuxedo access point when attempting to establish a session connection with remote Tuxedo access points. AccessPointId: mydomain1 LocalAccessPoint2: NWAddr: //access-host:2520 AccessPoint: LocalAccessPoint2 AccessPointId: mydomain2 # Remote access points so that WLS can act as a client to Tuxedo services WTCRemoteTuxDom: RemoteAccessPoint: # The local domain name from which this remote Tuxedo domain is reached. LocalAccessPoint: LocalAccessPoint # The remote listen address of the Tuxedo domain gateway. NWAddr: //access-host:2500 # A logical and unique name used to identify this Tuxedo remote access point AccessPoint: RemoteAccessPoint # The connection principal name used to identify this remote domain access point when attempting to establish a session connection to local Tuxedo access points # This ID needs to be configured as a user in the WLS security realm. AccessPointId: domain1 RemoteAccessPoint2: LocalAccessPoint: LocalAccessPoint2 NWAddr: //access-host:2500 AccessPoint: RemoteAccessPoint2 AccessPointId: domain1 In this configuration, the WTC uses EJB and communicates with remote and local access points. To see other WTC configuration options, use the model help as shown in the following.\n$ ${WDT_HOME}/bin/modelHelp.sh -oracle_home /tmp/oracle resources:/WTCServer "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/alias-definitions/",
	"title": "Alias definitions",
	"tags": [],
	"description": "",
	"content": "WebLogic Deploy Tool uses a set of JSON configuration files to map folders and attributes in the model to the corresponding WLST MBeans and their attributes. These mappings are referred as \u0026lsquo;aliases\u0026rsquo; throughout the project code and documentation. Each element in the alias definition file has detailed properties that assist in this mapping.\nThe model\u0026rsquo;s folder and attribute names usually match the names of the corresponding elements in WLST. For cases where the names of WLST elements may change across WebLogic Server releases, the names should match the names in the 12.2.1.3 release. The unit test AttributesTestCase verifies that this convention is used, and identifies a few exceptions.\nAttributes that are introduced after the 12.2.1.3 release should, in most cases, match the name of the first WebLogic Server release in which they appear. The unit test AttributesTestCase will ignore these for now, because they will not be present in the 12.2.1.3 alias structure.\nThe alias definition files reside in the directory:\n$WLSDEPLOY_HOME/core/src/main/resources/oracle/weblogic/deploy/aliases/category_module\nEach definition file corresponds to a second-level folder within the model, such as JDBCSystemResource. Any elements below a second-level folder are defined in the file of that parent. For example, the model element resources/JDBCSystemResource/JdbcResource/JDBCConnectionPoolParams is described in JDBCSystemResource.json.\nTop-level elements such as topology and resources are for organizational purposes, and are not represented in the alias definition files.\nNo elements in the domainInfo section of the model are represented in the alias definitions, because they don\u0026rsquo;t correspond directly to WLST elements.\nThis example, from the file JDBCSystemResource.json, will be used as a reference in the descriptions below:\n{ \u0026#34;copyright\u0026#34;: \u0026#34;Copyright (c) 2017, 2018, Oracle Corporation and/or its affiliates. All rights reserved.\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl\u0026#34;, \u0026#34;wlst_type\u0026#34;: \u0026#34;JDBCSystemResource${:s}\u0026#34;, \u0026#34;child_folders_type\u0026#34;: \u0026#34;multiple\u0026#34;, \u0026#34;folders\u0026#34;: { \u0026#34;JdbcResource\u0026#34; : { \u0026#34;wlst_type\u0026#34;: \u0026#34;${Jdbc:JDBC}Resource\u0026#34;, \u0026#34;folders\u0026#34;: { \u0026#34;JDBCConnectionPoolParams\u0026#34;: { \u0026#34;wlst_type\u0026#34;: \u0026#34;JDBCConnectionPoolParams\u0026#34;, \u0026#34;folders\u0026#34;: {}, \u0026#34;attributes\u0026#34;: { \u0026#34;CapacityIncrement\u0026#34;: [ {\u0026#34;version\u0026#34;: \u0026#34;[10,)\u0026#34;, \u0026#34;wlst_mode\u0026#34;: \u0026#34;both\u0026#34;, \u0026#34;wlst_name\u0026#34;: \u0026#34;CapacityIncrement\u0026#34;, \u0026#34;wlst_path\u0026#34;: \u0026#34;WP001\u0026#34;, \u0026#34;default_value\u0026#34;: \u0026#34;${__NULL__:1}\u0026#34;, \u0026#34;wlst_type\u0026#34;: \u0026#34;integer\u0026#34;, \u0026#34;get_method\u0026#34;: \u0026#34;LSA\u0026#34;} ], \u0026#34;ConnectionCreationRetryFrequencySeconds\u0026#34;: [ {\u0026#34;version\u0026#34;: \u0026#34;[10,)\u0026#34;, \u0026#34;wlst_mode\u0026#34;: \u0026#34;both\u0026#34;, \u0026#34;wlst_name\u0026#34;: \u0026#34;ConnectionCreationRetryFrequencySeconds\u0026#34;, \u0026#34;wlst_path\u0026#34;: \u0026#34;WP001\u0026#34;, \u0026#34;default_value\u0026#34;: \u0026#34;${__NULL__:0}\u0026#34;, \u0026#34;wlst_type\u0026#34;: \u0026#34;integer\u0026#34;, \u0026#34;get_method\u0026#34;: \u0026#34;LSA\u0026#34;} ] }, \u0026#34;wlst_attributes_path\u0026#34;: \u0026#34;WP001\u0026#34;, \u0026#34;wlst_paths\u0026#34;: { \u0026#34;WP001\u0026#34;: \u0026#34;/JDBCSystemResource${:s}/%DATASOURCE%/${Jdbc:JDBC}Resource/%DATASOURCE%/JDBCConnectionPoolParams/${NO_NAME_0:%DATASOURCE%}\u0026#34; } }, ... Conventions Notations similar to ${Jdbc:JDBC}Resource appear throughout this example, and other alias definition files. It is shorthand for the common situation where a value is different between offline and online WLST. The value before the colon is used in offline processing, and the value after is used for online. In this example, the value for wlst_type is JdbcResource in offline, and JDBCResource in online. This notation can be used for values in most places in the model. It cannot be used for key values, such as wlst_type.\nKeys for top level and folders elements These JSON keys are applicable for the top-level element (such as JDBCSystemResource), and each of its nested folders elements (such as JdbcResource and JdbcResource/JDBCConnectionPoolParams.\nwlst_type This value is the type name of the WLST MBean that corresponds to a model folder. The ${x:y} notation described above is often used here to distinguish offline and online folder names.\nchild_folders_type This value specifies how the tool will map the domain model element to one or more WLST MBeans. The values are:\n  single (default) - this element represents a single MBean, and the MBean name is known.\n  single-unpredictable - this element represents a single MBean, but the MBean name must be derived at runtime.\n  multiple - this element contains multiple named elements (such as dataSource1, dataSource2), and each represents a single MBean.\n  folders Nested WLST MBean types for the current MBean are listed here. Each has a domain model type name, followed by its own JSON keyed elements.\nwlst_attributes_path This key element specifies the name of the path expression used for navigating to the MBean attributes folder. The actual path expression is defined later in the \u0026quot;wlst_paths\u0026quot;: { } element.\nwlst_paths The dictionary key defines the various WLST path values used elsewhere in this folder\u0026rsquo;s definition. Each entry maps a name to a full WLST MBean path. In this example, JDBCConnectionPoolParams has a single path:\n\u0026quot;WP001\u0026quot;: \u0026quot;/JDBCSystemResource${:s}/%DATASOURCE%/${Jdbc:JDBC}Resource/%DATASOURCE%/JDBCConnectionPoolParams/${NO_NAME_0:%DATASOURCE%}\u0026quot;\nThe %DATASOURCE% text is token placeholder. It will be replaced with the name of the actual data source by the tool.\nKeys for attributes elements Each child of an attributes element represents a single MBean attribute, and its key is the corresponding model name, such as CapacityIncrement. It contains at least one description element with the JSON keys below. There may be multiple description elements for cases where the configuration varies for different WebLogic Server version ranges, or varies between offline and online WLST.\nversion This key element defines the applicable versions for a particular MBean attribute description. Maven versioning conventions are used to describe ranges and limits. For example:\n\u0026quot;version\u0026quot;: \u0026quot;[10,)\u0026quot;\nSpecifies that an MBean attribute description is relevant for WebLogic Server version 10 and later\nwlst_mode This key element specifies the WLST modes that are applicable for an MBean attribute description. The value can be \u0026ldquo;offline\u0026rdquo;, \u0026ldquo;online\u0026rdquo;, or \u0026ldquo;both\u0026rdquo;.\nwlst_name This key element specifies the WLST name of the MBean attribute.\nwlst_type This key element specifies the data type used to set the WLST MBean attribute. Valid values are integer, long, string, delimited_string, boolean and jarray. If the wlst_read_type is not set, this is also the data type used to read the value from WLST.\nwlst_read_type This key element specifies the data type used to read the WLST MBean attribute. If it is not specified, the value of wlst_type is used for the read.\nget_method This key element specifies which method should be used for retrieving the value the MBean attribute. Valid values are:\n GET use the WLST get method to retrieve the value of the attribute LSA use ls(type=\u0026lsquo;a\u0026rsquo;) to retrieve the value of the attribute NONE do not retrieve the attribute value  access By default, an attribute is read write in both WLST and MODEL. This element is used to set an attribute to read-only or ignored. The two attribute values are:\n RO indicates that the attribute is read-only and will not be written into the domain; however, it will be discovered and written into the model by the Discover Domain Tool. IGNORED indicates that the attribute is both known and tolerated in the model but is never discovered or written into the domain.  preferred_model_type This key element specifies the preferred data type that should be used to put data in the model during discovery. As an example, list values can be represented in the model as comma-separated text, such as \u0026quot;value1, value2\u0026quot;, or as a YAML list, such as [\u0026quot;value1\u0026quot;, \u0026quot;value2\u0026quot;]. If the list values can contain commas, a YAML list must be used.\nwlst_path This key element specifies the name of the path expression used for navigating to the MBean attribute\u0026rsquo;s folder. This name maps to an entry in the parent folder\u0026rsquo;s \u0026quot;wlst_paths\u0026quot;: { } list.\ndefault_value This key element specifies the default value of the MBean attribute. For example:\n\u0026quot;default_value\u0026quot;: \u0026quot;text\u0026quot;\n\u0026quot;default_value\u0026quot;: 99\n\u0026quot;default_value\u0026quot;: null\n\u0026quot;default_value\u0026quot;: \u0026quot;${__NULL__:1}\u0026quot;\nThe __NULL__ key represents a null value when \u0026quot;${a:b}\u0026quot; notation is used to specify offline and online values.\nset_method For cases where attributes cannot be set with simple types, it may be necessary to use a custom method to set the value. For example, most Target attributes require their values to be set as lists of MBeans, in online mode. This may be defined as:\n\u0026#34;attributes\u0026#34;: { \u0026#34;Target\u0026#34;: [ { \u0026#34;set_method\u0026#34;: \u0026#34;MBEAN.set_target_mbeans\u0026#34;, \u0026#34;set_mbean_type\u0026#34;: \u0026#34;weblogic.management.configuration.TargetMBean\u0026#34;} ], }, The method set_target_mbeans directs the tool to call the Jython method attribute_setter.set_target_mbeans to set this value.\nset_mbean_type When a set_method key is specified, it may be required to specify the MBean type for the set method to use (see the example under set_method).\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/database/connect-db/",
	"title": "Connect to a Database",
	"tags": [],
	"description": "Create a connection to access your database.",
	"content": "Specifying RCU connection information in the model When creating a JRF domain, you can provide all the RCU connection information in a section RCUDbInfo under the domainInfo section in the model. It provides you with more flexibility over the basic command-line arguments of -rcu_db and -rcu_prefix. Use this when the connection string is more complex and requires extra options.\nBackground on JRF domain RCU tables A JRF domain creates several data sources from the JRF domain template.\n   Data source name JNDI name Schema Target     WLSSchemaDataSource jdbc/WLSSchemaDataSource prefix_WLS_RUNTIME None   LocalSvcTblDataSource jdbc/WLSSchemaDataSource prefix_STB admin server   opss-data-source jdbc/OpssDataSource prefix_OPSS admin server and cluster   opss-audit-viewDS jdbc/AuditViewDataSource prefix_IAU_VIEWER admin server and cluster   opss-audit-DBDS jdbc/AuditAppendDataSource prefix_IAU_APPEND admin server and cluster   mds-owsm jdbc/mds/owsm prefix_MDS admin server and cluster    By default, the JRF domain template data source has only the default information such as URL and schema with the default prefix DEV. During domain creation, WDT will use the information you provided in the command line or in the RCUDbinfo section to override the default values from the template so that it can connect to the database you specified.\nFor some advanced use cases, such as using an Oracle Active GridLink data source or Multi Data Sources, you can provide a sparse model of the data sources in a separate model file during domain creation. See Advance use cases.\nCreating a new domain to connect to an existing RCU schema If you ever find a situation where your JRF domain home directory is corrupted or lost, it is possible to create a new domain home directory using the existing RCU schemas provided that you have previously exported the domain\u0026rsquo;s encryption key into an Oracle wallet. To export the encryption key into a wallet, use the OPSS WLST offline exportEncryptionKey function.\nWhen you want to recreate the JRF domain home, you have two options:\n  Use the Create Domain tool\u0026rsquo;s -opss_wallet \u0026lt;path-to-wallet-file\u0026gt; argument and one of the following arguments to pass the wallet passphrase:\n -opss_wallet_passphrase_env \u0026lt;environment-variable-name\u0026gt; - Simply pass the name of the environment variable to read to get the wallet passphrase. -opss_wallet_passphrase_file \u0026lt;path-to-file\u0026gt; - Simply pass the file name for the file containing the wallet passphrase.    Add the OPSS wallet to the archive file in the prescribed location (i.e., wlsdeploy/opsswallet/) using the Archive Helper tool\u0026rsquo;s add opssWallet command and then provide the passphrase in the domainInfo section\u0026rsquo;s OPSSSecrets field.\ndomainInfo: OPSSSecrets: MySecureOPSSWalletPassphrase   Access a database using a wallet When accessing a database, such as ATP or SSL, using a wallet, you need to obtain the wallet from your DBA and information about the database:\n  tns alias - The network service name. You can find this in the tnsnames.ora file inside the database wallet. The alias is on the left side of the equals sign.\nxxxx = (DESCRIPTION ...) yyyy = (DESCRIPTION ...) ...   keystore and truststore password - Password used to generate the wallet.\n  keystore and truststore type - SSO or PKCS12.\n  keystore and truststore file - cwallet.sso (if store type is SSO), ewallet.p12 (if store type is PKCS12).\n  Depending on the type of database and the choice of method for authentication, you can provide the necessary information with RCUDbInfo in the model.\nATP database For example, to use the Oracle Autonomous Transaction Processing Cloud Database for a JRF domain, specify the following information in the model:\ndomainInfo: RCUDbInfo: databaseType : \u0026#39;ATP\u0026#39; rcu_prefix : DEV rcu_admin_user : admin rcu_admin_password: \u0026lt;database admin password is required only when you specify -run_rcu flag\u0026gt; rcu_schema_password : \u0026lt;RCU schema password\u0026gt; tns.alias : \u0026lt;tns alias name. e.g. dbname_tp\u0026gt; javax.net.ssl.keyStorePassword : \u0026lt;atp wallet password when generating the wallet from Oracle Cloud Console\u0026gt; javax.net.ssl.trustStorePassword : \u0026lt;atp wallet password when generating the wallet from Oracle Cloud Console\u0026gt; oracle.net.tns_admin: \u0026lt;optional: absolute path of the unzipped wallet root directory (outside of the archive), if the wallet.zip is not included in the archive\u0026gt; The database wallet can be included in the archive file as a named entry (example uses rcu as that name) under the dbWallets archive structure, either as a zip file:\nwlsdeploy/dbWallets/rcu/Walletxyz.zip\nor as the unzipped contents:\n wlsdeploy/dbWallets/rcu/cwallet.sso wlsdeploy/dbWallets/rcu/ewallet.p12 wlsdeploy/dbWallets/rcu/ewallet.pem wlsdeploy/dbWallets/rcu/keystore.jks wlsdeploy/dbWallets/rcu/ojdbc.properties wlsdeploy/dbWallets/rcu/sqlnet.ora wlsdeploy/dbWallets/rcu/tnsnames.ora wlsdeploy/dbWallets/rcu/truststore.jks  At runtime, WDT will extract the files (if they are in a zip file) to $DOMAIN_HOME/wlsdeploy/dbWallets/rcu/ so that they can be referenced directly from the model using the normal relative path. For example:\ndomainInfo: RCUDbInfo: databaseType : \u0026#39;ATP\u0026#39; rcu_prefix : DEV rcu_db_conn_string: \u0026lt;required URL string for use with -run_rcu\u0026gt; rcu_admin_user : admin rcu_admin_password: \u0026lt;database admin password is required only when you specify -run_rcu flag\u0026gt; rcu_schema_password : \u0026lt;RCU schema password\u0026gt; tns.alias : my_atp_db_medium javax.net.ssl.keyStorePassword : wlsdeploy/dbWallets/rcu/keystore.jks javax.net.ssl.trustStorePassword : wlsdeploy/dbWallets/rcu/truststore.jks oracle.net.tns_admin: \u0026#39;@@DOMAIN_HOME@@/wlsdeploy/dbWallets/rcu\u0026#39; Or, by specifying the unzipped root directory of the ATP wallet ZIP file in oracle.net.tns_admin.\nNote: Prior to release 0.23, the useATP flag only accepts values of 0, 1, true, or false.\nSSL database using SSO for authentication For an Oracle SSL database with TW0_WAY SSL enabled, with an SSO wallet, use the following example:\ndomainInfo: RCUDbInfo: databaseType : \u0026#39;SSL\u0026#39; rcu_db_conn_string: \u0026lt;required URL string for use with -run_rcu\u0026gt; rcu_prefix : DEV rcu_admin_password: \u0026lt;required with -run_rcu flag\u0026gt; rcu_schema_password: \u0026lt;required with -run_rcu flag\u0026gt; tns.alias: \u0026lt;alias of ssl db in the tnsnames.ora file\u0026gt; javax.net.ssl.keyStore: \u0026lt;keystore found in unzipped wallet, i.e. cwallet.sso\u0026gt; javax.net.ssl.keyStoreType: SSO javax.net,ssl.trustStore: \u0026lt;truststore found in unzipped wallet, i.e cwallet.sso\u0026gt; javax.net.ssl.trustStoreType: SSO oracle.net.tns_admin: \u0026lt;absolute path of the unzipped wallet root directory\u0026gt; For an Oracle SSL database with ONE_WAY SSL enabled, with an SSO wallet, use the following example:\ndomainInfo: RCUDbInfo: databaseType : \u0026#39;SSL\u0026#39; rcu_db_conn_string: \u0026lt;required URL string for use with -run_rcu\u0026gt; rcu_prefix : DEV rcu_admin_password: \u0026lt;required with -run_rcu flag\u0026gt; rcu_schema_password: \u0026lt;required with -run_rcu flag\u0026gt; tns.alias: \u0026lt;alias of ssl db in the tnsnames.ora file\u0026gt; javax.net,ssl.trustStore: \u0026lt;truststore found in unzipped wallet, i.e cwallet.sso\u0026gt; javax.net.ssl.trustStoreType: SSO oracle.net.tns_admin: \u0026lt;absolute path of the unzipped wallet root directory\u0026gt; SSL database using PKCS12 for authentication For an Oracle SSL database with TW0_WAY SSL enabled, with a PKCS12 wallet, use the following example:\ndomainInfo: RCUDbInfo: databaseType : \u0026#39;SSL\u0026#39; rcu_db_conn_string: \u0026lt;required URL string for use with -run_rcu\u0026gt; rcu_prefix : DEV rcu_admin_password: \u0026lt;required with -run_rcu flag\u0026gt; rcu_schema_password: \u0026lt;required with -run_rcu flag\u0026gt; tns.alias: \u0026lt;alias of ssl db in the tnsnames.ora file\u0026gt; javax.net.ssl.keyStore: \u0026lt;keystore found in the unzipped wallet, i.e. ewallet.p12\u0026gt; javax.net.ssl.keyStoreType: PKCS12 javax.net.ssl.keyStorePassword: \u0026lt;keystore password\u0026gt; javax.net.ssl.trustStore: \u0026lt;truststore found in the unzipped wallet, i.e ewallet.p12\u0026gt; javax.net.ssl.trustStoreType: PKCS12 javax.net.ssl.trustStorePassword: \u0026lt;password of the truststore\u0026gt; oracle.net.tns_admin: \u0026lt;absolute path of the unzipped wallet root directory\u0026gt; For an Oracle SSL database with ONE_WAY SSL enabled, with a PKCS12 wallet, use the following example:\ndomainInfo: RCUDbInfo: databaseType : \u0026#39;SSL\u0026#39; rcu_db_conn_string: \u0026lt;required URL string for use with -run_rcu\u0026gt; rcu_prefix : DEV rcu_admin_password: \u0026lt;required with -run_rcu flag\u0026gt; rcu_schema_password: \u0026lt;required with -run_rcu flag\u0026gt; tns.alias: \u0026lt;alias of ssl db in the tnsnames.ora file\u0026gt; javax.net.ssl.trustStore: \u0026lt;truststore found in the unzipped wallet, i.e ewallet.p12\u0026gt; javax.net.ssl.trustStoreType: PKCS12 javax.net.ssl.trustStorePassword: \u0026lt;password of the truststore\u0026gt; oracle.net.tns_admin: \u0026lt;absolute path of the unzipped wallet root directory\u0026gt; When using a PKCS12 wallet, you must include the Oracle PKI provider to access your wallet. Add the Oracle PKI provider to your Java java.security file. For more information, see Section 2.2.4 \u0026ldquo;How can Oracle wallets be used in Java\u0026rdquo; in SSL with Oracle JDBC Thin Driver.\nAccess a database without using a wallet (non wallet-based access) For a typical database, use the following example:\ndomainInfo: RCUDbInfo: rcu_prefix : DEV # Optional rcu_admin_user for creating RCU schema if -run_rcu flag is specified. Default user is SYS if not specified. # This user must have SYSDBA privilege and this is the equivalent of -dbUser in the RCU utility. rcu_admin_user: superuser rcu_admin_password : \u0026lt;database admin password is required only when you specify -run_rcu flag, will be prompted if not specified\u0026gt; rcu_schema_password : \u0026lt;rcu schema password, will be prompted if not specified\u0026gt; rcu_db_conn_string : dbhost:1521/pdborcl Specify variables for RCU RCU -variables option of the repository creation utility can now be included in the RCUDbInfo section with the key rcu_variables:\ndomainInfo: RCUDbInfo: rcu_variables : xxxx Specify extended XML files for RCU When creating a domain using WDT and the -run_rcu option, you can specify your extended XML files in the RCUDbInfo section.\nThis correlates to the createRepository and dropRepository command-line arguments RCU -compInfoXMLLocation \u0026lt;file path\u0026gt; -storageXMLLocation \u0026lt;file path\u0026gt;.\nInclude your XML files in your archive file using the location wlsdeploy/custom/rcu/config. Then include this relative location in the RCUDbInfo section of the model.\ndomainInfo: RCUDbInfo: compInfoXMLLocation: wlsdeploy/custom/rcu/config/MyComponentInfo.xml storageXMLLocation: wlsdeploy/custom/rcu/config/MyStorage.xml Advanced JRF database use cases In the following examples of the JRF data source sparse model, you can use it to further customize the JRF domain template data sources.\nDefault template data source For example, if you have created RCU schemas with different passwords for different schemas. You can use a sparse model to create a domain with different passwords for different FMW data sources.\ndomainInfo: RCUDbInfo: rcu_prefix : -- FIX ME -- rcu_schema_password : -- FIX ME -- rcu_db_conn_string : -- FIX ME -- resources: JDBCSystemResource: LocalSvcTblDataSource: JdbcResource: JDBCDriverParams: PasswordEncrypted: --FIX ME-- opss-data-source: JdbcResource: JDBCDriverParams: PasswordEncrypted: --FIX ME-- opss-audit-viewDS: JdbcResource: JDBCDriverParams: PasswordEncrypted: --FIX ME-- opss-audit-DBDS: JdbcResource: JDBCDriverParams: PasswordEncrypted: --FIX ME-- mds-owsm: JdbcResource: JDBCDriverParams: PasswordEncrypted: --FIX ME--  This is a sparse model of the FMW data sources discovered from a FMW domain. You can use any part of it to update your domain.\n... resources: JDBCSystemResource: WLSSchemaDataSource: JdbcResource: JDBCConnectionPoolParams: TestTableName: SQL ISVALID MaxCapacity: 75 JDBCDataSourceParams: GlobalTransactionsProtocol: None JNDIName: jdbc/WLSSchemaDataSource JDBCDriverParams: URL: --FIX ME-- PasswordEncrypted: --FIX ME-- DriverName: oracle.jdbc.OracleDriver Properties: user: Value: FMW1_WLS_RUNTIME LocalSvcTblDataSource: Target: admin-server JdbcResource: JDBCConnectionPoolParams: InitialCapacity: 0 CapacityIncrement: 1 TestConnectionsOnReserve: true ConnectionCreationRetryFrequencySeconds: 10 TestTableName: SQL ISVALID TestFrequencySeconds: 300 SecondsToTrustAnIdlePoolConnection: 0 MaxCapacity: 200 JDBCDataSourceParams: GlobalTransactionsProtocol: None JNDIName: jdbc/LocalSvcTblDataSource JDBCDriverParams: URL: --FIX ME-- PasswordEncrypted: --FIX ME-- DriverName: oracle.jdbc.OracleDriver Properties: user: Value: FMW1_STB oracle.net.CONNECT_TIMEOUT: Value: \u0026#39;10000\u0026#39; SendStreamAsBlob: Value: \u0026#39;true\u0026#39; weblogic.jdbc.crossPartitionEnabled: Value: \u0026#39;true\u0026#39; opss-data-source: Target: cluster-1,admin-server JdbcResource: JDBCConnectionPoolParams: TestTableName: SQL ISVALID JDBCDataSourceParams: GlobalTransactionsProtocol: None JNDIName: jdbc/OpssDataSource JDBCDriverParams: URL: --FIX ME-- PasswordEncrypted: --FIX ME-- DriverName: oracle.jdbc.OracleDriver Properties: user: Value: FMW1_OPSS opss-audit-viewDS: Target: cluster-1,admin-server JdbcResource: JDBCConnectionPoolParams: TestTableName: SQL ISVALID JDBCDataSourceParams: GlobalTransactionsProtocol: None JNDIName: jdbc/AuditViewDataSource JDBCDriverParams: URL: --FIX ME-- PasswordEncrypted: --FIX ME-- DriverName: oracle.jdbc.OracleDriver Properties: user: Value: FMW1_IAU_VIEWER opss-audit-DBDS: Target: cluster-1,admin-server JdbcResource: JDBCConnectionPoolParams: TestTableName: SQL ISVALID JDBCDataSourceParams: GlobalTransactionsProtocol: None JNDIName: jdbc/AuditAppendDataSource JDBCDriverParams: URL: --FIX ME-- PasswordEncrypted: --FIX ME-- DriverName: oracle.jdbc.OracleDriver Properties: user: Value: FMW1_IAU_APPEND mds-owsm: Target: cluster-1,admin-server JdbcResource: JDBCConnectionPoolParams: InitialCapacity: 0 TestConnectionsOnReserve: true ConnectionCreationRetryFrequencySeconds: 10 TestTableName: SQL ISVALID TestFrequencySeconds: 300 SecondsToTrustAnIdlePoolConnection: 0 JDBCDataSourceParams: GlobalTransactionsProtocol: None JNDIName: jdbc/mds/owsm JDBCDriverParams: URL: --FIX ME-- PasswordEncrypted: --FIX ME-- DriverName: oracle.jdbc.OracleDriver Properties: user: Value: FMW1_MDS oracle.net.CONNECT_TIMEOUT: Value: \u0026#39;120000\u0026#39; SendStreamAsBlob: Value: \u0026#39;true\u0026#39; Oracle Active Grid Link Data Source (AGL) For setting the data source to access Oracle Active Grid Link database, besides updating the URL, PasswordEncrypted, and the user property value; you can specify additional JDBCOracleParams under JdbcResource of each data source. For example,\nmds-owsm: Target: cluster-1,admin-server JdbcResource: JDBCOracleParams: OnsNodeList: \u0026#39;node1, node2\u0026#39; .... For the complete list of fields, run the WDT command,\nmodelHelp.sh -oracle_home \u0026lt;oracle home\u0026gt; resources:/JDBCSystemResource/JdbcResource/JDBCOracleParams Multi Data Sources If your database does not support high availability natively, such as RAC or AGL, then WebLogic provides a Multi Data Source option, where basically the main data source is a logical data source that contains multiple physical data sources. In order to create a spare model, for each data source, you can:\n Update the templated data source URL, EncryptedPassword, and \u0026lsquo;user\u0026rsquo; property value. In the URL part, you can specify one of the accessible physical database URL. Duplicate each datasource two times. Change the duplicated data source name, JNDIName by appending -1, -2, and such. The -1, -2 data sources are the physical data source; you will need to update their URL too.  For example (note: details replaced by .... for easier reading):\nopss-data-source: .... JDBCDriverParams: URL: jdbc:oracle:thin://@somewhere:1521/db-node1 PasswordEncrypted: \u0026#39;actualpassword` .... \u0026#39;opss-data-source-1\u0026#39;: .... JDBCDataSourceParams: GlobalTransactionsProtocol: None JNDIName: jdbc/OpssDataSource-2 JDBCDriverParams: URL: jdbc:oracle:thin://@somewhere:1521/db-node1 PasswordEncrypted: \u0026#39;actualpassword` .... \u0026#39;opss-data-source-2\u0026#39;: .... JDBCDataSourceParams: GlobalTransactionsProtocol: None JNDIName: jdbc/OpssDataSource-2 JDBCDriverParams: URL: jdbc:oracle:thin://@somewhere:1521/db-node2 PasswordEncrypted: \u0026#39;actualpassword` DriverName: oracle.jdbc.OracleDriver .... Update the original data source to include the physical data source list.  For example,\nopss-data-source: .... JDBCDataSourceParams: DataSourceList: \u0026#39;opss-data-source-1, opss-data-source-2\u0026#39; AlgorithmType: \u0026#39;FailOver\u0026#39; .... For the complete list of fields, run the WDT command,\nmodelHelp.sh -oracle_home \u0026lt;oracle home\u0026gt; resources:/JDBCSystemResource/JdbcResource/JDBCOracleParams "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/custom_config/",
	"title": "Custom configuration",
	"tags": [],
	"description": "",
	"content": "WDT allows you to create or extend the pre-installed type definitions, model filters, variable injectors, and target environments. Starting with WDT 1.10.0, these additional configuration files can be stored outside the $WLSDEPLOY_HOME/lib directory. This allows the files to remain in place if the WDT installation is moved or upgraded to a new version.\nTo use a separate configuration directory, set the WDT_CUSTOM_CONFIG environment variable to the directory to be used for configuration. For example:\n$ export WDT_CUSTOM_CONFIG=/etc/wdtconfig The customized configuration files should be named and organized the same way they would be under the $WLSDEPLOY_HOME/lib directory. For example:\n/etc/wdtconfig injectors *.json (injector files) typedefs *.json (typedef files) targets my-target target.json *.py (filter files) model_filters.json model_variable_injector.json variable_keywords.json This is a full set of files that can be configured. You will need only to add the files you have created or extended. Details for each configuration type are found at:\n Tool property file Model filters Type definitions (See the following Extending a type definition example.) Variable injection The Prepare Model Tool; see Target environments.  The WDT tools will look for each configuration file under $WDT_CUSTOM_CONFIG if specified, then under $WLSDEPLOY_HOME/lib.\nExample: Extending a type definition To extend the WLS type definition, follow these steps:\n Create a directory to use for custom configurations, such as /etc/wdtconfig. Define the WDT_CUSTOM_CONFIG environment variable to point to that directory. Copy the file $WLSDEPLOY_HOME/lib/typedefs/WLS.json to the $WDT_CUSTOM_CONFIG/typedefs directory and rename it, for example MY_WLS.json. Edit MY_WLS.json with any required changes. Run the tool referencing the name of the new type definition, for example:  $ createDomain.cmd -oracle_home /wls12213 -domain_type MY_WLS ... "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/deploy/",
	"title": "Deploy Applications Tool",
	"tags": [],
	"description": "Adds resources and applications to an existing domain, either in offline or online mode.",
	"content": "The Deploy Applications Tool uses a model, the archive, and WLST to deploy applications and resources into an existing WebLogic Server domain in either WLST online or offline mode. When deploying applications and resources from a model, the Deploy Applications Tool focuses primarily on the resources and appDeployments sections of the model. There are exceptions for the domainInfo and topology sections, where those configuration elements are deemed to be \u0026ldquo;application-related.\u0026rdquo; For example, the servers' ServerStart folder has an Arguments and a ClassPath attribute that change the server environment (when started by the Node Manager) that applications may rely on to function properly. Likewise, the domainInfo section contains a list of JAR files that are to be placed in \u0026lt;DOMAIN_HOME\u0026gt;/lib which are relevant to applications for a similar reason.\nThe Deploy Applications Tool will only add or update elements in the specified model. It will not attempt to remove any missing elements that were present in a previous model.\nIn WLST online mode, the tool tries to minimize the need to redeploy the applications and shared libraries, and the need to restart the server. It does this in a few ways:\n If the model references an application or shared library that is already deployed, the tool compares the binaries to determine whether redeployment is required. Redeployment of shared libraries is particularly expensive since all applications using the shared library must be redeployed\u0026ndash;even if the application has not changed. It looks at the knowledge base to determine which attributes require restart when they are changed. If an attribute requires restart, the tool compares the current and model values to make sure that they are different before trying to apply a change.  The goal is to make the tool both able to support iterative deployment and able to minimize service disruption while doing its work when working against a running domain.\nRunning the Deploy Applications Tool in WLST offline mode is very similar to running the Create Domain Tool; simply provide the domain location and archive file, and separate model and variable files, if needed. For example:\n$ weblogic-deploy\\bin\\deployApps.cmd -oracle_home c:\\wls12213 -domain_home domains\\DemoDomain -archive_file DemoDomain.zip -model_file DemoDomain.yaml -variable_file DemoDomain.properties  You can use online mode either on the admin server or from a remote machine. If you are running from the admin server, you can specify domain home directory -domain_home location.\nIf you are running from a remote machine with -remote option, then you do not need to specify the domain home directory -domain_home option.\nTo run the tool in online mode, add the -admin_url and -admin_user arguments with the necessary values to connect to the WebLogic Server Administration Server. For example:\n$ weblogic-deploy\\bin\\deployApps.cmd -oracle_home c:\\wls12213 -domain_home domains\\DemoDomain -archive_file DemoDomain.zip -model_file DemoDomain.yaml -variable_file DemoDomain.properties -admin_url t3://127.0.0.1:7001 -admin_user weblogic  or if running from a remote machine\n$ weblogic-deploy\\bin\\deployApps.cmd -oracle_home c:\\wls12213 -remote -archive_file DemoDomain.zip -model_file DemoDomain.yaml -variable_file DemoDomain.properties -admin_url t3://127.0.0.1:7001 -admin_user weblogic  If you are running from a remote machine, then you do not need to specify the domain home directory -domain_home option, but there are limitations:\n Any attribute in the model that referenced a path into the archive file unless the path begins with wlsdeploy/applications or wlsdeploy/sharedLibraries will result in an error, as the tool cannot remotely create such directory or file. For example, if you specify a domainBin: [ wlsdeploy/domainBin/setUserOverrides.sh] which references a file entry in the archive file wlsdeploy/domainBin/setUserOverrides.sh, the tool will fail with an error. Exploded format application specified in the archive is not supported   As usual, the tool will prompt for the password (it can also be supplied by piping it to standard input of the tool). To bypass the prompt, you can use one of two options. Store the password in an environment variable, and use the variable name with command-line option -admin_pass_env. Store the password in a file. Provide the file name with command-line option -admin_pass_file.\nWhen running the tool in WLST online mode, the deploy operation may require server restarts or a domain restart to pick up the changes. The deploy operation can also encounter situations where it cannot complete its operation until the domain is restarted. To communicate these conditions to scripts that may be calling the Deploy Applications Tool, the shell scripts have three special, non-zero exit codes to communicate these states:\n 103 - The entire domain needs to be restarted. 104 - The domain changes have been canceled because the changes in the model requires a domain restart and -cancel_changes_if_restart_required is specified.  Using output files If the -output_dir command-line argument is specified, the tool will generate output files that provide information about servers and resources that need to be restarted. These files are only applicable for online deployments.\nFor more information about these files, see Using output files for the Update Domain Tool.\nUsing an encrypted model If the model or variables file contains passwords encrypted with the WDT Encryption tool, decrypt the passwords during create with the -use_encryption flag on the command line to tell the Deploy Applications Tool that encryption is being used and to prompt for the encryption passphrase. As with the database passwords, the tool can also read the passphrase from standard input (for example, stdin) to allow the tool to run without any user input. You can bypass the stdin prompt with two other options. Store the passphrase in an environment variable, and use the environment variable name with command-line option -passphrase_env. Another option is to create a file containing the passphrase value. Pass this filename using the command-line option -passphrase_file.\nUsing multiple models The Deploy Applications Tool supports the use of multiple models, as described in Using multiple models.\nParameter table for deployApps    Parameter Definition Default     -admin_pass_env An alternative to entering the admin password at a prompt. The value is an environment variable name that WDT will use to retrieve the password.    -admin_pass_file An alternative to entering the admin password at a prompt. The value is a the name of a file that contains a password string that the tool will read to retrieve the password.    -admin_url The admin server URL used for online deploy.    -admin_user The admin user name used for online deploy.    -archive_file The path to the archive file. If the -model_file argument is not used, the model file in this file will be used. This can also be specified as a comma-separated list of archive files. The overlapping contents in each archive take precedence over previous archives in the list.    -cancel_changes_if_restart_required Cancel the changes if the update requires a domain restart.    -discard_current_edit Discard all current domain edits before starting the update.    -domain_home (Required). The location of the existing domain home.    -domain_type The type of domain. (for example, WLS, JRF) WLS   -model_file The location of the model file. This can also be specified as a comma-separated list of model locations, where each successive model layers on top of the previous ones.    -oracle_home Home directory of the Oracle WebLogic installation. Required if the ORACLE_HOME environment variable is not set.    -output_dir If specified, files containing restart information are written to this directory, including restart.file, non_dynamic_changes.file, and results.json.    -passphrase_env An alternative to entering the encryption passphrase at a prompt. The value is an environment variable name that WDT will use to retrieve the passphrase.    -passphrase_file An alternative to entering the encryption passphrase at a prompt. The value is the name of a file with a string value which WDT will read to retrieve the passphrase.    -use_encryption One or more of the passwords in the model or variables file(s) are encrypted and must be decrypted. Java 8 or later is required for this feature.    -variable_file The location of the property file containing the values for variables used in the model. This can also be specified as a comma-separated list of property files, where each successive set of properties layers on top of the previous ones.    -wait_for_edit_lock Skip checks for active edit sessions and pending changes before trying to acquire the WLST online edit lock to modify domain configuration.    -remote Deploy main from a remote machine.     "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/jdbc-model/",
	"title": "Modeling a JDBC data source",
	"tags": [],
	"description": "A domain model with a typical configuration for a JDBC data source.",
	"content": "This WDT domain model sample section has a typical configuration for a JDBC data source, including targeting information, connection pool parameters, and other details.\nresources: JDBCSystemResource: datasource-1: Target: AdminServer,cluster-1 JdbcResource: DatasourceType: GENERIC JDBCConnectionPoolParams: ConnectionReserveTimeoutSeconds: 10 InitialCapacity: 0 MaxCapacity: 5 MinCapacity: 0 TestConnectionsOnReserve: true TestTableName: SQL ISVALID JDBCDriverParams: DriverName: oracle.jdbc.OracleDriver PasswordEncrypted: \u0026#39;@@PROP:jdbc.password@@\u0026#39; URL: jdbc:oracle:thin:@//localhost:1521/myDB Properties: user: Value: scott There are additional sub-folders and attributes available for more configuration options. These can be determined using the Model Help Tool. For example, this command will list the attributes and sub-folders for the JDBCSystemResource/JdbcResource folder:\n$ ${WDT_HOME}/bin/modelHelp.sh -oracle_home /tmp/oracle resources:/JDBCSystemResource/JdbcResource For this sample, the target cluster cluster-1 should be defined elsewhere within this model, or should already exist in a domain that is being updated.\nIt is recommended that credential fields, such as PasswordEncrypted, should not be stored as clear text in the model. Those values can be referenced in a separate variables file or in Kubernetes secrets, or the model can be encrypted using the Encrypt Model Tool.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/",
	"title": "Samples",
	"tags": [],
	"description": "",
	"content": "These typical use case scenarios show you how some common configurations can be represented in the model.\n Customizing the Administration Server  Configure the Administration Server using a domain model.\n Modeling a configured cluster  A domain model with a typical configuration for a configured cluster.\n Modeling a WTC configuration  A domain model with a typical configuration for a WebLogic Tuxedo Connector.\n Modeling a JDBC data source  A domain model with a typical configuration for a JDBC data source.\n Modeling a Work Manager  A domain model with a typical configuration for Work Manager.\n Modeling security providers  Special handling and model semantics for WebLogic Server security configuration.\n Modeling Oracle Platform Security Services  Initializing OPSS configuration as part of WebLogic domain creation.\n Modeling WebLogic users, groups, and roles  Establishing users, groups, and global roles as part of WebLogic domain creation.\n Modeling WebLogic user password credential mapping  A model for creating user password credential mappings.\n Configuring Oracle Diagnostic Logging  A model for configuring Oracle Diagnostic Logging (ODL).\n Configuring Oracle HTTP Server  A model for configuring Oracle HTTP Server (OHS).\n Targeting server groups  Targeting server groups to managed servers and dynamic server groups to dynamic clusters.\n Using WDT with WebLogic Kubernetes Operator  Using WDT with WebLogic Kubernetes Operator.\n "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/",
	"title": "Tools configuration",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/logging/",
	"title": "Logging",
	"tags": [],
	"description": "",
	"content": "The WebLogic Deploy Tooling has a built-in logging framework based on java.util.logging. Its logging configuration is specified in $WDT_HOME/etc/logging.properties. By default, the logging framework writes to both the console and a log file.\nLog file By default, WDT tools write their log files to the $WDT_HOME/logs directory and the log file name reflects the name of the tool. For example, if you run the validateModel tool then the log file will be $WDT_HOME/logs/validateModel.log. These log files are overwritten each time you run a particular tool so the file contains only the logs from the last tool invocation.\nIf the $WDT_HOME/logs directory is not writable by the user running the tool, the logging framework will search for a location to write the logs. The user must have write permission on the directory in order for it to be selected. The search order is as follows:\n Check the WLSDEPLOY_LOG_DIRECTORY environment variable. Check the current working directory (as defined by the user.dir Java system property) and create a logs subdirectory. Check the temp directory (as defined by the java.io.tmpdir Java system property) and create a wdt-logs subdirectory.  If none of these locations are writable, the logging framework prints an error message to stderr and exits.\nConsole output WDT tools output logging information to stdout and stderr, as appropriate. By default, only INFO level messages are sent to stdout. All WARNING and SEVERE messages are set to stderr. In addition to regular log messages generated as the tool runs, the tools will produce a summary at the end of tool execution that gives the user an overview of the tool execution status. For example, the validateModel tool execution with no warnings or errors will produce output that looks similar to this:\nIssue Log for validateModel version 2.0.0 running WebLogic version 12.2.1.4.0.210930 offline mode: Total: WARNING : 0 SEVERE : 0 Logging levels As mentioned previously, WDT\u0026rsquo;s logging framework is based on java.util.logging so all logging levels defined in the java.utiul.logging.Level class apply to WDT loggers. For a quick review of those levels, see the javadoc.\nWDT uses hierarchical loggers that align with the purpose of the code being executed. The root logger is named wlsdeploy. Many loggers exist underneath the root logger; for example, wlsdeploy.create, wlsdeploy.discover, and wlsdeploy.util. By default, the WDT logging.properties file sets the logging level of the root and several important loggers. If the level for a particular logger is not set, that logger will use the level of its parent logger. This delegation to the parent logger is recursive up the hierarchy until it finds a level to use.\nIn WDT, the log file will collect log entries from all loggers based on the logger\u0026rsquo;s level while the console output is limited to INFO and above only. Log entries written to the console will not display any exception stack traces associated with a log entry. To see those, you must look at the log file. The WDT logging framework supports using the wlsdeploy.debugToStdout Java system property to allow debug log messages (those logged at the FINE level or below) to appear in stdout as long as the loggers to which the messages are logged are not filtering those log levels. For example, doing the following will cause debug output to be written to the console:\nexport WLSDEPLOY_PROPERTIES=-Dwlsdeploy.debugToStdout=true weblogic-deploy/bin/prepareModel.sh ... Log handlers WDT uses several log handlers to handle logging output of data to various sources.\n   Log Handler Output Destination Description     java.util.logging.FileHandler WDT tool log file The standard java.util.logging file handler.   oracle.weblogic.deploy.logging.StdoutHandler stdout WDT handler that writes INFO level messages to the console.   oracle.weblogic.deploy.logging.StderrHandler stderr WDT handler that writes WARNING and SEVERE level messages to the console.   oracle.weblogic.deploy.tooling.SummaryHandler stdout WDT handler that writes the tool\u0026rsquo;s execution summary information to the console.    By default, all four handlers are used and configured appropriately. The logging framework intentionally limits the configurability of these handlers. Only the following logging.properties file settings are allowed.\n   Property Value(s) Allowed Behavior When Set     handlers comma-separated list of handlers The list of handlers to use (removing a handler from the list is the same as setting its level property to OFF).   java.util.logging.FileHandler.level OFF No logging output will be saved in the log file.   oracle.weblogic.deploy.logging.StdoutHandler.level OFF No INFO level logging output will be written to the console.   oracle.weblogic.deploy.logging.StderrHandler.level OFF No WARNING or ERROR level logging output will be written to the console.   oracle.weblogic.deploy.logging.SummaryHandler.level OFF No tool execution summary output will be written to the console.   oracle.weblogic.deploy.logging.SummaryHandler.size Any number Limits the number of memory-buffered WARNING and ERROR log records (default is 3000).    Use the WLSDEPLOY_LOG_HANDLERS environment variable as an alternative to specifying the list of handlers in the logging.properties file\u0026rsquo;s handlers property.\nAny attempts to set other configuration for these log handlers will simply be discarded by the WDT logging framework at startup.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/buildwdt/",
	"title": "Build WebLogic Deploy Tool",
	"tags": [],
	"description": "",
	"content": "Prerequisites You will need the following software installed in your local build environment:\n Oracle WebLogic Server installation version 12.2.1 and later JDK version 8 Maven 3 and later  Specify the WLST location Execution of the unit tests requires a WebLogic Server installation, because the tests must be run within WLST.\nThe WLST directory can be specified in one of two ways:\n  Specify the -Dunit-test-wlst-dir=\u0026lt;wlst-directory\u0026gt; on the mvn command line.\n  Create a file .mvn/maven.config file in the project directory, containing a single line with the -Dunit-test-wlst-dir=\u0026lt;wlst-directory\u0026gt; value. The .mvn directory contains a maven.config-template file that can be copied and used as a starting point.\n  In these cases, \u0026lt;wlst-directory\u0026gt; refers to the fully-qualified path to the WLST script (wlst.sh or wlst.cmd).\nIf you are using an IDE for development and building, creating a maven-config file will allow some Maven tasks to be performed within the IDE.\nBuild commands If you are making changes to the project, you can build the project using this command line:\n$ mvn -Dunit-test-wlst-dir=\u0026lt;wlst-directory\u0026gt; clean install\nThis will build the entire project and run the unit tests. Omit the -Dunit-test-wlst-dir= argument if you have created a maven.config file, as described above.\nAnother option for specifying the WLST directory is to set the environment variable WLST_DIR. It is not necessary to use both, and the -D setting will take precedence.\nIf you are not making changes and are only interested in building the latest version, then you can skip the unit tests, using this command line:\n$ mvn -DskipTests clean install\nThe resulting installer ZIP file built is under the WLSDEPLOY_HOME/installer/target directory.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/discover/",
	"title": "Discover Domain Tool",
	"tags": [],
	"description": "Introspects an existing domain and creates a model file describing the domain and an archive file of the binaries deployed to the domain.",
	"content": "The Discover Domain Tool provides a bootstrapping mechanism to creating a model and archive file by inspecting an existing domain and gathering configuration and binaries from it. Note that the model file produced by the tool is not directly usable by the Create Domain Tool or the Deploy Applications Tool because the Discover Domain Tool does not discover the passwords from the existing domain. Instead, it puts a --FIX ME-- placeholder for passwords it finds. Domain users are also not discoverable so the tool injects the same placeholder value in the AdminUserName and AdminPassword fields in the domainInfo section. The idea of this tool is simply to provide a starting point where the user can edit the generated model and archive file to suit their needs for running one of the other tools.\nTo run the Discover Domain Tool, simply provide the Oracle home and domain location. Provide a location and file name for the model file and archive file where the discovered domain information will be written. The model can be generated in either YAML or JSON format. Simply label the file name with the correct suffix. Both a sh and cmd script are provided.\nExample of basic discoverDomain:\n$ weblogic-deploy\\bin\\discoverDomain.cmd -oracle_home c:\\wls12213 -domain_home domains\\DemoDomain -archive_file DiscoveredDemoDomain.zip -model_file DiscoveredDemoDomain.yaml  When creating the archive, the tool will try to gather all binaries, scripts, and required directories referenced by the domain configuration with the following caveats.\n Any binaries referenced from the ORACLE_HOME will not be gathered, as they are assumed to exist in any target domain to which model-driven operations will be applied. Doing this is key to allowing the model to be WebLogic Server version independent. In its current form, the Discover Domain Tool will only gather binaries and scripts that are accessible from the local machine. Warnings will be generated for any binaries or scripts that cannot be found but the configuration for those binaries will still be collected, where possible. It is the user\u0026rsquo;s responsibility to add those missing files to the archive in the appropriate locations and edit the the model, as needed, to point to those files inside the archive using the relative path inside the archive (for example, wlsdeploy/applications/myapp.ear). You can you run the Discover Domain Tool without generating an archive file if you wish to inspect the model file. A create or update domain requires a valid archive file for any binaries, scripts or directories that will be installed into the domain.  You can customize what is generated in the model for password attributes by providing a variable file location and name. This file is a text properties file which will contain a key=value for each password found in the model. The key is a unique token name for a password attribute, and the value is the replacement value; in this case, an empty string. The attribute in the model is injected with the token name and property field notation. For example, @@PROP:AdminUserName@@ or @@PROP:JDBCSystemResource.\u0026lt;Name\u0026gt;.JdbcResource.JDBCDriverParams.PasswordEncrypted@@.\nA command-line example containing the variable file name:\n$ weblogic-deploy\\bin\\discoverDomain.cmd -oracle_home c:\\wls12213 -domain_home domains\\DemoDomain -archive_file DiscoveredDemoDomain.zip -model_file DiscoveredDemoDomain.json -variable_file DiscoverDemoDomain.properties  You can use online mode either on the admin server or from a remote machine. If you are running from the admin server, you can specify domain home directory -domain_home location.\nIf you are running from a remote machine, then you do not need to specify the domain home directory -domain_home option\nTo discover the domain using online WLST, simply include the admin user name and admin URL on the command line. The tool will prompt for a password to be entered into STDIN. To bypass the prompt, you can use one of two options. Store the password in an environment variable, and use the variable name with command-line option -admin_pass_env. Store the password value in a file. Provide the file name with command-line option -admin_pass_file.\nAn example of running in online WLST mode from the admin server:\n$ weblogic-deploy/bin/discoverDomain.sh -oracle_home /u01/oracle -domain_home /u01/oracle/domains/DemoDomain -archive_file ./DiscoveredDemoDomain.zip -model_file ./DiscoveredDemoDomain.yaml -admin_user weblogic -admin_url t3://localhost:7001  An example of running in online WLST mode from a remote machine:\n$ weblogic-deploy/bin/discoverDomain.sh -oracle_home /u01/oracle -remote -model_file ./DiscoveredDemoDomain.yaml -admin_user weblogic -admin_url t3://localhost:7001  Note that the command must run on the same system where the domain binaries are located in order to successfully gather the corresponding binaries into the archive file.\nWhen a domain is created using custom or product templates, the templates will install resources into the domain that do not need to be discovered for the model or collected into the archive. The domain type argument, which corresponds to a domain typedef file, must describe the type of domain in order for these resources and files to be ignored. By default, discover runs using domain type WLS, which assumes only the WebLogic Server template was applied to the domain. The tool has canned typedefs for two other domain types, RestrictedJRF and JRF. You may use these domain types, or another custom typedef. For more information, refer to Domain type definitions.\nAn example of using the domain type argument:\n$ weblogic-deploy\\bin\\discoverDomain.cmd -oracle_home c:\\wls12213 -domain_home domains\\DemoDomain -archive_file DiscoveredDemoDomain.zip -model_file DiscoveredDemoDomain.yaml -domain_type RestrictedJRF  Before the model is persisted to the model file, any variable injectors or model filters are run, in that order. The final step is validation, which validates the contents of the model, archive and variable file. If the validation is successful, the model is persisted. For more information on these three topics, see:\n Variable injection Model filters Validate Model Tool  The resulting model can also be modified for compatibility with specific target environments, such as Oracle WebLogic Server Kubernetes Operator. For more information, see Target environments.\nAny problems (or success) will be listed in the Discover Domain Tool summary. The summary will print the version of the tool and Oracle home, and the WLST mode with which the tool was run (online or offline). A recap of all Warning and Severe messages will be listed, along with a total.\nAn example of a summary with a WARNING message:\nIssue Log for discoverDomain version 1.5.2-SNAPSHOT running WebLogic version 10.3.6.0 offline mode: WARNING Messages: 1. WLSDPLY-06200: Unable to get the Security Realm Provider name in version 10.3.6.0 with offline wlst. The SecurityConfiguration will not be added to the model. The work-around is to manually add the Security Configuration to the model or to discover the domain in online mode : Invalid Security Provider name \u0026quot;Provider\u0026quot; found for provider type at location /SecurityConfiguration/Realm/Adjudicator. Total: WARNING : 1 SEVERE : 0 Environmental variables The following environment variables may be set.\n JAVA_HOME The location of the JDK. This must be a valid Java 7 or later JDK. WLSDEPLOY_HOME The location of the WebLogic Deploy Tooling installation. By default, the location is calculated from the location of the discoverDomain script. WLSDEPLOY_PROPERTIES System properties that will be passed to WLST.  Opening an issue against Discover Domain Please provide the STDOUT and STDERR log streams in the GitHub Issue. If the summary is not listed (unhandled exception stack trace occurs), be sure and include the Oracle and WDT installation versions and whether the tool was run in online or offline WLST mode. If possible, provide the model, variable and archive files, and the log file, discoverDomain.log, from location \u0026lt;install home\u0026gt;\\weblogic-deploy\\log.\nParameter table for discoverDomain    Parameter Definition Default     -archive_file The path to the archive file.    -admin_pass_env An alternative to entering the admin password at a prompt. The value is an environment variable name that WDT will use to retrieve the password.    -admin_pass_file An alternative to entering the admin password at a prompt. The value is a the name of a file that contains a password string that the tool will read to retrieve the password.    -admin_url The admin server URL used for online discovery.    -admin_user The admin user used for online discovery.    -domain_home (Required). The location of the existing domain home.    -domain_type The type of domain. (for example, WLS, JRF) WLS   -java_home Overrides the JAVA_HOME value when discovering domain values to be replaced with the Java home global token.    -model_file The path to the model file. If not present, model file will be stored in archive file.    -oracle_home Home directory of the Oracle WebLogic installation. Required if the ORACLE_HOME environment variable is not set.    -output_dir Output directory required for -target.    -skip_archive Do not generate an archive file. The -archive_file option will be ignored.    -target The target output type. The default is wko. For more information about target types, see Target Environments.    -remote Update the domain from a remote machine.     "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/limitations/limitations/",
	"title": "Limitations",
	"tags": [],
	"description": "Review existing WDT limitations.",
	"content": "The following sections describe known limitations for WebLogic Deploy Tooling. Each issue may contain a workaround or an associated issue number.\nDiscover Domain Tool SEVERE messages ISSUE: The discoverDomain STDOUT contains many SEVERE messages about cd() and ls() when it is run against a 12.2.1.0 domain. The Discover Domain Tool navigates through the domain MBeans using WLST to determine which MBeans are present in a domain. When it tests an MBean that is not present, an error message is logged by WLST. There is no 12.2.1.0 PSU available to address this WLST problem. It is resolved in 12.2.1.1.\nACTION: Ignore the following messages logged during discovery of a 12.2.1.0 domain.\n\u0026lt;Jan 14, 2019 1:14:21 PM\u0026gt; \u0026lt;SEVERE\u0026gt; \u0026lt;CommandExceptionHandler\u0026gt; \u0026lt;handleException\u0026gt; \u0026lt;\u0026gt; \u0026lt;Error: cd() failed.\u0026gt; \u0026lt;Jan 14, 2019 1:14:21 PM\u0026gt; \u0026lt;SEVERE\u0026gt; \u0026lt;CommandExceptionHandler\u0026gt; \u0026lt;handleException\u0026gt; \u0026lt;\u0026gt; \u0026lt;Error: ls() failed.\u0026gt; Create Domain Tool with 11g JRF domains ISSUE: The Create Domain Tool cannot initialize RCU for 11g JRF domains. The tool will issue error messages in the log and terminate the create process.\nACTION: Run the WLS rcu command before executing createDomain for JRF domains\nCredential in security configuration ISSUE: For WLS versions prior to 14.1.1, there is a problem setting the CredentialEncrypted attribute in the topology/SecurityConfiguration folder. The value is not encrypted properly in the configuration and the domain will fail to start with the error:\njava.lang.IllegalArgumentException: In production mode, it's not allowed to set a clear text value to the property: CredentialEncrypted of SecurityConfigurationMBean ACTION: Contact Oracle Support to obtain the patch for bug number 30874677 for your WebLogic Server version before running the tool.\nAssigning security groups to users ISSUE: For WLS versions prior to 14.1.1, there is a problem setting the GroupMemberOf attribute in the topology/Security/User folder. The value is not persisted correctly, and the assignment will not be present when the domain is started.\nACTION: Contact Oracle Support to obtain the patch for bug number 30319071 for your WebLogic Server version before running the tool.\nProblems setting RotateLogOnStartup attribute ISSUE: For existing WLS versions, there is a problem setting the RotateLogOnStartup attribute in various log file folders. The value is not persisted correctly, and the assignment will not be present when the domain is started.\nACTION: Contact Oracle Support to obtain the patch for bug number 29547985 for your WebLogic Server version before running the tool.\nDiscover Domain tool does not discover users or groups ISSUE: Discovering a domain does not attempt to discover users and groups defined in any configured Authentication Provider type.\nACTION: This should only be an issue for the domains using the DefaultAuthenticator, which uses the Embedded LDAP server that runs inside WebLogic Server as its user and group store. Oracle recommends using an authentication provider with an external user and group store for managing users and groups. For example, a Microsoft Active Directory server with the LDAP Authenticator or a database server with the SQL Authenticator. This allows any domain created using the discovered model to use the same user and group store so that there is no need to export/import users and groups. If a new user and group store is desired, these external stores natively provide export and import mechanisms for moving users and groups. If this is not an option, then the user will need to hand-edit the discovered model file to add any users and groups not created by default.\nJRF Domain configuration files containing clear text password ISSUE: After a JRF domain is created, the jps-config.xml and jps-config-jse.xml files contain clear text password for the key store.\nACTION: You will need to create a key store using Oracle Wallet and change the key store provider priority in the JVM. See Oracle Support Doc ID 2215283.1 for details. If you are creating a JRF domain using Oracle Autonomous Transaction Database, you can use the SSO key stores instead of JKS key stores,\nthe generated jps-config.xml and jps-config-jse.xml files will then use the SSO key stores without any clear text password.\ndomainInfo: RCUDbInfo: databaseType : ATP rcu_prefix : FMW rcu_schema_password : \u0026#39;...\u0026#39; rcu_admin_password: \u0026#39;...\u0026#39; rcu_db_user : admin tns.alias : myatp_tp javax.net.ssl.keyStoreType: SSO javax.net.ssl.trustStoreType: SSO "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/workmanager-model/",
	"title": "Modeling a Work Manager",
	"tags": [],
	"description": "A domain model with a typical configuration for Work Manager.",
	"content": "This WDT domain model sample section has typical configurations for a Work Manager and its related request classes and constraints. These elements are configured in the SelfTuning folder in the resources section of the model.\nresources: SelfTuning: Capacity: capacity40: Target: cluster-1 Count: 40 MaxThreadsConstraint: threeMax: Target: cluster-1 Count: 3 MinThreadsConstraint: twoMin: Target: cluster-1 Count: 2 FairShareRequestClass: appFairShare: Target: cluster-1 FairShare: 50 highFairshare: Target: cluster-1 FairShare: 80 lowFairshare: Target: cluster-1 FairShare: 20 ResponseTimeRequestClass: fiveSecondResponse: Target: cluster-1 GoalMs: 5000 ContextRequestClass: appContextRequest: Target: cluster-1 ContextCase: Case1: GroupName: Administrators RequestClassName: highFairshare Target: cluster-1 Case2: UserName: weblogic RequestClassName: lowFairshare Target: cluster-1 WorkManager: myWorkManager: Capacity: capacity40 ContextRequestClass: appContextRequest # FairShareRequestClass: appFairShare IgnoreStuckThreads: true MaxThreadsConstraint: threeMax MinThreadsConstraint: twoMin # ResponseTimeRequestClass: fiveSecondResponse Target: cluster-1 In this sample, assignments for FairShareRequestClass and ResponseTimeRequestClass are included as comments under myWorkManager. A Work Manager can only specify one request class type.\nThere are additional sub-folders and attributes available for more configuration options. These can be determined using the Model Help Tool. For example, this command will list the attributes and sub-folders for the WorkManager folder:\n$ ${WDT_HOME}/bin/modelHelp.sh -oracle_home /tmp/oracle resources:/WorkManager For this sample, the target cluster cluster-1 should be defined elsewhere within this model, or should already exist in a domain that is being updated.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools-config/tool_prop/",
	"title": "Tool property file",
	"tags": [],
	"description": "",
	"content": "You can configure or tune WebLogic Deploy Tooling tools using the tool property file. This property file is installed as \u0026lt;weblogic-deploy\u0026gt;/lib/tool.properties. You may change the value of any of the properties in this file to tune the WDT tool. Another option is to configure the tool properties in a Custom Configuration directory. Create the tool.properties file in the $WDT_CUSTOM_CONFIG directory.\nIf a property is removed from the file, or a property value is incorrectly formatted, a WARNING message is logged and an internal default value used instead of the missing or bad value.\n   Property Description     connect.timeout The number of milliseconds that WLST waits for the online connect command to complete. A value of 0 means the operation will not timeout.   activate.timeout The number of milliseconds that WLST waits for the activation of configuration changes to complete. A value of -1 means the operation will not timeout.   deploy.timeout The number of milliseconds that WLST waits for the undeployment process to complete. A value of 0 means the operation will not timeout.   redeploy.timeout The number of milliseconds that WLST waits for the redeployment process to complete. A value of 0 means the operation will not timeout.   undeploy.timeout The number of milliseconds that WLST waits for the undeployment process to complete. A value of 0 means the operation will not timeout.   start.application.timeout The number of milliseconds that WLST waits for the start application process to complete. A value of 0 means the operation will not timeout.   stop.application.timeout The number of milliseconds that WLST waits for the stop application process to complete. A value of 0 means the operation will not timeout.   set.server.groups.timeout Specifies the amount of time the set server groups connection can be inactive before the connection times out.   wlst.edit.lock.acquire.timeout Specifies the amount of time in milliseconds the WLST online startEdit command will wait trying to acquire the edit lock before it times out.   wlst.edit.lock.release.timeout Specifies the amount of time in milliseconds the WLST online startEdit command will wait for the edit lock to be released before releasing it automatically.   wlst.edit.lock.exclusive Specifies whether the edit lock acquired by startEdit should be exclusive or shared (default is shared).   yaml.max.file.size The maximum size of the YAML model file that the WDT SnakeYAML parser will allow. The default value of \u0026lsquo;0\u0026rsquo; uses the SnakeYAML default setting of 3145728 (i.e., 3 MB).   use.deprecation.exit.code Whether deprecation messages should cause WDT tools to exit with a non-zero exit code (default is false).   disable.rcu.drop.schema Whether the RCU drop step should be skipped when running Create Domain with the -run_rco switch (default is false).    You can override the value of a single property using a Java System property with the name wdt.config.\u0026lt;tool-property-name\u0026gt;. For example, adding -Dwdt.config.connect.timeout=5000 will set the effective connect.timeout property to 5000 milliseconds, regardless of what the value in the tool.properties file might be. To pass one or more of these properties to a WDT shell script (e.g., createDomain.sh), simply set the WLSDEPLOY_PROPERTIES environment variable prior to calling the shell script. For example:\nWLSDEPLOY_PROPERTIES=\u0026#34;-Dwdt.config.connect.timeout=5000 -Dwdt.config.disable.rcu.drop.schema=true\u0026#34; export WLSDEPLOY_PROPERTIES $WLSDEPLOY_HOME/bin/createDomain.sh ... "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/",
	"title": "Developer Guide",
	"tags": [],
	"description": "",
	"content": "Developer Guide The Developer Guide provides information for developers who want to understand or contribute to the code.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/encrypt/",
	"title": "Encrypt Model Tool",
	"tags": [],
	"description": "Encrypts the passwords in a model (or its variable file) using a user-provided passphrase.",
	"content": " To meet Oracle\u0026rsquo;s security standards, the encryption algorithms require JDK 8 to run.\n Models contain WebLogic Server domain configuration. Certain types of resources and other configurations require passwords; for example, a JDBC data source requires the password for the user establishing the database connection. When creating or configuring a resource that requires a password, that password must be specified either in the model directly or in the variable file. Clear-text passwords are not conducive to storing configurations as source, so the Encrypt Model Tool gives the model author the ability to encrypt the passwords in the model and variable file using passphrase-based, reversible encryption. When using a tool with a model containing encrypted passwords, the encryption passphrase must be provided, so that the tool can decrypt the password in memory to set the necessary WebLogic Server configuration (which supports its own encryption mechanism based on a domain-specific key). While there is no requirement to use the WebLogic Deploy Tooling encryption mechanism, it is highly recommended because storing clear-text passwords on disk is never a good idea.\nThe Create, Update and Deploy tools can take a set of models. The Encrypt model will encrypt a set of models. Each model is encrypted using the same passphrase and written back to its original location.\nWebLogic Deploy Tooling also supports the use of domain-encrypted passwords directly in the model. The Encrypt Model Tool should not be used in tandem with this method.\n Start with the following example model:\ndomainInfo: AdminUserName: weblogic AdminPassword: welcome1 ServerStartMode: prod topology: Name: DemoDomain AdminServerName: AdminServer Cluster: mycluster: Server: AdminServer: ListenAddress: 192.168.1.50 ListenPort: 7001 Machine: machine1 m1: ListenAddress: 192.168.1.50 ListenPort: 8001 Cluster: mycluster Machine: machine1 m2: ListenAddress: 192.168.1.51 ListenPort: 8001 Cluster: mycluster Machine: machine2 Machine: machine1: NodeManager: ListenAddress: 192.168.1.50 ListenPort: 5556 machine2: NodeManager: ListenAddress: 192.168.1.51 ListenPort: 5556 SecurityConfiguration: NodeManagerUsername: weblogic NodeManagerPasswordEncrypted: welcome1 RestfulManagementServices: Enabled: true Security: Group: FriscoGroup: Description: The WLS Deploy development group User: Robert: Password: welcome1 GroupMemberOf: [ Administrators, FriscoGroup ] Derek: Password: welcome1 GroupMemberOf: \u0026#39;Administrators, FriscoGroup\u0026#39; Richard: Password: welcome1 GroupMemberOf: [ FriscoGroup ] Carolyn: Password: welcome1 GroupMemberOf: FriscoGroup Mike: Password: welcome1 GroupMemberOf: FriscoGroup Johnny: Password: welcome1 GroupMemberOf: FriscoGroup Gopi: Password: welcome1 GroupMemberOf: FriscoGroup To run the Encrypt Model Tool on the model, run the following command:\n$ weblogic-deploy\\bin\\encryptModel.cmd -oracle_home c:\\wls12213 -model_file UnencryptedDemoDomain.yaml  The tool will prompt for the encryption passphrase twice and then encrypt any passwords it finds in the model, skipping any password fields that have variable values, to produce a result that looks like the following model. You can bypass the stdin prompt with two other options. Store the passphrase in an environment variable, and use the environment variable name with command-line option -passphrase_env. Another option is to create a file containing the passphrase value. Pass this filename using the command-line option -passphrase_file.\ndomainInfo: AdminUserName: weblogic AdminPassword: \u0026#39;{AES}a0dacEQ4Q2JnTmI4VHp5NjIzVHNPRFg5ZjRiVDJ4NzU6T1M0SGYwM2xBeHdRdHFWVTpWZEh6bkd4NzZSQT0=\u0026#39; ServerStartMode: prod topology: Name: DemoDomain AdminServerName: AdminServer Cluster: mycluster: Server: AdminServer: ListenAddress: 192.168.1.50 ListenPort: 7001 Machine: machine1 m1: ListenAddress: 192.168.1.50 ListenPort: 8001 Cluster: mycluster Machine: machine1 m2: ListenAddress: 192.168.1.51 ListenPort: 8001 Cluster: mycluster Machine: machine2 Machine: machine1: NodeManager: ListenAddress: 192.168.1.50 ListenPort: 5556 machine2: NodeManager: ListenAddress: 192.168.1.51 ListenPort: 5556 SecurityConfiguration: NodeManagerUsername: weblogic NodeManagerPasswordEncrypted: \u0026#39;{AES}WndJQWNySWpoY0VEbFpmR2V1RFhvamVFdGwzandtaFU6L1d4V0dPRFpsaXJIUkl2djpQdUdLaTloR1IxTT0=\u0026#39; RestfulManagementServices: Enabled: true Security: Group: FriscoGroup: Description: The WebLogic Deploy development group User: Robert: Password: \u0026#39;{AES}VFIzVmdwcWNLeHBPaWhyRy82VER6WFV6aHRPbGcwMjQ6bS90OGVSTnJxWTIvZjkrRjpjSzBQUHlOWWpWTT0=\u0026#39; GroupMemberOf: [ Administrators, FriscoGroup ] Derek: Password: \u0026#39;{AES}R1BTM21ZSkxpdTNIZjNqcTlsSC9PeHV4aXJoT3kxazM6M1dLOXBLeCtlc1lsVDUrWjo5VitHZUxCcjZnOD0=\u0026#39; GroupMemberOf: \u0026#39;Administrators, FriscoGroup\u0026#39; Richard: Password: \u0026#39;{AES}Y3FkQmRIRGhjZEtlRjVkVVdLQU1Eb09LWDIzMlhUWVo6MjllVExsMmNmNzJzZDFjaTpNcVNDbUs2cnRFRT0=\u0026#39; GroupMemberOf: [ FriscoGroup ] Carolyn: Password: \u0026#39;{AES}cW8wczJqZXJZOHVsTGNOTmlqTGpuZGFoSkY2ME5WbTk6c0VaWGs1ME5pemlKdC9wajpFaTJPRS9ZQlcvND0=\u0026#39; GroupMemberOf: FriscoGroup Mike: Password: \u0026#39;{AES}cnF6Z3JOVWcvc0czN3JVb1g5T2FidmRsSU51anJCa0Y6UlBsNVFsOFlXU29xUlY1aDp3VWZWYU5VOVRkMD0=\u0026#39; GroupMemberOf: FriscoGroup Johnny: Password: \u0026#39;{AES}UWJ5Y25Ma2RHTkNMVTZ1RnlhRkNaTUxXaXV4SjBjaWg6citwTDQvelN1aUlPdnZaSDpCMEdSWGg2ZlVJUT0=\u0026#39; GroupMemberOf: FriscoGroup Gopi: Password: \u0026#39;{AES}MWJGcnhtZlNyWXVrU1VXMVFxZFEvQThoS1hPN2FQdDc6MmRPaUF2Y1FCQ3VIK3MydDpZaFR5clBrN1FjOD0=\u0026#39; GroupMemberOf: FriscoGroup If the model stores passwords in the variables file, like the following model:\nresources: JDBCSystemResource: Generic1: Target: mycluster JdbcResource: JDBCDataSourceParams: JNDIName: [ jdbc/generic1 ] GlobalTransactionsProtocol: TwoPhaseCommit JDBCDriverParams: DriverName: oracle.jdbc.xa.client.OracleXADataSource URL: \u0026#39;jdbc:oracle:thin:@//@@PROP:db.url@@\u0026#39; PasswordEncrypted: \u0026#39;@@PROP:db.password@@\u0026#39; Properties: user: Value: \u0026#39;@@PROP:db.user@@\u0026#39; oracle.net.CONNECT_TIMEOUT: Value: 5000 oracle.jdbc.ReadTimeout: Value: 30000 JDBCConnectionPoolParams: InitialCapacity: 3 MaxCapacity: 15 TestTableName: SQL ISVALID TestConnectionsOnReserve: true MailSession: MyMailSession: JNDIName: mail/MyMailSession Target: mycluster SessionUsername: john.smith@example.com SessionPasswordEncrypted: \u0026#39;@@PROP:mymailsession.password@@\u0026#39; Properties: mail.store.protocol: imap mail.imap.port: 993 mail.imap.ssl.enable: true mail.imap.starttls.enable: true mail.imap.host: imap.example.com mail.impa.auth: true mail.transport.protocol: smtp mail.smtp.starttls.enable: true mail.smtp.port: 465 mail.smtp.ssl.enable: true mail.smtp.auth: true mail.smtp.host: smtp.example.com Run the Encrypt Model Tool and pass both the model and variable files, like this:\n$ weblogic-deploy\\bin\\encryptModel.cmd -oracle_home c:\\wls12213 -model_file UnencryptedDemoDomain.yaml -variable_file UnencryptedDemoDomain.properties  The variable file will now look something like the following:\n#Variables updated after encryption #Thu Feb 01 19:12:57 CST 2018 db.user=rpatrick db.url=mydb.example.com:1539/PDBORCL db.password={AES}czFXMkNFWNG9jNTNYd0hRL2R1anBnb0hDUlp4K1liQWFBdVM4UTlvMnE0NU1aMUZ5UVhiK25oaWFBc2lIQ20\\= mymailsession.password={AES}RW9nRnUzcE41WGNMdnEzNDdRQVVNWm1LMGhidkFBVXg6OUN3aXcyci82cmh3cnpNQTpmY2UycUp5YWl4UT0\\=  Parameter table for encryptModel    Parameter Definition Default     -manual Run without a model and get an encrypted value for a single password.    -model_file The location of the model file or a set of model files.    -oracle_home Home directory of the Oracle WebLogic installation. Required if the ORACLE_HOME environment variable is not set.    -passphrase_env An alternative to entering the encryption passphrase at a prompt. The value is an environment variable name that WDT will use to retrieve the passphrase.    -passphrase_file An alternative to entering the encryption passphrase at a prompt. The value is a the name of a file with a string value which WDT will read to retrieve the passphrase.    -variable_file The location and name of the property file containing the variable values for all variables used in the model(s).     "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/securityproviders-model/",
	"title": "Modeling security providers",
	"tags": [],
	"description": "Special handling and model semantics for WebLogic Server security configuration.",
	"content": "WebLogic Server security configuration requires special handling and causes the need for the model semantics to differ from other folders. Because provider ordering is important, and to make sure that the ordering is correctly set in the newly created domain, the Create Domain Tool and Update Domain Tool require that all providers be specified in the model for any provider type that will be created or altered. For example, if you want to change one of the providers in the provider type AuthenticationProvider, your model must specify all of the AuthenticationProvider providers and any non-default attributes for those providers. In order to apply security providers, these tools will delete all providers from the target domain for those provider types specified in the model before adding the providers from the model to the target domain. Provider types that are omitted from the model will be unchanged. Example provider types are Adjudicator, AuthenticationProvider, Authorizer, CertPathProvider, CredentialMapper, PasswordValidator, and RoleMapper.\nFor example, if the model specified an LDAPAuthenticator and an LDAPX509IdentityAsserter similar to what is shown below, the DefaultAuthenticator and DefaultIdentityAsserter would be deleted. In this example, other provider types like RoleMapper and CredentialMapper are not specified and would be left untouched by the tools.\ntopology: SecurityConfiguration: Realm: myrealm: AuthenticationProvider: My LDAP authenticator: LDAPAuthenticator: ControlFlag: SUFFICIENT PropagateCauseForLoginException: true EnableGroupMembershipLookupHierarchyCaching: true Host: myldap.example.com Port: 389 UserObjectClass: person GroupHierarchyCacheTTL: 600 SSLEnabled: true UserNameAttribute: cn Principal: \u0026#39;cn=foo,ou=users,dc=example,dc=com\u0026#39; UserBaseDn: \u0026#39;OU=Users,DC=example,DC=com\u0026#39; UserSearchScope: subtree UserFromNameFilter: \u0026#39;(\u0026amp;(cn=%u)(objectclass=person))\u0026#39; AllUsersFilter: \u0026#39;(memberOf=CN=foo,OU=mygroups,DC=example,DC=com)\u0026#39; GroupBaseDN: \u0026#39;OU=mygroups,DC=example,DC=com\u0026#39; AllGroupsFilter: \u0026#39;(\u0026amp;(foo)(objectclass=group))\u0026#39; StaticGroupObjectClass: group StaticMemberDNAttribute: cn StaticGroupDNsfromMemberDNFilter: \u0026#39;(\u0026amp;(member=%M)(objectclass=group))\u0026#39; DynamicGroupObjectClass: group DynamicGroupNameAttribute: cn UseRetrievedUserNameAsPrincipal: true KeepAliveEnabled: true GuidAttribute: uuid My LDAP IdentityAsserter: LDAPX509IdentityAsserter: ActiveType: AuthenticatedUser Host: myldap.example.com Port: 389 SSLEnabled: true In order to keep the DefaultAuthenticator and DefaultIdentityAsserter while changing/adding providers, they must be specified in the model with any non-default attributes as shown in the example below. Keep in mind, the ordering of providers in the model will be the order the providers are set in the WebLogic security configuration.\ntopology: SecurityConfiguration: Realm: myrealm: AuthenticationProvider: My LDAP authenticator: LDAPAuthenticator: ControlFlag: SUFFICIENT PropagateCauseForLoginException: true EnableGroupMembershipLookupHierarchyCaching: true Host: myldap.example.com Port: 389 UserObjectClass: person GroupHierarchyCacheTTL: 600 SSLEnabled: true UserNameAttribute: cn Principal: \u0026#39;cn=foo,ou=users,dc=example,dc=com\u0026#39; UserBaseDn: \u0026#39;OU=Users,DC=example,DC=com\u0026#39; UserSearchScope: subtree UserFromNameFilter: \u0026#39;(\u0026amp;(cn=%u)(objectclass=person))\u0026#39; AllUsersFilter: \u0026#39;(memberOf=CN=foo,OU=mygroups,DC=example,DC=com)\u0026#39; GroupBaseDN: \u0026#39;OU=mygroups,DC=example,DC=com\u0026#39; AllGroupsFilter: \u0026#39;(\u0026amp;(foo)(objectclass=group))\u0026#39; StaticGroupObjectClass: group StaticMemberDNAttribute: cn StaticGroupDNsfromMemberDNFilter: \u0026#39;(\u0026amp;(member=%M)(objectclass=group))\u0026#39; DynamicGroupObjectClass: group DynamicGroupNameAttribute: cn UseRetrievedUserNameAsPrincipal: true KeepAliveEnabled: true GuidAttribute: uuid My LDAP IdentityAsserter: LDAPX509IdentityAsserter: ActiveType: AuthenticatedUser Host: myldap.example.com Port: 389 SSLEnabled: true DefaultAuthenticator: DefaultAuthenticator: ControlFlag: SUFFICIENT DefaultIdentityAsserter: DefaultIdentityAsserter: Trust service identity asserter The Trust Identity Asserter Security Provider is installed by JRF in 12c versions and newer.\n The JRF installed Trust Identity Asserter does not supply a schema file by default. Before you can configure this asserter with WLST offline or WDT offline, you must first build the schema file using the prepareCustomProvider script.\nHere is an example of how to prepare and install a schema file from its MBean Jar File (MJF):\n$ export CONFIG_JVM_ARGS=-DSchemaTypeSystemName=TrustServiceIdentityAsserter $ ORACLE_HOME/oracle_common/common/bin/prepareCustomProvider.sh -mjf=ORACLE_HOME/oracle_common/modules/oracle.jps/jps-wls-trustprovider.jar -out ORACLE_HOME/oracle_common/lib/schematypes/jps-wls-trustprovider.schema.jar For FMW versions 12.1.2 and 12.1.3, replace oracle.jps in the example path above with: oracle.jps_12.1.2, or oracle.jps_12.1.3, respectively.\nCustom security providers Creating and updating domains with custom security providers is limited to WebLogic version 12.1.2 and newer.\n Prior to using this tooling to create or update a domain with a custom security provider, there are several prerequisites. First, WebLogic Server requires the custom MBean JAR to be in the Oracle Home directory before it can be configured, WLSERVER/server/lib/mbeantypes. Second, WebLogic Scripting Tool, WLST, requires that the schema JAR be placed in the Oracle Home directory before WLST offline can be used to discover it or configure it, ORACLEHOME/oracle_common/lib/schematypes. Generating an MBean JAR documentation can be found in the WebLogic Server documentation. Generating the schema JAR can be done with the prepareCustomProvider script provided in the WebLogic Server installation.\nFor the MBean jar, WebLogic allows you to define an alternate directory other than WLSERVER/server/lib/mbeantypes by using the system property -Dfmwconfig.alternateTypesDirectory=dir. For the WebLogic MBean schema type jar, you can use an alternate location by using -Dfmwconfig.alternateSchemaDirectory=dir. In order for the custom provider jars to be loaded correctly by WLST when discovering or configuring a domain, set this system property in the WLSDEPLOY_PROPERTIES environment variable. Both of the properties take a comma separated list of paths to directories containing the corresponding type of jar.\nThe format for a custom security provider is slightly different from a built-in provider in that the custom provider must supply the fully-qualified name of the class for the provider in the model between the provider name and the attributes for that provider. Note that the generated Impl suffix is omitted from the name. In the custom CredentialMapper example below, note the location in the model of \u0026lsquo;examples.security.providers.SampleCredentialMapper\u0026rsquo;:\nCredentialMapper: Sample CredentialMapper: examples.security.providers.SampleCredentialMapper: UserNameMapperClassName: examples.security.providers.CredentialMapperProviderImpl CredentialMappingDeploymentEnabled: true Known limitations  Adjudicator provider types cannot be added or modified due to a limitation in WLST. PasswordCredentials provider types cannot be updated in WLST online.  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/releaseprocess/",
	"title": "WDT project release process",
	"tags": [],
	"description": "",
	"content": "This document describes the process that should be followed to create a WebLogic Deploy Tooling (WDT) release.\nPrerequisites  A local installation of WebLogic Server 12.2.1.x must be available. The person running the release process must have admin privileges on the WebLogic Deploy Tooling GitHub repo because the release process pushes to the master branch directly. The person running the release process needs to create a GitHub Personal Access Token for the repository with (at least) the repo:status, repo_deployment, public_repo, and security_events privileges. The person running the release process needs a server added to their Maven settings.xml file, where the GitHub Personal Access Token is stored, as shown below. Note that this token can either be stored in plain text or encrypted using Maven password encryption.  \u0026lt;servers\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;github\u0026lt;/id\u0026gt; \u0026lt;passphrase\u0026gt;store plain text or encrypted token here\u0026lt;/passphrase\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;/servers\u0026gt;  If the machine from which the release process is being run requires a proxy server to access the Internet, the person running the release process needs an active proxy configured in their Maven settings.xml file.  \u0026lt;proxies\u0026gt; \u0026lt;proxy\u0026gt; \u0026lt;active\u0026gt;true\u0026lt;/active\u0026gt; \u0026lt;id\u0026gt;my-proxy\u0026lt;/id\u0026gt; \u0026lt;protocol\u0026gt;http\u0026lt;/protocol\u0026gt; \u0026lt;host\u0026gt;proxy server DNS name\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;proxy server port\u0026lt;/port\u0026gt; \u0026lt;nonProxyHosts\u0026gt;list of DNS names/patterns separated by |\u0026lt;/nonProxyHosts\u0026gt; \u0026lt;/proxy\u0026gt; \u0026lt;/proxies\u0026gt; Software release process The best practice is to write the release notes that will be published to GitHub prior to starting the steps below.\n  Set (and export) the following environment variables:\n WLST_DIR - set to $MW_HOME/oracle_common/common/bin, where $MW_HOME is the path to a WLS 12.2.1.x or newer installation directory. WDT_SCM_REPO_URL - set to the browsable URL to the project (e.g., https://github.com/oracle/weblogic-deploy-tooling) WDT_SCM_REPO_CONN - set to the clonable URL for the project (e.g., git@github.com:oracle/weblogic-deploy-tooling.git)    In the weblogic-deploy-tooling project directory, run the mvn -B release:prepare release:perform command.\n If the next development version is changing the major or minor version, override the default developmentVersion property on the command line. For example,\nmvn -B -DdevelopmentVersion=3.2.0-SNAPSHOT release:prepare release:perform. If your SSH private key has a passphrase, watch the build closely because it will prompt for your passphrase multiple times. Failure to enter it in a timely manner may result in a failure.    If the build fails, run the mvn -B release:rollback command to undo it and start over from Step 2., after correcting the issue.\n  After the software has been released, move on to the GitHub Release Process.\n  GitHub release process Note that this process relies on the WDT installers being in your local Maven repository. As such, it is critical for the same user to run these steps on the same machine as the steps from the previous section!\n Save the release notes in the file \u0026lt;wdt-project-directory\u0026gt;/target/ReleaseNotes.md. Run the command mvn -f github-release.xml -DreleaseVersion=\u0026lt;release version number\u0026gt; verify to create the draft GitHub Release. Log into GitHub, go to the Releases page, review/edit the draft release, and then publish the release.  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/contribute/",
	"title": "Contribute to WDT",
	"tags": [],
	"description": "",
	"content": "Oracle welcomes contributions to this repository from anyone.\nIf you want to submit a pull request to fix a bug or enhance an existing feature, first open an issue and link to that issue when you submit your pull request.\nIf you have any questions about a possible submission, feel free to open an issue too.\nContributing to the WebLogic Deploy repository Pull requests can be made under The Oracle Contributor Agreement (OCA).\nFor pull requests to be accepted, the bottom of your commit message must have the following line using your name and e-mail address as it appears in the OCA Signatories list.\nSigned-off-by: Your Name \u0026lt;you@example.org\u0026gt;  This can be automatically added to pull requests by committing with:\n$ git commit --signoff  Only pull requests from committers that can be verified as having signed the OCA can be accepted.\nPull request process   Fork this repository.\n  Create a branch in your fork to implement the changes. We recommend using the issue number as part of your branch name, for example, 1234-fixes.\n  Ensure that any documentation is updated with the changes that are required by your fix.\n  Ensure that any samples are updated if the base image has been changed.\n  Squash your branch changes into a single commit.\n  Submit the pull request.\na. Do not leave the pull request blank.\nb. Explain exactly what your changes are meant to do and provide simple steps on how to validate your changes.\nc. Ensure that you reference the issue you created as well.\n  We will assign someone to review the pull request before it is merged.\n  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/opss-model/",
	"title": "Modeling Oracle Platform Security Services",
	"tags": [],
	"description": "Initializing OPSS configuration as part of WebLogic domain creation.",
	"content": "The OPSSInitialization section of the WDT model can be used to initialize credentials needed by upper-stack Fusion Middleware products. These credentials can only be applied at domain creation time.\nInitializing Oracle Identity Governance This example shows how to configure OPSS credentials for use by Oracle Identity Governance.\ndomainInfo: AdminUserName: \u0026#39;@@PROP:adminUser@@\u0026#39; AdminPassword: \u0026#39;@@PROP:adminPass@@\u0026#39; OPSSInitialization: Credential: oim: TargetKey: keystore: Username: keystore Password: \u0026#39;@@PROP:keystorePass@@\u0026#39; OIMSchemaPassword: # database schema prefix + _OIM Username: PREFIX_OIM # database schema password Password: \u0026#39;@@PROP:dbSchemaPass@@\u0026#39; sysadmin: Username: xelsysadm Password: \u0026#39;@@PROP:sysAdminPass@@\u0026#39; WeblogicAdminKey: # match to WLS admin credentials Username: \u0026#39;@@PROP:adminUser@@\u0026#39; Password: \u0026#39;@@PROP:adminPass@@\u0026#39; Initializing Oracle Data Integrator This example shows how to configure OPSS credentials for use by Oracle Data Integrator.\ndomainInfo: AdminUserName: \u0026#39;@@PROP:adminUser@@\u0026#39; AdminPassword: \u0026#39;@@PROP:adminPass@@\u0026#39; RCUDbInfo: rcu_prefix: PREFIX rcu_admin_password: \u0026#39;@@PROP:dbAdminPass@@\u0026#39; # for ODI, the schema password has to be \u0026lt; 10 characters rcu_schema_password: \u0026#39;@@PROP:dbSchemaPass@@\u0026#39; rcu_db_conn_string: \u0026#39;@@PROP:dbConnect@@\u0026#39; # WORK_REPO_PASSWORD is the database schema password # SUPERVISOR_PASSWORD needs to match TargetKey password in credential rcu_variables: \u0026#39;SUPERVISOR_PASSWORD=@@PROP:supvPass@@,WORK_REPO_PASSWORD=@@PROP:dbSchemaPass@@,WORK_REPOSITORY_TYPE=D,WORK_REPO_NAME=WORKREP,ENCRYPTION_ALGORITHM=AES-128\u0026#39; OPSSInitialization: Credential: oracle.odi.credmap: TargetKey: SUPERVISOR: Username: mySupervisor Password: \u0026#39;@@PROP:supvPass@@\u0026#39; "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/usersgroups-model/",
	"title": "Modeling WebLogic users, groups, and roles",
	"tags": [],
	"description": "Establishing users, groups, and global roles as part of WebLogic domain creation.",
	"content": "WebLogic Server has the ability to establish a set of users, groups, and global roles as part of the WebLogic domain creation. The WebLogic global roles become part of the WebLogic role mapper (for example, XACMLRoleMapper) and are specified under domainInfo in the WLSRoles section. The users and groups become part of the Embedded LDAP server (for example, DefaultAuthenticator) and are specified under topology in the Security section.\nWebLogic global roles The model allows for the definition of WebLogic roles that can augment the well known WebLogic global roles (for example, Admin, Deployer, Monitor, \u0026hellip;) in addition to defining new roles. When updating the well known WebLogic roles, an UpdateMode can be specified as { append | prepend | replace } with the default being replace when not specified. Also, when updating the well known roles, the specified Expression will be a logical OR with the default expression. The Expression value for the role is the same as when using the WebLogic RoleEditorMBean for a WebLogic security role mapping provider.\nFor example, the WLSRoles section below updates the well known Admin, Deployer and Monitor roles while adding a new global role with Tester as the role name:\ndomainInfo: WLSRoles: Admin: UpdateMode: append Expression: \u0026#34;?weblogic.entitlement.rules.IDCSAppRoleName(AppAdmin,@@PROP:AppName@@)\u0026#34; Deployer: UpdateMode: replace Expression: \u0026#34;?weblogic.entitlement.rules.AdministrativeGroup(@@PROP:Deployers@@)\u0026#34; Monitor: UpdateMode: prepend Expression: \u0026#34;?weblogic.entitlement.rules.AdministrativeGroup(AppMonitors)\u0026#34; Tester: Expression: \u0026#34;?weblogic.entitlement.rules.IDCSAppRoleName(AppTester,@@PROP:AppName@@)\u0026#34; The Admin role will have the expression appended to the default expression, the Deployer role expression will replace the default, the Monitor role expression will be prepended to the default expression and Tester will be a new role with the specified expression.\nIn addition, the Expression value can use the variable placeholder syntax specified when running the Create Tool as shown in the above example.\nWebLogic users and groups The model allows for the definition of a set of users and groups that will be loaded into the WebLogic Embedded LDAP Server (for example, DefaultAuthenticator). New groups can be specified and users can be added as members of the new groups or existing groups such as the Administrators group which is defaulted to be in the WebLogic Admin global role. Please see Known Limitations below for additional information on users and groups.\nThe user password can be specified with a placeholder or encrypted with the Encrypt Tool. An example Security section that adds an additional group AppMonitors, adds two new users and places the users into groups is as follows:\nYou can add user attributes that are defined for the DefaultAuthenticator. This is a limited set of attributes that go under a separate folder UserAttribute in the model under the User section.\ntopology: Security: Group: AppMonitors: Description: Application Monitors User: john: Password: welcome1 GroupMemberOf: [ AppMonitors, Administrators ] joe: Password: welcome1 GroupMemberOf: [ AppMonitors ] UserAttribute: mail: joe@mycompany.com Known limitations  The processing of users, groups, and roles will only take place when using the Create Domain Tool. WebLogic global roles are only supported with WebLogic Server version 12.2.1 or greater. WebLogic global roles are only updated for the WebLogic security XACML role mapping provider (for example, XACMLRoleMapper). The user and group processing is not complete, currently, users cannot be assigned to groups. Users created using the Security section are automatically added to the Administrators group and are not added to the groups specified. For information about a patch for this issue, see Known issues.  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/validate/",
	"title": "Validate Model Tool",
	"tags": [],
	"description": "Provides both standalone validation of a model as well as model usage information to help users write or edit their models.",
	"content": "When working with a metadata model that drives tooling, it is critical to make it easy both to validate that the model and its related artifacts are well-formed and to provide help on the valid attributes and subfolders for a particular model location. The Validate Model Tool provides both validation and help for model authors as a standalone tool. In addition, the tool is integrated with the createDomain and deployApps tools to catch validation errors early, before any actions are performed on the domain.\nTo use the Validate Model Tool, simply run the validateModel shell script with the correct arguments. To see the list of valid arguments for any tool in the WebLogic Deploy Tooling installation, simply run the shell script with the -help option (or with no arguments) to see the shell script usage information.\nFor example, starting with the following model shown below, where the AdminServer attribute Machine is misspelled as Machines:\ntopology: Name: DemoDomain AdminServerName: AdminServer Cluster: mycluster: Server: AdminServer: ListenAddress: 192.168.1.50 ListenPort: 7001 Machines: machine1 SSL: Enabled: true ListenPort: 7002 ServerStart: ClassPath: c:\\foo\\bar m1: ListenAddress: 192.168.1.50 ListenPort: 8001 Cluster: mycluster Machine: machine1 ServerStart: ClassPath: c:\\foo\\bar m2: ListenAddress: 192.168.1.51 ListenPort: 8001 Cluster: mycluster Machine: machine2 ServerStart: ClassPath: c:\\foo\\bar Machine: machine1: NodeManager: ListenAddress: 192.168.1.50 ListenPort: 5556 machine2: NodeManager: ListenAddress: 192.168.1.51 ListenPort: 5556 To validate the standalone model file, run the tool as follows:\n$ weblogic-deploy\\bin\\validateModel.cmd -oracle_home c:\\wls12213 -model_file InvalidDemoDomain.yaml  The output of the tool will look something like this:\n----------------------------------------------- Validation Area: topology Section ----------------------------------------------- Errors: 1 Message: Machines is not one of the folder, folder instance or attribute names allowed in model location topology:/Server/AdminServer  Use the Model Help Tool to determine the valid list of attributes and folders at this model location.\nIf the model contains variable definitions and the variable file or files is specified, the Validate Model Tool will validate that all variable references in the model are defined in the variable files. For example, invoking the tool as shown here:\n$ weblogic-deploy\\bin\\validateModel.cmd -oracle_home c:\\wls12213 -model_file InvalidDemoDomain.yaml -variable_file InvalidDemoDomain.properties  Results in output similar to that shown below, if the db.password variable is not defined in the variable file.\n----------------------------------------------- Validation Area: Variable Substitutions ----------------------------------------------- Errors: 2 Message: Model location resource:/JDBCSystemResource/Generic1/JdbcResource/JDBCDriverParams/PasswordEncrypted references variable db.password that is not defined in D:/demo/InvalidDemoDomain.properties Message: Model location resource:/JDBCSystemResource/Generic2/JdbcResource/JDBCDriverParams/PasswordEncrypted references variable db.password that is not defined in D:/demo/InvalidDemoDomain.properties  If the model references binaries that should be present in the archive, the Validate Model Tool will validate that all binary references in the model that point to archive file locations are present in the archive file. For example, invoking the tool as shown here:\n$ weblogic-deploy\\bin\\validateModel.cmd -oracle_home c:\\wls12213 -model_file InvalidDemoDomain.yaml -archive_file InvalidDemoDomain.zip  Results in output similar to that shown below, if the simpleear.ear file is not in the model-specified location inside the archive file.\n----------------------------------------------- Validation Area: Archive Entries ----------------------------------------------- Errors: 1 Message: Model location appDeployments:/Application/simpleear/SourcePath references file wlsdeploy/applications/simpleear.ear that is not found in the archive file D:/demo/InvalidDemoDomain.zip  Using multiple models The Validate Model Tool supports the use of multiple models, as described in Using multiple models.\nParameter table for validateModel    Parameter Definition Default     -archive_file The path to the archive file to use. If the archive file is not provided, validation will only validate the artifacts provided. This can also be specified as a comma-separated list of archive files. The overlapping contents in each archive take precedence over previous archives in the list.    -domain_type The type of domain. (for example, WLS, JRF) WLS   -model_file The location of the model file to use. This can also be specified as a comma-separated list of model locations, where each successive model layers on top of the previous ones. If not specified, the tool will look for the model in the archive. If the model is not found, validation will only validate the artifacts provided.    -oracle_home Home directory of the Oracle WebLogic installation. Required if the ORACLE_HOME environment variable is not set.    -target_mode The target WLST mode that the tool should use to validate the model content. The only valid values are online or offline. offline   -target_version The target version of WebLogic Server the tool should use to validate the model content. This version number can be different than the version being used to run the tool. Oracle home version   -variable_file The location of the property file containing the variable values for all variables used in the model. If the variable file is not provided, validation will only validate the artifacts provided.    -remote Validate the model from remote update or deploy command, must specify with -archive_file.     "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/compare/",
	"title": "Compare Model Tool",
	"tags": [],
	"description": "Compares two model files.",
	"content": "When working with a domain model, sometimes it is useful to know the differences between different models. The Compare Model Tool compares two model files and generates a model that shows the differences between them.\nTo use the Compare Model Tool, simply run the compareModel shell script with the correct arguments. To see the list of valid arguments, simply run the shell script with the -help option (or with no arguments) for usage information.\nFor example, comparing the following models.\nNew model domainInfo: AdminUserName: weblogic AdminPassword: welcome2 ServerStartMode: \u0026#39;prod\u0026#39; topology: Name: domain1 AdminServerName: admin-server SecurityConfiguration: NodeManagerUsername : weblogic NodeManagerPasswordEncrypted : welcome1 Cluster: cluster-1: DynamicServers: ServerTemplate: cluster-1-template ServerNamePrefix: managed-server DynamicClusterSize: 5 MaxDynamicClusterSize: 5 CalculatedListenPorts: false cluster-2: DynamicServers: ServerTemplate: cluster-2-template ServerNamePrefix: managed-server DynamicClusterSize: 2 MaxDynamicClusterSize: 3 CalculatedListenPorts: false Server: admin-server: ListenPort: 10011 ServerTemplate: cluster-1-template: Cluster: cluster-1 ListenPort : 5001 JTAMigratableTarget: StrictOwnershipCheck: true Cluster: cluster-1 cluster-2-template: Cluster: cluster-2 ListenPort : 8001 ServerStart: Arguments: [\u0026#39;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=6006\u0026#39;] JTAMigratableTarget: StrictOwnershipCheck: true Cluster: cluster-2 appDeployments: Application: myear: SourcePath: /home/johnny/dimtemp23/sample_app_stage/wlsdeploy/applications/sample_app.ear Target: [cluster-2,cluster-1] yourear: SourcePath: /home/johnny/dimtemp23/sample_app_stage/wlsdeploy/applications/sample_app2.ear ModuleType: ear Target: [cluster-2,cluster-1] resources: JMSServer: JMSServer1: Target: m1 JMSServer2: Target: m2 JMSSystemResource: MyJmsModule: Target: mycluster SubDeployment: JMSServer1Subdeployment: Target: JMSServer1 JMSServer2Subdeployment: Target: JMSServer2 JmsResource: ConnectionFactory: WebAppConnectionFactory: DefaultTargetingEnabled: true JNDIName: jms/WebCF ClientParams: AllowCloseInOnMessage: true MessagesMaximum: 1 DefaultDeliveryParams: DefaultTimeToDeliver: 3 DefaultTimeToLive: 3600 FlowControlParams: FlowControlEnabled: false LoadBalancingParams: LoadBalancingEnabled: false SecurityParams: AttachJMSXUserId: true TransactionParams: XAConnectionFactoryEnabled: true UniformDistributedQueue: MyUniformDistributedQueue: DefaultTargetingEnabled: true JNDIName: jms/myUDQ Old model domainInfo: AdminUserName: weblogic AdminPassword: welcome2 ServerStartMode: prod topology: Name: domain1 AdminServerName: admin-server SecurityConfiguration: NodeManagerUsername : weblogic NodeManagerPasswordEncrypted : welcome1 Cluster: cluster-1: DynamicServers: ServerTemplate: cluster-1-template ServerNamePrefix: managed-server DynamicClusterSize: 5 MaxDynamicClusterSize: 5 CalculatedListenPorts: false Server: admin-server: ListenPort: 10011 ServerTemplate: cluster-1-template: Cluster: cluster-1 ListenPort : 5001 ServerStart: Arguments: [\u0026#39;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=6006\u0026#39;] JTAMigratableTarget: StrictOwnershipCheck: true Cluster: cluster-1 appDeployments: Application: myear: SourcePath: /home/johnny/dimtemp23/sample_app_stage/wlsdeploy/applications/sample_app.ear ModuleType: ear Target: [cluster-1,cluster-2] myear2: SourcePath: /home/johnny/dimtemp23/sample_app_stage/wlsdeploy/applications/sample_app2.ear ModuleType: ear Target: [cluster-1,cluster-2] resources: WebAppContainer: WAPEnabled: \u0026#39;@@PROP:WAPENABLED@@\u0026#39; FilterDispatchedRequestsEnabled: true AllowAllRoles: true XPoweredByHeaderLevel: NONE ServletAuthenticationFormURL: true ServletReloadCheckSecs: 1 ChangeSessionIDOnAuthentication: true MimeMappingFile: wlsdeploy/config/amimemappings.properties AuthCookieEnabled: true WorkContextPropagationEnabled: true ReloginEnabled: true GzipCompression: GzipCompressionContentType: [ text/html, text/xml, text/plain ] GzipCompressionEnabled: true JMSServer: JMSServer1: Target: m1 JMSServer2: Target: m2 JMSSystemResource: MyJmsModule: Target: mycluster SubDeployment: JMSServer1Subdeployment: Target: JMSServer1 JMSServer2Subdeployment: Target: JMSServer2 JmsResource: ConnectionFactory: WebAppConnectionFactory: DefaultTargetingEnabled: true JNDIName: jms/WebCF ClientParams: AllowCloseInOnMessage: true MessagesMaximum: 1 DefaultDeliveryParams: DefaultTimeToDeliver: 3 DefaultTimeToLive: 3600 FlowControlParams: FlowControlEnabled: false LoadBalancingParams: LoadBalancingEnabled: false SecurityParams: AttachJMSXUserId: true TransactionParams: XAConnectionFactoryEnabled: true MDBConnectionFactory: DefaultTargetingEnabled: true JNDIName: jms/mdbCF TransactionParams: XAConnectionFactoryEnabled: true UniformDistributedQueue: MyUniformDistributedQueue: DefaultTargetingEnabled: true JNDIName: jms/myUDQ ResetDeliveryCountOnForward: true To compare the two model files, run the tool as follows:\n$ weblogic-deploy\\bin\\compareModel.cmd -oracle_home c:\\wls12213 new_model.yaml old_model.yaml  The output of the tool will look something like this:\nComparing Models: new=/tmp/model2.yaml vs old=/tmp/model1.yaml\nDifferences between new model and old model:\nresources: JMSSystemResource: MyJmsModule: JmsResource: ConnectionFactory: '!MDBConnectionFactory': '!WebAppContainer': appDeployments: Application: '!myear2': yourear: SourcePath: /home/johnny/dimtemp23/sample_app_stage/wlsdeploy/applications/sample_app2.ear ModuleType: ear Target: [ cluster-2, cluster-1 ] myear: Target: [ cluster-2, cluster-1 ] topology: ServerTemplate: cluster-1-template: '!ServerStart': cluster-2-template: Cluster: cluster-2 ListenPort: 8001 ServerStart: Arguments: [ '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=6006' ] JTAMigratableTarget: StrictOwnershipCheck: True Cluster: cluster-2 Cluster: cluster-2: DynamicServers: ServerTemplate: cluster-2-template ServerNamePrefix: managed-server DynamicClusterSize: 2 MaxDynamicClusterSize: 3 CalculatedListenPorts: False   Model Path: resources\u0026ndash;\u0026gt;JMSSystemResource\u0026ndash;\u0026gt;MyJmsModule\u0026ndash;\u0026gt;JmsResource\u0026ndash;\u0026gt;UniformDistributedQueue\u0026ndash;\u0026gt;MyUniformDistributedQueue\u0026ndash;\u0026gt;ResetDeliveryCountOnForward does not exist in new model but exists in previous model\n  Model Path: appDeployments\u0026ndash;\u0026gt;Application\u0026ndash;\u0026gt;myear\u0026ndash;\u0026gt;ModuleType does not exist in new model but exists in previous model\n  Comparing the new and old models:\n Added cluster-2 and cluster-2-template in the topology section. Removed ServerStart of cluster-1-template in the topology section. Deployed two applications yourear and myear in the appDeployments section. Removed application myear in the appDeployments section. Removed MDBConnectionFactory from the MyJmsModule JMS Module in the resource section. Removed WebAppContainer in the resource section. Removed the attribute ResetDeliveryCountOnForward from MyUniformDistributedQueue. Changed deployment targets for application myear. Removed the attribute \u0026lsquo;ModuleType\u0026rsquo; for application myear.  The ! is a notation for the deletion of a non-attribute key element from the model. Missing attributes will be omitted from the resulting model, but shown as messages in the output. If the attribute value is a list, even if all the individual items within the list are identical but the ordering is different, the attribute is counted as different.\n To compare the two model files and generate the output to files, run the tool as follows:\n$ weblogic-deploy\\bin\\compareModel.cmd -oracle_home c:\\wls12213 -output_dir c:\\cm-output new_model.yaml old_model.yaml The following files will be written to the directory: diffed_model.json diffed_model.yaml compare_model_stdout  Parameter table for compareModel    Parameter Definition Default     -oracle_home Home directory of the Oracle installation. Required if the ORACLE_HOME environment variable is not set.    -output_dir (Required) Directory in which to store the output.    -variable_file Variable file used for token substitution.     "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/pwcredentialmap-model/",
	"title": "Modeling WebLogic user password credential mapping",
	"tags": [],
	"description": "A model for creating user password credential mappings.",
	"content": "The Create Domain Tool can be used to create user password credential mappings for use with the DefaultCredentialMapper security provider. Information in the model will be used to create a credential mapping file that will be imported the first time the Administration Server is started. This example shows how mappings are represented in the model:\ndomainInfo: WLSUserPasswordCredentialMappings: CrossDomain: map1: RemoteDomain: otherDomain RemoteUser: otherUser RemotePassword: \u0026#39;@@PROP:other.pwd@@\u0026#39; RemoteResource: map2: Protocol: http RemoteHost: remote.host RemotePort: 7020 Path: /app/buy Method: POST User: user1 RemoteUser: remoteUser RemotePassword: \u0026#39;@@PROP:remote.pwd@@\u0026#39; map3: Protocol: https RemoteHost: remote2.host RemotePort: 7030 Path: /app/sell Method: GET User: user1,user2 RemoteUser: remoteUser2 RemotePassword: \u0026#39;@@PROP:remote2.pwd@@\u0026#39; In this example, the mapping map1 creates a cross-domain credential mapping that provides access from this domain to the remote domain otherDomain as the user otherUser with the configured password.\nThe mapping map2 creates a remote resource credential mapping that will give the local user user1 access to a single remote resource on remote.host as the user remoteUser with the configured password. The mapping map3 is similar, but provides access to a different remote resource for two local users, user1 and user2.\nThe names of the mapping sections in the model, such as map1 and map2, are used to group the attributes for each mapping in the model and are not part of the resulting credential mappings. These names should be unique for each mapping of a particular type.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/odl-model/",
	"title": "Configuring Oracle Diagnostic Logging",
	"tags": [],
	"description": "A model for configuring Oracle Diagnostic Logging (ODL).",
	"content": "Oracle Diagnostic Logging (ODL) can be configured and updated with Create Domain, Update Domain, and Deploy Applications Tools, starting with WDT release 1.5.2. ODL configuration is supported only for offline mode in WDT. ODL configuration is not added when a model is created using the Discover Domain Tool. This example shows how some common configuration elements can be represented in the model.\nresources: ODLConfiguration: config1: Servers: m1, m2 AddJvmNumber: true HandlerDefaults: abc: r123 xyz: k890 Handler: my-handler: Class: com.my.MyHandler Level: TRACE:32 ErrorManager: com.my.MyErrorManager Filter: com.my.MyFilter Formatter: com.my.MyFormatter Encoding: UTF-8 Properties: path: /home/me/mypath quicktrace-handler: Filter: oracle:dfw:incident:IncidentDetectionLogFilter Properties: path: \u0026#39;${domain.home}/servers/${weblogic.Name}/logs/${weblogic.Name}-myhistory.log\u0026#39; useSourceClassandMethod: true Logger: my-logger: Level: NOTIFICATION:1 UseParentHandlers: true Filter: oracle:dfw:incident:IncidentDetectionLogFilter Handlers: richard-handler,owsm-message-handler oracle.sysman: Handlers: [ my-handler, owsm-message-handler ] config2: Servers: AdminServer HandlerDefaults: path: /home/me/otherpath maxFileSize: 5242880 Each named ODL configuration (such as config1) is updated for each of the managed servers in the Servers list. Handlers and loggers that exist in the current configuration are updated, and any new ones are created and updated.\nUnlike other WDT model elements, ODL configuration is not updated using WLST MBeans. The configuration is written directly to the file system, in the file \u0026lt;domain_home\u0026gt;/config/fmwconfig/servers/\u0026lt;server\u0026gt;/logging.xml.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/prepare/",
	"title": "Prepare Model Tool",
	"tags": [],
	"description": "Prepares model files for deploying to WebLogic Kubernetes Operator environment.",
	"content": "The Prepare Model Tool prepares WDT model files for deploying to specific target environments. These customizations include:\n Removing sections from the model that are not compatible with the environment Removing files from the archive that are not compatible with the environment Updating model file(s) to set parameters required by the environment Replacing credential and attribute values with WDT macros Generating a UNIX shell script that will help with creating any required Kubernetes secrets Generating a variable properties file to customize attribute values Generating any additional configuration files to configure the target environment  To use the Prepare Model Tool, simply run the prepareModel shell script with the correct arguments. To see the list of valid arguments, simply run the shell script with the -help option (or with no arguments) for usage information.\nFor example, to prepare model files for use with WebLogic Kubernetes Operator, run the tool with -target wko as follows:\n$ $WLSDEPLOY_HOME/bin/prepareModel.sh -oracle_home /u01/wls12213 -model_file model1.yaml, model2.yaml -target wko -output_dir $HOME/wko-output In the output directory, you will find:\nmodel1.yaml model2.yaml wko_variable.properties create_k8s_secrets.sh wko-domain.yaml You can then customize the wko_variable.properties and create_k8s_secrets.sh to provide environment-specific values.\nFor more information about additional target environments and options, see Target environments.\nParameter table for prepareModel    Parameter Definition Default     -model_file (Required). Location of the model file. This can also be specified as a comma-separated list of models, where each successive model layers on top of the previous ones.    -oracle_home Home directory of the Oracle WebLogic installation. Required if the ORACLE_HOME environment variable is not set.    -output_dir (Required) Location where to write the output files.    -target (Required) Name of the target configuration such as wko, vz, k8s. For more information about target types, see Target Environments.    -variable_file The location of the property file containing the values for variables used in the model. This can also be specified as a comma-separated list of property files, where each successive set of properties layers on top of the previous ones.     "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/ohs-model/",
	"title": "Configuring Oracle HTTP Server",
	"tags": [],
	"description": "A model for configuring Oracle HTTP Server (OHS).",
	"content": "Starting with WDT 1.8.0, you can configure and update Oracle HTTP Server (OHS) using the Create Domain, Update Domain, and Deploy Applications Tools, in offline mode only. To discover the OHS configuration, use the Discover Domain Tool, in offline mode only.\nPrerequisites In order to configure and use OHS, it must be installed in the Oracle Home directory used to create the domain. You can download OHS here.\nThe OHS template must be present in the WDT domain type definition file used to create or update the domain. For more information on creating a custom definition, see Domain type definitions.\nYou create a copy of an existing domain type definition file, add the template to that file, and then reference that file on the WDT command line. For example, if you want to create a domain with Oracle HTTP Server based on a Restricted JRF domain, then you would first create a copy of the file WLSDEPLOY_HOME/lib/typedefs/RestrictedJRF.json in the same directory, such as WLSDEPLOY_HOME/lib/typedefs/HttpServer.json. In this example, you would change the existing extensionTemplates section to include the additional OHS template. The original value is:\n\u0026quot;extensionTemplates\u0026quot;: [ \u0026quot;Oracle Restricted JRF\u0026quot;, \u0026quot;Oracle Enterprise Manager-Restricted JRF\u0026quot; ], The revised value would be:\n\u0026quot;extensionTemplates\u0026quot;: [ \u0026quot;Oracle Restricted JRF\u0026quot;, \u0026quot;Oracle Enterprise Manager-Restricted JRF\u0026quot;, \u0026quot;Oracle HTTP Server (Restricted JRF)\u0026quot; ], The file name of this new domain type (without the .json extension) is used with the -domain_type argument on the WDT command line. For example, the command line to create a domain using the HttpServer.json file from the previous steps would look like:\n$ WLSDEPLOY_HOME/bin/createDomain -oracle_home /etc/oracle ... -domain_type HttpServer Configuring the model Configuring OHS typically involves adding two top-level folders to the resources section of the model, SystemComponent and OHS. Here is an example:\nresources: SystemComponent: my-ohs: ComponentType: OHS Machine: my-machine OHS: my-ohs: AdminHost: 127.0.0.1 AdminPort: 9324 ListenAddress: 127.0.0.1 ListenPort: 7323 SSLListenPort: 4323 ServerName: http://localhost:7323 Each name under the OHS folder must match a name under the SystemComponent folder in the model, or the name of a SystemComponent element that has been previously created. In this example, the name my-ohs is in both places.\nThe ComponentType field of the SystemComponent element must be set to OHS in order to allow configuration of the corresponding OHS folders.\nYou can use the Model Help Tool to determine the complete list of folders and attributes that can be used in these sections of the model. For example, this command will list the attributes in the OHS folder:\n$ ${WDT_HOME}/bin/modelHelp.sh -oracle_home /tmp/oracle resources:/OHS "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/kubernetes/",
	"title": "Extract Domain Resource Tool",
	"tags": [],
	"description": "Generates YAML resource files for use with the WebLogic Kubernetes Operator or Verrazzano.",
	"content": "Using WDT with WebLogic Kubernetes Operator You can use the Extract Domain Resource Tool to create resource files for use with the WebLogic Kubernetes Operator or Verrazzano. This allows the domain configuration and the Kubernetes container configuration to be specified in a single model file.\nThis is especially useful when making configuration changes to the domain that also need to be reflected in the resource file. For example, adding a cluster to the domain only requires that it be added to the topology section of the WDT model, then a new resource file can be generated to apply to Kubernetes.\nMore information about the WebLogic Kubernetes Operator can be found here.\nMore information about Verrazzano can be found here.\nHere is an example command line for the Extract Domain Resource Tool:\n$ \u0026lt;wls-deploy-home\u0026gt;/bin/extractDomainResource.sh -oracle_home /tmp/oracle -domain_home /u01/mydomain -model_file /tmp/mymodel.yaml -variable_file /tmp/my.properties -output_dir /tmp/resource -target wko For the simplest case, the Extract Domain Resource Tool will create resource files based on the templates corresponding to the target argument, using information from the command line and the domain sections of the model. Information about target types and templates can be found here.\nThe value of the optional -domain_home argument will be applied in the template output. Domain name and UID fields in the template will use the domain name in the topology section of the model, or the default base_domain. The cluster entries will be pulled from the topology section of the model; their replica counts will have been derived from the number of servers for each cluster.\nThe user is expected to fill in the image and secrets information identified by --FIX ME-- in the resource output.\nFor more advanced configurations, including pre-populating the --FIX ME-- values, the user can populate the related section of the WDT model, and those values will appear in the resulting custom resource definition (CRD) resource files. In this example the kubernetes section of the model overrides and adds some values to the CRD generated for WebLogic Kubernetes Operator.\nkubernetes: metadata: name: myName namespace: myNamespace spec: image: \u0026#39;my.repo/my-image:2.0\u0026#39; imagePullSecrets: - name: WEBLOGIC_IMAGE_PULL_SECRET_NAME webLogicCredentialsSecret: name: \u0026#39;@@PROP:mySecret@@\u0026#39; configuration: model: domainType: \u0026#39;WLS\u0026#39; secrets: - secret1 - secret2 serverPod: env: - name: USER_MEM_ARGS value: \u0026#39;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom\u0026#39; - name: JAVA_OPTIONS value: \u0026#39;-Dmydir=/home/me\u0026#39; This example uses @@PROP:mySecret@@ to pull the value for webLogicCredentialsSecret from the variables file specified on the command line. This can be done with any of the values in the CRD sections of the model. More details about using model variables can be found here.\nUsing the wko target with this example, the resulting domain resource file would contain:\napiVersion: weblogic.oracle/v8 kind: Domain metadata: name: myName namespace: myNamespace spec: image: \u0026#39;my.repo/my-image:2.0\u0026#39; imagePullSecrets: - name: WEBLOGIC_IMAGE_PULL_SECRET_NAME webLogicCredentialsSecret: name: WEBLOGIC_CREDENTIALS_SECRET_NAME serverPod: env: - name: USER_MEM_ARGS value: \u0026#39;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom\u0026#39; - name: JAVA_OPTIONS value: \u0026#39;-Dmydir=/home/me\u0026#39; domainHome: /u01/mine/domain configuration: model: domainType: WLS secrets: - secret1 - secret2 clusters: - clusterName: mycluster replicas: 2 - clusterName: mycluster3 replicas: 4 If clusters are specified in the kubernetes/spec section of the model, those clusters will be combined with any clusters from the topology section of the model.\nIf the WDT model has a value of Never for spec/imagePullPolicy, the imagePullSecrets default value will not be added.\nA full list of sections and variables supported by the WebLogic Kubernetes Operator is available here. The Extract Domain Resource Tool supports a subset of these sections, including metadata, serverPod, and spec.\nThe verrazzano section of the WDT model can be used to update the CRDs generated for Verrazzano targets, such as vz and vz-dii. More information about this model section can be found here.\nThe Model Help Tool can be used to determine the folders and attributes that can be used in the CRD sections of the model. For example, this command will list the folders and attributes in the spec folder in the kubernetes section:\n\u0026lt;wls-deploy-home\u0026gt;/bin/modelHelp.sh -oracle_home /tmp/oracle kubernetes:/spec This command will list the folders and attributes in the application/spec folder in the verrazzano section:\n\u0026lt;wls-deploy-home\u0026gt;/bin/modelHelp.sh -oracle_home /tmp/oracle -target vz verrazzano:/application/spec The content for the CRD sections is not generated when a model is discovered by the Discover Domain Tool.\nParameter table for extractDomainResource    Parameter Definition Default     -archive_file The path to the archive file. This can also be specified as a comma-separated list of archive files. The overlapping contents in each archive take precedence over previous archives in the list.    -domain_home The domain home directory to be used in output files. This will override any value in the model.    -model_file The location of the model file. This can also be specified as a comma-separated list of model locations, where each successive model layers on top of the previous ones.    -oracle_home Home directory of the Oracle WebLogic installation. Required if the ORACLE_HOME environment variable is not set.    -output_dir The location for the target output files.    -target The target output type. The default is wko. For more information about target types, see Target Environments.    -variable_file The location of the property file containing the values for variables used in the model. This can also be specified as a comma-separated list of property files, where each successive set of properties layers on top of the previous ones.     "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/targetservers-model/",
	"title": "Targeting server groups",
	"tags": [],
	"description": "Targeting server groups to managed servers and dynamic server groups to dynamic clusters.",
	"content": "To create more complex domains with clusters of different types, it is necessary to control the targeting of server groups to managed servers. By default, all server groups in the domain type definition are targeted to all managed servers. To create a SOA domain with SOA and OSB clusters, simply add the OSB template and server group to the SOA domain definition, as shown below.\n{ \u0026#34;name\u0026#34;: \u0026#34;SOA\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SOA type domain definitions\u0026#34;, \u0026#34;versions\u0026#34;: { \u0026#34;12.2.1.3\u0026#34;: \u0026#34;SOA_12213\u0026#34; }, \u0026#34;definitions\u0026#34;: { \u0026#34;SOA_12213\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;Oracle SOA Suite\u0026#34;, \u0026#34;Oracle Service Bus\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34;, \u0026#34;SOA-MGD-SVRS\u0026#34;, \u0026#34;OSB-MGD-SVRS-COMBINED\u0026#34; ], \u0026#34;dynamicClusterServerGroupsToTarget\u0026#34;: [ \u0026#34;SOA-DYN-CLUSTER\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;STB\u0026#34;, \u0026#34;WLS\u0026#34;, \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34;, \u0026#34;UCSUMS\u0026#34;, \u0026#34;SOAINFRA\u0026#34; ] } } } Then, use the ServerGroupTargetingLimits map in the domainInfo section to limit the targeting of the Web Services Manager, SOA, and OSB server groups to the soa_cluster or osb_cluster, as appropriate. In the example below, notice that the JRF-MAN-SVR server group is not listed; therefore, it will use the default targeting and be targeted to all managed servers. The value of each element in this section is a logical list of server and/or cluster names. As shown in the example, the value for each server group can be specified as a list, a comma-separated string, or a single-valued string. There is no semantic difference between listing a cluster\u0026rsquo;s member server names versus using the cluster name; the example uses these simply to show what is possible.\ndomainInfo: AdminUserName: weblogic AdminPassword: welcome1 ServerStartMode: prod ServerGroupTargetingLimits: \u0026#39;WSMPM-MAN-SVR\u0026#39;: soa_cluster \u0026#39;SOA-MGD-SVRS\u0026#39;: soa_server1,soa_server2 \u0026#39;OSB-MGD-SVRS-COMBINED\u0026#39;: [ osb_server1, osb_server2 ] topology: Name: soa_domain AdminServerName: AdminServer Cluster: soa_cluster: osb_cluster: Server: AdminServer: ListenAddress: myadmin.example.com ListenPort: 7001 Machine: machine1 SSL: Enabled: true ListenPort: 7002 soa_server1: ListenAddress: managed1.example.com ListenPort: 8001 Cluster: soa_cluster Machine: machine2 SSL: Enabled: true ListenPort: 8002 soa_server2: ListenAddress: managed2.example.com ListenPort: 8001 Cluster: soa_cluster Machine: machine3 SSL: Enabled: true ListenPort: 8002 osb_server1: ListenAddress: managed1.example.com ListenPort: 9001 Cluster: osb_cluster Machine: machine2 SSL: Enabled: true ListenPort: 9002 osb_server2: ListenAddress: managed2.example.com ListenPort: 9001 Cluster: osb_cluster Machine: machine3 SSL: Enabled: true ListenPort: 9002 UnixMachine: machine1: NodeManager: ListenAddress: myadmin.example.com ListenPort: 5556 machine2: NodeManager: ListenAddress: managed1.example.com ListenPort: 5556 machine3: NodeManager: ListenAddress: managed2.example.com ListenPort: 5556 SecurityConfiguration: NodeManagerUsername: weblogic NodeManagerPasswordEncrypted: welcome1 Targeting dynamic cluster server groups Dynamic Cluster Server Groups are server groups that can be targeted to dynamic clusters. Dynamic clusters were added in WebLogic Server version 12.1.2. In WebLogic Server version 12.2.1.1, the ability to target a single dynamic server group to a dynamic cluster was added. In WebLogic Server Version 12.2.1.4, you now have the ability to target multiple dynamic server groups to a dynamic cluster.\nTo enable targeting of dynamic server groups to dynamic clusters, add the dynamicClusterServerGroupsToTarget entry with any dynamic server groups you wish to be targeted to the dynamic clusters in your model or domain. This list must only contain one dynamic server group if you are running a version of WebLogic Server earlier than 12.2.1.4.\n{ \u0026#34;definitions\u0026#34;: { \u0026#34;dynamicClusterServerGroupsToTarget\u0026#34; : [ \u0026#34;WSMPM-DYN-CLUSTER\u0026#34;, \u0026#34;WSM-CACHE-DYN-CLUSTER\u0026#34; ] } } If you wish to specify which dynamic server group to target to a dynamic server, add DynamicClusterServerGroupTargetingLimits to the domainInfo of your model. This entry can coexist with managed servers defined in ServerGroupTargetingLimits.\ndomainInfo: AdminUserName: weblogic AdminPassword: welcome1 ServerStartMode: prod DynamicClusterServerGroupTargetingLimits: SOA-DYN-CLUSTER: soa_dynamic_cluster "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/variable_injection/",
	"title": "Variable Injector Tool",
	"tags": [],
	"description": "Adds token to a model with variables.",
	"content": "The Variable Injector Tool is used to tokenize a model with variables. The values for these variables are assigned using an external property file. This facilitates using the same domain model to create new domains in different environments. The Variable Injector Tool can be run as an option in the Discover Domain Tool, or from the standalone command-line interface.\nTo enable the Variable Injector Tool during the Discover Domain Tool run, create a variable injector configuration by placing a JSON file named model_variable_injector.json into the \u0026lt;WLSDEPLOY\u0026gt;/lib directory using one or more of the pre-defined keywords and/or a CUSTOM list of files.\nAnother option is to configure variable injection in a Custom configuration directory. Create the model_variable_injector.json file in the $WDT_CUSTOM_CONFIG directory.\nA keyword points to an injector directive file. The tool applies the directives to the attributes in a model, and if the directive matches an attribute, then a property token with a unique variable name is injected into the model and replaces the attribute value. The variable name and model attribute value are placed into the external variable properties file.\nVariable injection on an attribute is only performed once. The property token is not replaced by any subsequent matches.\n If variable injection is enabled, the Discover Domain Tool calls the variable injector after the model has been discovered and after all filters run, but before model validation.\nThe supported keywords are as follows:\n CREDENTIALS - All MBean credentials attribute values (user and password) are injected with a variable. HOST - All MBean host attribute values in the model are injected with a variable. PORT - All MBean port attribute values in the model are injected with a variable. TARGET - All MBean target attribute values in the model are injected with a variable. TOPOLOGY - Common environmental MBean attributes found in the topology section of the model are injected with a variable. This includes server, machine and Node Manager ports, credentials and listen addresses, and cluster messaging modes, addresses and ports. URL - All MBean URL attribute values in the model are injected with a variable.  The directives used by each pre-defined keyword are defined in an injector JSON file that is located in the \u0026lt;WLSDEPLOY\u0026gt;/lib/injectors folder. These files should not be changed, but could be used as is.\n Here is an example of a model_variable_injector.json file using the PORT keyword.\n{ \u0026#34;PORT\u0026#34;: {} } Below is a model snippet that shows injected variables in the port attributes.\ntopology: Name: soa_domain AdminServerName: AdminServer Cluster: soa_cluster: osb_cluster: Server: AdminServer: ListenAddress: myadmin.example.com ListenPort: @@PROP:Server.AdminServer.ListenPort@@ Machine: machine1 SSL: Enabled: true ListenPort: @@PROP:Server.SSL.AdminServer.ListenPort@@ soa_server1: ListenAddress: managed1.example.com ListenPort: @@PROP:Server.soa_server1.ListenPort@@ Cluster: soa_cluster Machine: machine2 SSL: Enabled: true ListenPort: @@PROP:Server.SSL.soa_server1.ListenPort@@ soa_server2: ListenAddress: managed2.example.com ListenPort: @@PROP:Server.soa_server2.ListenPort@@ Cluster: soa_cluster Machine: machine3 SSL: Enabled: true ListenPort: @@PROP:Server.SSL.soa_server2.ListenPort@@ And the resulting variable property file:\nServer.AdminServer.ListenPort=7001 Server.AdminServer.SSL.ListenPort=7002 Server.soa_server1.ListenPort=8001 Server.soa_server1.SSL.ListenPort=8002 Server.soa_server2.ListenPort=8001 Server.soa_server2.SSL.ListenPort=8002 To specify the name and location of the variable properties file for the Discover Domain Tool, use the argument -variable_properties_file on the command line. Usage of the -variable_properties_file argument without the presence of the model variable injector file in the \u0026lt;WLSDEPLOY\u0026gt;/lib directory will cause an error condition and the tool will exit. If the model variable injector file exists in the directory, but the command-line argument is not used, the variable properties file is created with the following defaults:\n If the -model_file command-line argument is used on the Discover Domain Tool run, the properties file name and location will be the same as the model file, with the file extension .properties. If only the archive file argument is present, the archive file name and location will be used.  As with the archive and model file, each run of the Discover Domain Tool will overwrite the contents of an existing variable property file with the values from the current run.\nCustom variable injector To designate custom injector directives, use the CUSTOM keyword in the model_variable_injector.json file. The CUSTOM keyword requires a list of one or more custom injector directive JSON files.\nAn injector directive contains a key that identifies an attribute to be tokenized, and an optional set of directive properties. The key is a period-separated MBean hierarchy and attribute name as they are defined in the model. Always exclude the name of the model section from the injector key.\nFor example, an injector key for the Server SSL Listen Port is as below. This directive contains no additional properties.\n{ \u0026#34;Server.SSL.ListenPort\u0026#34;: {} } NOTE: The hierarchy of MBeans in the model for the ListenPort attribute. Note that the MBean name of AdminServer is NOT included in the directive:\ntopology: Server: AdminServer: ListenAddress: myadmin.example.com ListenPort: 7001 Machine: machine1 SSL: Enabled: true ListenPort: 7002 These custom injector JSON files will be processed by the Variable Injector Tool before keywords, each file processed in list order. A property injected into an attribute will not be replaced by any subsequent matches.\nCustom directive properties Include the following properties to refine the directive as specified.\n  force:\u0026lt;attribute\u0026gt; If the MBean hierarchy exists in the model, but the attribute does not, then the attribute will be added and persisted to the discovered model. The value stored in the model is the WebLogic default value.\n  variable_value: Replace the model value with the specified value in the variable properties. This may be used in conjunction with the force directive, replacing the default value with the indicated value.\n  regexp: A list of regexp patterns that will be applied to either the string values or map values of an attribute in the model. If the pattern matches, then the matching part of the string or dictionary will be injected with a property token and a unique variable name.\n  pattern: The regular expression pattern to apply to the string value or map values of an attribute.\n  suffix: The suffix name to append to each resulting variable name in order to create a unique variable name.\n    The regexp list is useful when only a segment of a string value or map needs to be tokenized (giving you a clean list of property values in the variable properties file). You can inject more than one token into a string or map with multiple patterns. However, when you have more than one pattern, you must provide a suffix for each. This allows the tool to generate a unique variable name for each token in the string or map.\nThe following is an example of how to effectively use the regexp directive list to search for a segment in a string value. In this example, we want to search for the host and port in each Oracle JDBC URL that uses the special Oracle URL notation, and create an entry for the host and port in the variable properties file.\nIn the model, we expect to find a URL like the following:\nJDBCSystemResource: Database1: JdbcResource: JDBCDriverParams: URL: \u0026#39;jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=slc05til.us.oracle.com)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=orcl.us.oracle.com)))\u0026#39; We create a directive in our custom injector JSON file:\n\u0026#34;JDBCSystemResource.JdbcResource.JDBCDriverParams.URL\u0026#34;: { \u0026#34;regexp\u0026#34;: [ { \u0026#34;pattern\u0026#34;: \u0026#34;(?\u0026lt;=PORT=)[\\\\w.-]+(?=\\\\))\u0026#34;, \u0026#34;suffix\u0026#34;: \u0026#34;Port\u0026#34; }, { \u0026#34;pattern\u0026#34;: \u0026#34;(?\u0026lt;=HOST=)[\\\\w.-]+(?=\\\\))\u0026#34;, \u0026#34;suffix\u0026#34;: \u0026#34;Host\u0026#34; } ] }, During the Discover Domain Tool run, the pattern is applied to the URL string and tokens injected into the string:\nURL: 'jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=@@PROP:JDBCSystemResource.Database1.JdbcResource.JDBCDriverParams.URL--Host@@:)(PORT=@@PROP:JDBCSystemResource.Database1.JdbcResource.JDBCDriverParams.URL--Port@@)))(CONNECT_DATA=(SERVICE_NAME=orcl.us.oracle.com)))' And the variables put in the properties file:\nJDBCSystemResource.Database1.JdbcResource.JDBCDriverParams.URL--Host=slc05til.us.oracle.com JDBCSystemResource.Database1.JdbcResource.JDBCDriverParams.URL--Port=1521 Selecting specific MBean names for variable injection This final custom directive allows you to explicitly define which named entries for an MBean in the model you want to inject properties. For instance, you might want to tokenize an attribute just for a specific server. To define a list of one or more names for a specific MBean in the injector directive hierarchy, format the list as follows:\nMBean[comma separated list of names] To select only the Administration Server named AdminServer for a Server directive, use the format Server[AdminServer]. To select servers soa_server1 and soa_server2, format the key as Server[soa_server1,soa_server2].\nThe injector tool recognizes two KEYWORDS for a user list, MANAGED_SERVERS (all the Managed Servers in the model) and ADMIN_SERVER (the Administration Server in the model).\nA custom injector for the Administration Server SSL listen port is:\n{ \u0026#34;Server[ADMIN_SERVER].SSL.ListenPort\u0026#34;: {}, } Variable injector sample A sample of a model_variable_injector.json file and a custom injector JSON file are installed in the WLSDEPLOY/samples directory.\nParameter table for injectVariables    Parameter Definition Default     -archive_file The path to the archive file that contains a model in which the variables will be injected. If the -model_file argument is used, this argument will be ignored.    -model_file The location of the model file in which variables will be injected. If not specified, the tool will look for the model in the archive file. Either the -model_file or the -archive_file argument must be provided.    -oracle_home Home directory for the Oracle WebLogic installation. This is required unless the ORACLE_HOME environment variable is set.    -variable_injector_file The location of the variable injector file which contains the variable injector keywords for this model injection run. If this argument is not provided, the model_variable_injector.json file must exist in the lib directory in the WLSDEPLOY_HOME location.    -variable_properties_file The location of the property file in which to store any variable names injected into the model. If this command-line argument is not specified, the variable will be located and named based on the model file or archive file name and location. If the file exists, the file will be updated with new variable values.     "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/model_help/",
	"title": "Model Help Tool",
	"tags": [],
	"description": "Provides information about the folders and attributes that are valid for sections and folders of a domain model.",
	"content": "The Model Help Tool provides information about the folders and attributes that are valid for sections and folders of a domain model. This is useful when creating a new domain model, or expanding an existing model, including discovered models.\nThe Model Help Tool is new in WebLogic Deploy Tooling 1.8. The -model_sample argument is deprecated starting with WebLogic Deploy Tooling 1.9.2, when model sample became the default output format.\n Here is a simple example using the Model Help Tool:\n$ \u0026lt;wls-deploy-home\u0026gt;/bin/modelHelp.sh -oracle_home /tmp/oracle resources:/JDBCSystemResource This will result in the following output:\nAttributes and sub-folders for resources:/JDBCSystemResource resources: JDBCSystemResource: \u0026#39;JDBC-1\u0026#39;: CompatibilityName: # string + DeploymentOrder: # integer (default=100) + DeploymentPrincipalName: # string + DescriptorFileName: # string + ModuleType: # string + Notes: # string + SourcePath: # string + Target: # delimited_string + JdbcResource: # see /JDBCSystemResource/JdbcResource SubDeployment: \u0026#39;SubDeployment-1\u0026#39;: # see /JDBCSystemResource/SubDeployment This bean defines a system-level JDBC resource. It links a separate descriptor that specifies the definition. This output shows the eight attributes and two sub-folders available for the JDBCSystemResource folder in the resources section of the model. Each attribute includes a comment describing the type of the value to be added. A plus sign (+) on an attribute indicates that appending the attribute to the model path will yield more information about the attribute.\nFolders that support multiple instances, such as JDBCSystemResource in this example, are shown with a derived name, such as 'JDBC-1'.\nEach sub-folder includes a comment with a model path that can be used to display additional information about that sub-folder. For example, to determine the attributes and sub-folders for 'SubDeployment-1', the Model Help Tool could be re-invoked with the model path from the comment:\n$ \u0026lt;wls-deploy-home\u0026gt;/bin/modelHelp.sh -oracle_home /tmp/oracle -model_sample /JDBCSystemResource/SubDeployment You can use the information above to construct this model section:\nresources: JDBCSystemResource: JDBC-1: # JDBCSystemResource attributes and folders CompatibilityName: myName DeploymentOrder: 5 Target: ms1,ms2 SubDeployment: deployment1: # SubDeployment attributes and folders deployment2: # SubDeployment attributes and folders If you are copying elements from the sample model to create a full domain model, you should exclude any attributes or sub-folders that you do not intend to declare or override.\nPath patterns There are a number of ways to specify model location in the path argument. Here are some examples:\nList all the top-level model sections, such as topology, resources, and such:\ntop List the attributes and folders within a section, such as topology, resources, and such:\ntopology List all the attributes and folders within a folder:\nresources:/JDBCSystemResource/JdbcResource If the section is not provided for a folder, then it will be derived and included in the output text:\n/JDBCSystemResource/JdbcResource Per attribute help To show help for a particular attribute in a folder, simply add it to the model path.\nFor example:\n$ modelHelp.sh topology:/Server/Log/StdoutSeverity The output is:\nAttributes and sub-folders for topology:/Server/Log/StdoutSeverity topology: Server: \u0026#39;Server-1\u0026#39;: Log: StdoutSeverity: # string Default=Notice Legal values: \u0026#39;Trace\u0026#39; \u0026#39;Debug\u0026#39; \u0026#39;Info\u0026#39; \u0026#39;Warning\u0026#39; \u0026#39;Error\u0026#39; \u0026#39;Notice\u0026#39; \u0026#39;Critical\u0026#39; \u0026#39;Alert\u0026#39; \u0026#39;Emergency\u0026#39; \u0026#39;Off\u0026#39; The minimum severity of log messages going to the standard out. Messages with a lower severity than the specified value will not be published to standard out. Output options There are several command-line options that you can use to control the output text for the model path. Use only one of these options at a time. If no output options are specified, then the attributes and immediate sub-folders for the specified path are listed.\nWhen the top sections are listed using the path top, any output options are ignored.\n -attributes_only This option will list only the attributes for the specified path.\n-folders_only This option will list only the immediate sub-folders for the specified path.\n-recursive This option will recursively list all the sub-folders within the specified path. No attributes are listed.\nHere is an example using the -recursive option:\n$ \u0026lt;wls-deploy-home\u0026gt;/bin/modelHelp.sh -oracle_home /tmp/oracle -recursive resources:/JDBCSystemResource The output is:\nRecursive sub-folders only for resources:/JDBCSystemResource resources: JDBCSystemResource: \u0026#39;JDBC-1\u0026#39;: JdbcResource: JDBCConnectionPoolParams: JDBCDataSourceParams: JDBCDriverParams: Properties: \u0026#39;Properties-1\u0026#39;: JDBCOracleParams: JDBCXAParams: SubDeployment: \u0026#39;SubDeployment-1\u0026#39;: Interactive option To access an interactive command line for exploring model paths using a directory style syntax, use modelHelp.sh -interactive \u0026lt;starting_model_path\u0026gt;.\nFor example:\n$ modelHelp.sh -interactive top The output is:\nIn interactive mode! Type \u0026#39;help\u0026#39; for help. [top] --\u0026gt; help Commands: ls - list contents of current location top, cd, cd /, cd top - go to \u0026#34;top\u0026#34; cd x[/[...]] - relative change (go to child location x...) cd section[:/[...]] - absolute change (go to exact section and location) cd /folder[/...] - find section that contains the folder and go there cd .. - go up history - history of visited locations exit - exit Sections: domainInfo, topology, resources, appDeployments, kubernetes Examples: cd topology cd topology:/Server/Log/StdoutSeverity cd /Server/Log/StdoutSeverity [top] --\u0026gt;  Parameter table for model_help    Parameter Definition Default     -attributes_only List only the attributes for the specified model path.    -folders_only List only the folders for the specified model path.    -oracle_home Home directory of the Oracle WebLogic installation. Required if the ORACLE_HOME environment variable is not set.    -recursive List only the folders for the specified model path, and recursively include the folders below that path.    \u0026lt;model_path\u0026gt; The path to the model element to be examined. The format is [^\u0026lt;section^\u0026gt;:][/^\u0026lt;folder^\u0026gt;]...    -interactive \u0026lt;starting_model_path\u0026gt; Interactive mode.     "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/wko-model/",
	"title": "Using WDT with WebLogic Kubernetes Operator",
	"tags": [],
	"description": "Using WDT with WebLogic Kubernetes Operator.",
	"content": "For details, see the Extract Domain Resource Tool.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/archive_helper/",
	"title": "Archive Helper Tool",
	"tags": [],
	"description": "Helps you create and modify archive files.",
	"content": "With the Archive Helper Tool, you can display the contents of an archive file, add, update, extract, and remove files, as needed.\nUse the Archive Helper Tool -help option to display its commands. Each command takes a subcommand, which may require one or more command-line options.\narchiveHelper commands    Command Description     add Add items to the archive file.   extract Extract items from the archive file.   list List contents of the archive file.   remove Remove items to the archive file.    For each command, use the -help option for usage information about its subcommands.\nFor example, to display the subcommands of the archiveHelper add command:\n$ \u0026lt;wls-deploy-home\u0026gt;/bin/archiveHelper.sh add -help This will result in the following output:\nAdd items to the archive file. Usage: archiveHelper add [-help] [COMMAND] Command-line options: -help Get help for the archiveHelper add command Subcommands: application Add application to the archive file. applicationPlan Add application deployment plan to the archive file. classpathLibrary Add classpath library to the archive file. coherenceConfig Add a Coherence config file to the archive file. coherencePersistenceDir Add a Coherence persistence directory to the archive file. custom Add custom file/directory to the archive file. databaseWallet Add database wallet to the archive file. domainBinScript Add $DOMAIN_HOME/bin script to the archive file. domainLibrary Add $DOMAIN_HOME/lib library to the archive file. fileStore Add empty file store directory to the archive file. jmsForeignServer Add a JMS Foreign Server binding file to the archive file. mimeMapping Add MIME mapping file to the archive file. nodeManagerKeystore Add node manager keystore to the archive file. opssWallet Add OPSS wallet to the archive file. rcuWallet Add RCU database wallet to the archive file. saml2InitializationData Add a SAML2 data initialization file to the archive file. script Add script to the archive file. serverKeystore Add a server keystore to the archive file. sharedLibrary Add shared library to the archive file. sharedLibraryPlan Add shared library deployment plan to the archive file. structuredApplication Add structured application installation directory to the archive file. To display the command-line options for the archiveHelper add application subcommand:\n$ \u0026lt;wls-deploy-home\u0026gt;/bin/archiveHelper.sh add application -help This will result in the following output:\nAdd application to the archive file. Usage: archiveHelper add application [-help] [-overwrite] -archive_file=\u0026lt;archive_file\u0026gt; -source=\u0026lt;path\u0026gt; Command-line options: -archive_file=\u0026lt;archive_file\u0026gt; Path to the archive file to use. -overwrite Overwrite the existing entry in the archive file, if any -source=\u0026lt;path\u0026gt; File system path to the application to add -help Get help for the archiveHelper add application subcommand Note: If using an Application Installation Directory, please see the archiveHelper add structuredApplication command. Usage scenarios   list application: List the applications in the archive file.\n$ \u0026lt;wls-deploy-home\u0026gt;/bin/archiveHelper.sh list application -archive_file=C:\\temp\\archive-helper-test.zip   add application: Update an existing application in the archive.\n$ \u0026lt;wls-deploy-home\u0026gt;/bin/archiveHelper.sh add application -archive_file=C:\\temp\\archive-helper-test.zip -source=C:\\temp\\my-app.war -overwrite NOTE: Without the -overwrite option, the application gets added to the archive with a numerical suffix.\n  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.3.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #1517 - Added a postCreateRcuSchemasScript element to the typedef file definitions to accommodate extra schema patching work required for Oracle Identity Governance domain creation. #1519 - Added rcu_admin_user field to the domainInfo:/RCUDbInfo section to replace rcu_db_user, which is now deprecated and will be removed in a future release. This field is optional and will default to the appropriate admin user name: admin when using an ATP database and SYS otherwise.  Bug Fixes  #1518 - Fixed an issue when using an ATP database as the RCU schema repository that was causing config/fmwconfig/jps-config.xml to contain a clear text password after JRF domain creation.  Known Issues None\nSee https://oracle.github.io/weblogic-deploy-tooling/userguide/limitations/limitations/ for the current set of known limitations.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.6/",
	"title": "Release Notes 3.2.6",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.2.6  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #1514 - Added the ability to disable the RCU drop schema step when running Create Domain with -run_rcu.  Bug Fixes  #1511 - Fixed an error message to make it more helpful. #1513 - Fixed issues with sparse RCU Data Source template merging when creating JRF domains.  Known Issues None\nSee https://oracle.github.io/weblogic-deploy-tooling/userguide/limitations/limitations/ for the current set of known limitations.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.5/",
	"title": "Release Notes 3.2.5",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.2.5  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes None\nBug Fixes #1506 - Fixed an issue with online discovery of the JMS ErrorDestination attribute (GitHub #1494). #1507 - Added documentation for the WDT Discover Domain tool\u0026rsquo;s limitation regarding users and groups in the DefaultAuthenticator (GitHub #1493). #1508 - Fixed an issue with Update Domain that was causing the Oracle JDBC driver to throw FileNotFoundException when using a JRF domain with an ATP database. #1509 - Fixed an issue with online discovery of custom security providers that caused the implementation class name to be added to the model instead of the interface class name (GitHub #1495).\nKnown Issues None\nSee https://oracle.github.io/weblogic-deploy-tooling/userguide/limitations/limitations/ for the current set of known limitations.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.4/",
	"title": "Release Notes 3.2.4",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.2.4  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #1503 - Added the EnableJMSStoreDBPersistence and EnableJTATLogDBPersistence attributes to domainInfo, which allow JRF domains to automatically convert template-defined JMS and JTA stores from File stores to Database stores during domain creation. This feature was added in support of Oracle Identity Governance domain creation.  Bug Fixes None\nKnown Issues "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.3/",
	"title": "Release Notes 3.2.3",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.2.3  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #1496 - Added a post-createDomain script element to the typedef file definitions to accommodate extra offline work required for Oracle Identity Governance domain creation. #1499 - Added updated translation bundle files.  Bug Fixes  #1486 - Fixed JSON parser issue in handling escaped newlines. #1488 - Worked around a Jython 2.2.1 issue where environment variables with a newline in their value caused remaining environment variable values to not be visible from Jython. #1490 - Fixed an issue with deprecation logging statements to ensure that the class and method names were logged properly. #1494 - Changed the language for some logging/error messages to make them clearer. #1495 - Reworded several log messages that were confusing to users and difficult to translate. #1497 - Fixed sh-based shell scripts to work properly on Solaris 10.x Bourne shell #1498 - Corrected the error message for a deploy-related error.  Known Issues "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.2/",
	"title": "Release Notes 3.2.2",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.2.2  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #1475 - Added support for upcoming SAML2 data initialization files in the archive file. #1476 - Added support for upcoming SAML2 data initialization files in the Discover Domain, Create Domain, and Update Domain tools.  Bug Fixes  #1482 - Fixed an issue related to secret naming that was causing the generated secret names to overlap in locations with multiple credential or password fields. #1483 - Filtered out the OPSSSecrets field in the domainInfo section of the model when targeting WebLogic Kubernetes Operator or Verrazzano MII and PV targets. #1484 - Fixed aliases for the 12.2.1.4 and 14.1.1 July 2023 PSU versions.  Known Issues "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.1/",
	"title": "Release Notes 3.2.1",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.2.1  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #1465 - Initial, limited i18n translation bundles added.  Bug Fixes  #1466 - Updated Server and ServerTemplate aliases to add new 14.1.2 offline attributes. #1467 - Updated CoherenceSystemResource aliases to add new 14.1.2 SecuredProduction online attribute. #1468 - Fixed an error related to tool initialization with WebLogic Server versions earlier than 12.2.1 (Issue #1466). #1469 - Corrected method names used for logging so that they are the same as the actual method name in which they are being used. #1470 - Fixed system-test test 35 to allow it to succeed when run on machines other than the Jenkins agents. #1471 - Fixed a discoverDomain issue that was causing errors while looking for SecureMode on WebLogic Server versions earlier than 12.2.1.1 (Issue #1467).  Known Issues "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.2.0/",
	"title": "Release Notes 3.2.0",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.2.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #1450 - Added alias updates for April 2023 PSUs for 12.2.1.3, 12.2.1.4, and 14.1.1. #1454 - Added aliases for new fields introduced 14.1.2. #1457 - Deprecated system-elements section of typedef files and replaced it with a new discover-filters section that supports filtering named elements in most top-level folders. #1458 - Updated Model and Archive documentation to reflect the current state of the code.  Bug Fixes  #1459 - Fixed a type conversion issues for properties entries where boolean and integers were not being properly converted to strings in 14.1.1 and newer.  Known Issues "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.1.0/",
	"title": "Release Notes 3.1.0",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.1.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #1431 - Added new OPSSInitialization section to domainInfo in order to support ODI and OIG domain creation. #1432 - Added database connectivity check to validate RCU database connection details prior to creating a domain using RCU schemas when not running RCU. #1434 - Added JSON output of restart and non-dynamic change information (#1154) #1438 - Deprecated the use of all RCU-related arguments that provide database connectivity information with the Create Domain tool.  Bug Fixes  #1428 - Added command-line usage for OPSS Wallet related arguments to Create Domain. Enhanced the documentation to describe how to use the OPSS Wallet to recreate a domain that connects to existing RCU schemas. #1429 - Updated Discover Domain -target argument usage. Updated the documentation related to -target to reflect recent changes. #1436 - Fixed an issue with deleting machines created by a template. #1437 - Fixed offline discovery issues when discovering domains that have used slashes in their object names (e.g., SOA Suite) #1438 - Fixed issues where Create Domain RCU-related command-line arguments were not override model-supplied values. #1439 - Worked around a discovery issue for domains with the Trust Service Identity Asserter when the Oracle Home has not been patched to contain the security provider\u0026rsquo;s schema JAR file.  Known Issues "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.4/",
	"title": "Release 3.0.4",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.0.4  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes None\nBug Fixes  #1422: Fixed a bug in online discovery of the Cluster attribute of ServerTemplate. #1425: Fixed a bug for online remote discovery causing SSL cipher suites to show up in 14.1.1 even when it was set to the default value.  Known Issues "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.3/",
	"title": "Release Notes 3.0.3",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.0.3  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes None\nBug Fixes  #1412: Fixed a bug in the Prepare Model integration with WKTUI. #1413: Fixed a number of internationalization message-related issues. #1414: Fixed a bug with wallet collection during discovery of a Proxy data source. #1416: Fixed a bug in the handling of mail session properties with credentials that was causing a Jython AttributeError (Issue #1415). #1419: Fixed open issue from previous releases regarding wlst attribute not defined errors in online remote discovery. #1420: Fixed a bug where a trailing slash on an application SourcePath would cause a empty ZIP file error.  Known Issues "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.2/",
	"title": "Release Notes 3.0.2",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.0.2  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes None\nBug Fixes  #1405: Corrected some issues with the Windows shell scripts where they were not properly handling paths with spaces. #1409: Corrected a bug where a wallet deprecation message was still being logged as a warning. #1411: Corrected a bug where wallet extraction handling with multiple archive files was happening in the wrong order.  Known Issues  When running discoverDomain with the -remote flag, there are several MBeans that are not being properly handled that will result in INFO level messages that look similar to the example shown below. These errors seem to happen only when the MBean is non-existent so the resulting model should still be accurate. These issues are expected to be fixed in a future release.  ####\u0026lt;Feb 16, 2023 1:40:00 PM\u0026gt; \u0026lt;INFO\u0026gt; \u0026lt;Discoverer\u0026gt; \u0026lt;_add_to_dictionary\u0026gt; \u0026lt;WLSDPLY-06106\u0026gt; \u0026lt;Unable to add ServerFailureTrigger from location /Clusters/mycluster/OverloadProtection/mycluster to the model : Failed to convert the wlst attribute name and value for the model at location (model_folders = ['Cluster', 'OverloadProtection'], 'name_tokens' = {'DOMAIN': 'tododomain', 'CLUSTER': 'mycluster','OVERLOADPROTECTION': 'mycluster'}) : The wlst attribute ServerFailureTrigger is not defined for the model folder /Cluster/OverloadProtection\u0026gt; "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.1/",
	"title": "Release 3.0.1",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.0.1  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes None\nBug Fixes  #1396: Added additional validation to the RCUDbInfo section. #1398: Corrected a bug introduced in 3.0.0 that broke validation of sparse models with dynamic clusters.  Known Issues  When running discoverDomain with the -remote flag, there are several MBeans that are not being properly handled that will result in INFO level messages that look similar to the example shown below. These errors seem to happen only when the MBean is non-existent so the resulting model should still be accurate. These issues are expected to be fixed in a future release.  ####\u0026lt;Feb 16, 2023 1:40:00 PM\u0026gt; \u0026lt;INFO\u0026gt; \u0026lt;Discoverer\u0026gt; \u0026lt;_add_to_dictionary\u0026gt; \u0026lt;WLSDPLY-06106\u0026gt; \u0026lt;Unable to add ServerFailureTrigger from location /Clusters/mycluster/OverloadProtection/mycluster to the model : Failed to convert the wlst attribute name and value for the model at location (model_folders = ['Cluster', 'OverloadProtection'], 'name_tokens' = {'DOMAIN': 'tododomain', 'CLUSTER': 'mycluster','OVERLOADPROTECTION': 'mycluster'}) : The wlst attribute ServerFailureTrigger is not defined for the model folder /Cluster/OverloadProtection\u0026gt; "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-3.0.0/",
	"title": "Release 3.0.0",
	"tags": [],
	"description": "",
	"content": "Changes in Release 3.0.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features  #1355: Added -remote option to the deployApps tool that supports deploying applications and shared libraries from a remote machine. (Issue #1312) #1355: Added -remote option to the updateDomain tool that allows configuration changes not requiring archive file changes (except for applications and shared libraries) to be made from a remote machine. (Issue #1167) #1365: Added new verrazzano section of the model that can be used to augment/override the YAML files generated by the Verrazzano-related -target options. (WDT-688) #1367: New archiveHelper tool for helping to create and update the archive file from the command line. (WDT-711) Cleaned up the aliases to clean up online discovery and put tests in place to ensure that they align properly with the various WebLogic Server releases and PSUs. The resulting model from online discovery is now much closer to the one generated by offline discovery.  Other Changes   #1255: Renamed model attributes to align with the offline naming strategy:\n SystemComponent MWHome model attribute renamed to MwHome. WebserviceSecurity DefaultCredentialProviderSTSURI model attribute renamed to DefaultCredentialProviderStsuri.    #1299: Renamed model attributes to align with the offline naming strategy:\n SecurityConfiguration IdentityAssertionCacheTTL model attribute renamed to IdentityAssertionCacheTtl.    #1310: Resolved issue that was causing the PSU version of several 12.2.1.3 PSUs to be incorrect.\n  #1314, #1342: Added knowledge to the aliases to understand how default values change when using production mode and secure production mode. (WDT-678)\n  #1328: Changed tool exit code handling to exit with exit code 1 if warnings exist and exit code 2 if errors exist in the summary report. (WDT-692)\n  #1331: Deprecated the old archive locations of the OPSS wallet and ATP wallet in the archive file. The old locations will be honored but will result in one or more deprecation messages. (WDT-687)\n  #1334: Removed support for storing the model files in the archive. (WDT-643)\n  #1341: Remove deprecated -domain_resource_file argument from the extractDomainResource tool. (WDT-706)\n  #1348: Renamed the old ATP wallet to rcu wallet. (WDT-709)\n  #1348: Added support for adding wallets either as a ZIP file or an exploded directory with one or more files. When the wallet is added as a ZIP file, the createDomain and updateDomain tools will expand the ZIP into the domain home, just as before.\n  #1348: Added database wallet support for multiple wallets. Other database wallets can be added, as needed. (WDT-710)\n  #1351: Removed support for the deprecated \u0026ldquo;named object list\u0026rdquo; format from the kubernetes section of the model. (WDT-688)\n  #1366: Refactored ATP and SSL database support to be more unified in their modeling approach.\n  #1369: Added a special log level for deprecation messages so that they can show up in the tools' summary reports without causing a non-zero exit status. (WDT-721)\n  #1375: Revamped application installation directory discovery to capture the entire application installation directory. (WDT-715)\n  #1379: Added the ability for discovery to collect the JDBC wallet file(s) in the archive.\n  #1380: Updated the approach for generating the Verrazzano custom resource related to the Ingress Trait routing rules to add a destination host/port and allow the user to add Paths via the new verrazzano section of the model. (WDT-696)\n  #1383: Removed the DomainVersion domain-level attribute from discovered models and replaced it with a comment describing the WDT and WebLogic Server version numbers used to discover the model and which WLST mode was used for discovery. (WDT-698)\n  #1386: Changed attribute not valid in the current WebLogic version warnings to log INFO level messages instead. (WDT-724)\n  #1389: Added additional model and WebLogic Kubernetes Operator/Verrazzano target validation around dynamic clusters to catch modeling issues prior to domain creation. (WDT-726)\n  #1391: Revamped tool summary report and remote report generated when using remote discovery. (WDT-637)\n  #1395: Added unclustered servers to the WKTUI integration output of prepareModel (WDT-730)\n  Bug Fixes  #1261, #1266: Corrected a discoverDomain error message when a keystore was missing. (WDT-685) #1324: Resolved an issue causing secure mode not to be discovered. (WDT-694) #1327: Resolved an issue where WLST errors in WLS 12.2.1.0.0 were showing up in the tools' summary reports. (WDT-691) #1329: Changed the tools summary log handler to not accept any messages that did not originate in WDT proper. (WDT-701) #1330: Fixed a Windows issue with environment variable substitution where environment variable references in the model that were not all uppercase were not working properly. #1335: Removed unused and undocumented -prev_model_file argument from the deployApps and updateDomain tools. (WDT-707) #1344: Removed -archive_file argument from the extractDomainResource tool since the model can no longer be stored in the archive file. (WDT-708) #1367: Corrected the behavior of the archive class to rename directories when an existing directory of the same name already exists. This makes the behavior for files and directories consistent. (WDT-722) #1374: Corrected a problem discovering a domain using a Coherence cluster with a custom configuration file. #1376: Corrected an issue with compareModel pertaining to comparisons of the JVM arguments and whitespace (Issue #1370) #1382: Removed misleading log entries during startup that displayed the WebLogic Server version with no PSU information (WDT-727) #1392: Fixed an issue with online discovery of domains with dynamic clusters where the dynamic servers were erroneously being added as configured servers. #1393: Fixed an issue causing an empty SecureMode folder to show up in an online discovered model. (WDT-731) #1394: Fixed alias entries to prevent some INFO messages with errors related to alias entries during online discovery.  Known Issues  When running discoverDomain with the -remote flag, there are several MBeans that are not being properly handled that will result in INFO level messages that look similar to the example shown below. These errors seem to happen only when the MBean is non-existent so the resulting model should still be accurate. These issues are expected to be fixed in a future release.  ####\u0026lt;Feb 16, 2023 1:40:00 PM\u0026gt; \u0026lt;INFO\u0026gt; \u0026lt;Discoverer\u0026gt; \u0026lt;_add_to_dictionary\u0026gt; \u0026lt;WLSDPLY-06106\u0026gt; \u0026lt;Unable to add ServerFailureTrigger from location /Clusters/mycluster/OverloadProtection/mycluster to the model : Failed to convert the wlst attribute name and value for the model at location (model_folders = ['Cluster', 'OverloadProtection'], 'name_tokens' = {'DOMAIN': 'tododomain', 'CLUSTER': 'mycluster','OVERLOADPROTECTION': 'mycluster'}) : The wlst attribute ServerFailureTrigger is not defined for the model folder /Cluster/OverloadProtection\u0026gt; "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.4/",
	"title": "Release 2.4.4",
	"tags": [],
	"description": "",
	"content": "Changes in Release 2.4.4  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes None\nBug Fixes  #1361: Resolved issue where the custom Coherence configuration file was not placed in the WebLogic Server domain\u0026rsquo;s expected location.  Known Issues  Due to the changes made for WDT-663 in WDT 2.4.0, the resulting remotely discovered model contains extra fields that would not normally be there. This is an area of ongoing work to clean up the online aliases to not depend on these extra remote calls to produce a clean model.  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.3/",
	"title": "Release 2.4.3",
	"tags": [],
	"description": "",
	"content": "Changes in Release 2.4.3  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes None\nBug Fixes  #1356: Resolved Issue where the new ATP Database URL format was causing connections to fail.  Known Issues  Due to the changes made for WDT-663 in WDT 2.4.0, the resulting remotely discovered model contains extra fields that would not normally be there. This is an area of ongoing work to clean up the online aliases to not depend on these extra remote calls to produce a clean model.  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.2/",
	"title": "Release 2.4.2",
	"tags": [],
	"description": "",
	"content": "Changes in Release 2.4.2  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes None\nBug Fixes  #1241: Resolved Issue #1240 that was causing a NullPointerException with discoverDomain. #1252: Reworked the unicode handling to resolve customer issues with 14.1.1 when using non-ASCII characters.  Known Issues  Due to the changes made for WDT-663 in WDT 2.4.0, the resulting remotely discovered model contains extra fields that would not normally be there. This is an area of ongoing work to clean up the online aliases to not depend on these extra remote calls to produce a clean model.  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.1/",
	"title": "Release 2.4.1",
	"tags": [],
	"description": "",
	"content": "Changes in Release 2.4.1  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features  None  Other Changes None\nBug Fixes  #1237: Resolved an issue where the tools supporting the -target parameter were doing target-related work even if the parameter was not specified.  Known Issues  Due to the changes made for WDT-663 in WDT 2.4.0, the resulting remotely discovered model contains extra fields that would not normally be there. This is an area of ongoing work to clean up the online aliases to not depend on these extra remote calls to produce a clean model.  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/release-2.4.0/",
	"title": "Release 2.4.0",
	"tags": [],
	"description": "",
	"content": "Changes in Release 2.4.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features  None  Other Changes  #1193 - Added support for changing the RCU Data Source type during JRF domain creation (WDT-636). #1210 - Improved the speed of remote discovery by bypassing remote calls to determine if a field was set (WDT-663). #1218 - Added -target support for WebLogic Kubernetes Operator 4.0 to generate the domain and cluster schema resources. #1220 - Added support for application modules for JDBC, JMS, and WLDF with normal WDT tokenization mechanisms (WDT-675).  Bug Fixes  #1194: Resolved an ordering issue when setting the FrontendHost and FrontendHTTPPort with dynamic clusters (WDT-668). #1196: Fixed issue #1170 which was causing an unexpected NameError. #1197: Log a warning when the security provider schematype file is missing (WDT-645) . #1208: Refactored tool exit handling to simplify the logic and resolve various errors. #1209: Resolved an issue with structured applications where the model data was not being honored for the deployment plan file name. #1214: Resolved an issue with structured application discovery causing duplicate override files to show up in the archive file. #1217: Resolved an issue with ATP database support that was not handling connect strings with multiple description fields. #1229: Resolved an alias issue where the TopicSubscriptionParams was incorrectly available on UniformDistributedQueue and not UniformDistributedTopic.  Known Issues  Due to the changes made for WDT-663, the resulting remotely discovered model contains extra fields that would not normally be there. This is an area of ongoing work to clean up the online aliases to not depend on these extra remote calls to produce a clean model.  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "WebLogic Deploy Tooling WebLogic Deploy Tooling (WDT) makes it easy to stand up WebLogic environments and perform domain lifecycle operations in a repeatable fashion based on a metadata model that can be treated as source and evolve as the project evolves.\nMany organizations use WebLogic Server, with or without other Oracle Fusion Middleware components, to run their enterprise applications. And, as more and more of these organizations move toward Continuous Delivery of their applications, the importance of automated configuration application deployment grows. This automation is often implemented using the WebLogic Scripting Tool (WLST) configuration and deployment scripting language, but this is challenging. Such scripts must be carefully updated as the project evolves or the project is deployed to different environments, such as test to production.\nWebLogic Deploy Tooling removes the need for most WebLogic Server deployments to rely on hand-coded WLST scripts for automating routine domain creation and application deployment tasks. It lets you write a declarative, metadata model, describing the domain and applications (with their dependent resources), and provides single-purpose tools that perform domain lifecycle operations based on the content of the model. It also lets you specify simple mutations suitable for moving your model between different environments, such as between test and production.\nWDT provides several single-purpose tools, all exposed as shell scripts (for both Windows and UNIX), that can:\n Create or update a domain. Populate a domain with all the resources and applications specified in a model. Add resources and applications to an existing domain. Introspect an existing domain and create a model file describing the domain and an archive file of the binaries deployed to the domain. Encrypt the passwords in a model (or its variable file). Validate a model as well as provide model usage information. Compare model files. Prepare model files for deploying to the WebLogic Kubernetes Operator environment. Generate a domain resource YAML file for use with the WebLogic Kubernetes Operator. Tokenize a model with variables. Provide information about the folders and attributes that are valid for sections and folders of a domain model.  For detailed information, see WDT Tools.\n Current production release WebLogic Deploy Tooling version and release information can be found here.\n Recent changes and known issues See the Release Notes for known issues and workarounds.\nAbout this documentation This documentation includes sections targeted to different audiences:\n Concepts explains the underlying metadata models and archive files. The User Guide contains detailed usage information, including how to install and configure WebLogic Deploy Tooling, and how to use each tool. The Samples provide informative use case scenarios. The Developer Guide provides details for people who want to understand how WDT is built, its features mapped and implemented. Those who wish to contribute to the WebLogic Deploy Tooling code will find useful information here.  Related projects  WebLogic Kubernetes Operator WebLogic Image Tool WebLogic Kubernetes Toolkit UI WebLogic Monitoring Exporter WebLogic Logging Exporter WebLogic Remote Console  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]