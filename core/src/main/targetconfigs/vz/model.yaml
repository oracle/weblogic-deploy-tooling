apiVersion: verrazzano.io/v1beta1
kind: VerrazzanoModel
metadata:
  name: {{{domainPrefix}}}-model
  namespace: default
spec:
  description: "{{{domainName}}} System"
  weblogicDomains:
    - name: "{{{domainName}}}"
      domainCRValues:
        domainUID: {{{domainUid}}}

        # The WebLogic Domain Home
        domainHome: {{{domainHome}}}

        # The WebLogic Server Docker image that the Operator uses to start the domain
        image: {{{imageName}}}

        # Identify which Secret contains the WebLogic Admin credentials
        webLogicCredentialsSecret:
          name: {{{webLogicCredentialsSecret}}}

        # Identify which Secret contains the credentials for pulling an image
        imagePullSecrets:
          - name: ocir
        logHomeEnabled: false
        logHome: {{{domainHome}}}/logs

        # clusters is used to configure the desired behavior for starting member servers of a cluster.
        # If you use this entry, then the rules will be applied to ALL servers that are members of the named clusters.
{{#hasClusters}}
        clusters:
{{/hasClusters}}
{{#clusters}}
          - clusterName: {{{clusterName}}}

            # The number of cluster member Managed Server instances to start for this WebLogic cluster
            replicas: {{{replicas}}}
{{/clusters}}
        serverPod:
          # an (optional) list of environment variable to be set on the servers
          env:
            - name: JAVA_OPTIONS
              value: "-Dweblogic.StdoutDebugEnabled=false"
            - name: USER_MEM_ARGS
              value: "-Djava.security.egd=file:/dev/./urandom -Xms64m -Xmx256m "
        configuration:
          model:
            domainType: {{{domainType}}}
{{#hasAdditionalSecrets}}

          # Secrets that are referenced by model yaml macros
          # (the model yaml in the optional configMap or in the image)
          secrets:
{{/hasAdditionalSecrets}}
{{#additionalSecrets}}
          - {{{additionalSecretName}}}
{{/additionalSecrets}}
      connections:
        - ingress:
            - name: {{{domainPrefix}}}-ingress
              match:
                - uri:
                    prefix: "/todo"
{{#hasDatabases}}
        - database:
{{/hasDatabases}}
{{#databases}}
            - target: {{{databasePrefix}}}-db
              datasourceName: {{{datasourceName}}}
{{/databases}}
